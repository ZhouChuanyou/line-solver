import sys
sys.path.append("/home/gabor/github/butools/Python")
import math
import numpy as np
import numpy.matlib as ml
import matplotlib.pyplot as plt
import butools
from butools.utils import *
from butools.ph import *
from butools.dph import *
from butools.map import *
from butools.moments import *
from butools.reptrans import*
from butools.mc import *
from butools.dmap import *
from butools.trace import *
from butools.mam import *
from butools.queues import *
from butools.fitting import *
from contextlib import redirect_stdout
import os


print('---BuTools: MC package test file---')
print('Enable the verbose messages with the BuToolsVerbose flag')
butools.verbose = True
print('Enable input parameter checking with the BuToolsCheckInput flag')
butools.checkInput = True
np.set_printoptions(precision=5,linewidth=1024)
print('========================================')
print('Testing BuTools function CRPSolve')
print('Input:')
print('------')
Q = ml.matrix([[-4.3, 3.5, 0.8],[-8.4, 6.5, 1.9],[17.3, -12.7, -4.6]])
print('Q = ')
print(Q)
print('Test:')
print('-----')
print('ret = CRPSolve(Q):')
ret = CRPSolve(Q)
print('ret = ')
print(ret)
print('ret*Q:')
print(ret*Q)
assert la.norm(ret*Q)<10**-12, "The solution does not satisfy ret*Q=0!"
print('========================================')
print('Testing BuTools function DRPSolve')
print('Input:')
print('------')
Q = ml.matrix([[-0.9, 0.5, 1.4],[0.9, -0.9, 1],[0.3, 1.3, -0.6]])
print('Q = ')
print(Q)
print('Test:')
print('-----')
print('ret = DRPSolve(Q):')
ret = DRPSolve(Q)
print('ret = ')
print(ret)
print('ret*Q-ret:')
print(ret*Q-ret)
assert la.norm(ret*Q-ret)<10**-12, "The solution does not satisfy ret*Q=ret!"
print('========================================')
print('Testing BuTools function CTMCSolve')
print('Input:')
print('------')
Q = ml.matrix([[-0.9, 0.5, 0.4],[0.9, -0.9, 0],[0.3, 0.3, -0.6]])
print('Q = ')
print(Q)
print('Test:')
print('-----')
print('ret = CTMCSolve(Q):')
ret = CTMCSolve(Q)
print('ret = ')
print(ret)
print('ret*Q:')
print(ret*Q)
assert la.norm(ret*Q)<10**-12, "The solution does not satisfy ret*Q=0!"
print('========================================')
print('Testing BuTools function DTMCSolve')
Q = ml.matrix([[0.1, 0.5, 0.4],[0.9, 0.1, 0],[0.3, 0.3, 0.4]])
print('Q = ')
print(Q)
print('Test:')
print('-----')
print('ret = DTMCSolve(Q):')
ret = DTMCSolve(Q)
print('ret = ')
print(ret)
print('ret*Q-ret:')
print(ret*Q-ret)
assert la.norm(ret*Q-ret)<10**-12, "The solution does not satisfy ret*Q=ret!"
print('========================================')
print('Testing BuTools function CheckGenerator')
print('Input:')
print('------')
Q = ml.matrix([[-0.9, 0.2, 0.4],[0, 0.9, 0.9],[0, 0.6, -0.6]])
print('Q = ')
print(Q)
print('Test:')
print('-----')
print('flag = CheckGenerator(Q, True):')
flag = CheckGenerator(Q, True)
print('flag = ')
print(flag)
assert flag==False, "CheckGenerator did not detect bad row sum!"
print('Input:')
print('------')
Q = ml.matrix([[-0.9, 0.5, 0.4],[0.9, -0.9, 0],[0.3, 0.3, -0.6]])
print('Q = ')
print(Q)
print('Test:')
print('-----')
print('flag = CheckGenerator(Q, True):')
flag = CheckGenerator(Q, True)
print('flag = ')
print(flag)
assert flag==True, "CheckGenerator did not recognize a valid input!"
print('Input:')
print('------')
Q = ml.matrix([[-0.9, 0.2, 0.4],[0.9, -0.9, 0],[0.3, 0.3, -0.6]])
print('Q = ')
print(Q)
print('Test:')
print('-----')
print('flag = CheckGenerator(Q, True):')
flag = CheckGenerator(Q, True)
print('flag = ')
print(flag)
assert flag==True, "CheckGenerator did not recognize a valid input!"
print('Input:')
print('------')
Q = ml.matrix([[-0.9, 0.5, 0.4],[0.9, -1.1, 0],[0.3, 0.3, -0.6]])
print('Q = ')
print(Q)
print('Test:')
print('-----')
print('flag = CheckGenerator(Q):')
flag = CheckGenerator(Q)
print('flag = ')
print(flag)
assert flag==False, "CheckGenerator did not recognize the non-zero row sum!"
print('Input:')
print('------')
Q = ml.matrix([[-0.9, 0.5, 0.4],[0.9, -0.9, 0],[0.3, 0.3, -0.6]])
print('Q = ')
print(Q)
print('Test:')
print('-----')
print('flag = CheckGenerator(Q):')
flag = CheckGenerator(Q)
print('flag = ')
print(flag)
assert flag==True, "CheckGenerator did not recognize a valid input!"
print('========================================')
print('Testing BuTools function CheckProbMatrix')
print('Input:')
print('------')
Q = ml.matrix([[0.1, 0.5, 0.4],[0.9, 0.1, 0],[0.3, -0.1, 0.4]])
print('Q = ')
print(Q)
print('Test:')
print('-----')
print('flag = CheckProbMatrix(Q):')
flag = CheckProbMatrix(Q)
print('flag = ')
print(flag)
assert flag==False, "CheckProbMatrix did not recognize the negative entry!"
print('Input:')
print('------')
Q = ml.matrix([[0.1, 0.5, 0.4],[0.9, 0.1, 0],[0.3, 0.1, 0.4]])
print('Q = ')
print(Q)
print('Test:')
print('-----')
print('flag = CheckProbMatrix(Q):')
flag = CheckProbMatrix(Q)
print('flag = ')
print(flag)
assert flag==False, "CheckProbMatrix did not recognize the invalid row sum!"
print('Input:')
print('------')
Q = ml.matrix([[0.1, 0.5, 0.4],[0.9, 0.1, 0],[0.3, 0.3, 0.4]])
print('Q = ')
print(Q)
print('Test:')
print('-----')
print('flag = CheckProbMatrix(Q):')
flag = CheckProbMatrix(Q)
print('flag = ')
print(flag)
assert flag==True, "CheckProbMatrix did not recognize that the input is valid!"
print('Input:')
print('------')
Q = ml.matrix([[0.1, 0.5, 0.4],[0.9, 0.1, 0],[0.3, 0.3, 0.4]])
print('Test:')
print('-----')
print('flag = CheckProbMatrix(Q, True):')
flag = CheckProbMatrix(Q, True)
print('flag = ')
print(flag)
assert flag==False, "CheckProbMatrix did not recognize wrong transient matrix!"
print('Input:')
print('------')
Q = ml.matrix([[0.1, 0.5, 0.4],[0.9, 0.1, 0],[0.3, 0.1, 0.4]])
print('Q = ')
print(Q)
print('Test:')
print('-----')
print('flag = CheckProbMatrix(Q, True):')
flag = CheckProbMatrix(Q, True)
print('flag = ')
print(flag)
assert flag==True, "CheckProbMatrix did not recognize that the input is valid!"
print('========================================')
print('Testing BuTools function CheckProbVector')
print('Input:')
print('------')
Q = ml.matrix([[1.1,-0.1]])
print('Test:')
print('-----')
print('flag = CheckProbVector(Q):')
flag = CheckProbVector(Q)
print('flag = ')
print(flag)
assert flag==False, "CheckProbVector did not recognize the negative entry!"
print('Input:')
print('------')
Q = ml.matrix([[1.1,0.1]])
print('Q = ')
print(Q)
print('Test:')
print('-----')
print('flag = CheckProbVector(Q):')
flag = CheckProbVector(Q)
print('flag = ')
print(flag)
assert flag==False, "CheckProbVector did not recognize invalid sum!"
print('Input:')
print('------')
Q = ml.matrix([[1,0]])
print('Q = ')
print(Q)
print('Test:')
print('-----')
print('flag = CheckProbVector(Q):')
flag = CheckProbVector(Q)
print('flag = ')
print(flag)
assert flag==True, "CheckProbVector did not recognize that the input is valid!"
print('Input:')
print('------')
Q = ml.matrix([[0.9,-0.1]])
print('Q = ')
print(Q)
print('Test:')
print('-----')
print('flag = CheckProbVector(Q, True):')
flag = CheckProbVector(Q, True)
print('flag = ')
print(flag)
assert flag==False, "CheckProbVector did not recognize the negative entry!"
print('Input:')
print('------')
Q = ml.matrix([[0.9,0.1]])
print('Q = ')
print(Q)
print('Test:')
print('-----')
print('flag = CheckProbVector(Q, True):')
flag = CheckProbVector(Q, True)
print('flag = ')
print(flag)
assert flag==True, "CheckProbVector did not recognize that the prob. vector is not transient!"
print('Input:')
print('------')
Q = ml.matrix([[0.8,0.1]])
print('Q = ')
print(Q)
print('Test:')
print('-----')
print('flag = CheckProbVector(Q, True):')
flag = CheckProbVector(Q, True)
print('flag = ')
print(flag)
assert flag==True, "CheckProbVector did not recognize that the input is valid!"

