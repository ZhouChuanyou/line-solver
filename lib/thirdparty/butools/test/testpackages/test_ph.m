clear all
run('/home/gabor/github/butools/Matlab/BuToolsInit.m')

disp('---BuTools: PH package test file---');
disp('Enable the verbose messages with the BuToolsVerbose flag');
global BuToolsVerbose;
BuToolsVerbose = true;
disp('Enable input parameter checking with the BuToolsCheckInput flag');
global BuToolsCheckInput;
BuToolsCheckInput = true;
global BuToolsCheckPrecision;
format short g;
disp('========================================')
disp('Testing BuTools function MomentsFromME')
disp('Input:');
disp('------');
a = [0.2,0.3,0.5];
disp('a = ');
disp(a);
A = [-1, 0, 0; 0, -3, 2; 0, -2, -3];
disp('A = ');
disp(A);
disp('Test:');
disp('-----');
disp('moms = MomentsFromME(a, A);:');
moms = MomentsFromME(a, A);
disp('moms = ');
disp(moms);
assert(CheckMoments(moms)==true, 'The function returned invalid moments!');
disp('moms = MomentsFromME(a, A, 9);:');
moms = MomentsFromME(a, A, 9);
disp('moms = ');
disp(moms);
assert(CheckMoments(moms)==true, 'The function returned invalid moments!');
disp('========================================')
disp('Testing BuTools function MomentsFromPH')
disp('Input:');
disp('------');
a = [0.1,0.9,0];
disp('a = ');
disp(a);
A = [-6.2, 2, 0; 2, -9, 1; 1, 0, -3];
disp('A = ');
disp(A);
disp('Test:');
disp('-----');
disp('moms = MomentsFromPH(a, A, 5);:');
moms = MomentsFromPH(a, A, 5);
disp('moms = ');
disp(moms);
assert(CheckMoments(moms)==true, 'The function returned invalid moments!');
disp('========================================')
disp('Testing BuTools function CdfFromME')
disp('Input:');
disp('------');
a = [0.2,0.3,0.5];
disp('a = ');
disp(a);
A = [-1, 0, 0; 0, -3, 2; 0, -2, -3];
disp('A = ');
disp(A);
x = (0.0:0.01:5.0);
disp('Test:');
disp('-----');
disp('cdf = CdfFromME(a, A, x);:');
cdf = CdfFromME(a, A, x);
plot(x, cdf)
assert(all(diff(cdf)>=0), 'The cdf is not increasing monotonously!');
assert(abs(sum(1-cdf)*0.01-MomentsFromME(a, A, 1))<0.01, 'The mean computed from the cdf does not match the theoretical result!');
disp('========================================')
disp('Testing BuTools function CdfFromPH')
disp('Input:');
disp('------');
a = [0.1,0.9,0];
disp('a = ');
disp(a);
A = [-6.2, 2, 0; 2, -9, 1; 1, 0, -3];
disp('A = ');
disp(A);
x = (0.0:0.002:3.0);
disp('Test:');
disp('-----');
disp('cdf = CdfFromPH(a, A, x);:');
cdf = CdfFromPH(a, A, x);
plot(x, cdf)
assert(all(diff(cdf)>=0), 'The cdf is not increasing monotonously!');
assert(abs(sum(1-cdf)*0.002-MomentsFromME(a, A, 1))<0.002, 'The mean computed from the cdf does not match the theoretical result!');
disp('========================================')
disp('Testing BuTools function PdfFromME')
disp('Input:');
disp('------');
a = [0.2,0.3,0.5];
disp('a = ');
disp(a);
A = [-1, 0, 0; 0, -3, 2; 0, -2, -3];
disp('A = ');
disp(A);
x = (0.0:0.01:5.0);
disp('Test:');
disp('-----');
disp('pdf = PdfFromME(a, A, x);:');
pdf = PdfFromME(a, A, x);
plot(x, pdf)
assert(all(pdf>=0), 'The pdf is negative!');
assert(abs(dot(x, pdf)*0.01-MomentsFromME(a, A, 1))<0.01, 'The mean computed from the pdf does not match the theoretical result!');
disp('========================================')
disp('Testing BuTools function PdfFromPH')
disp('Input:');
disp('------');
a = [0.1,0.9,0];
disp('a = ');
disp(a);
A = [-6.2, 2, 0; 2, -9, 1; 1, 0, -3];
disp('A = ');
disp(A);
x = (0.0:0.002:3.0);
disp('Test:');
disp('-----');
disp('pdf = PdfFromPH(a, A, x);:');
pdf = PdfFromPH(a, A, x);
plot(x, pdf)
assert(all(pdf>=0), 'The pdf is negative!');
assert(abs(dot(x, pdf)*0.002-MomentsFromPH(a, A, 1))<0.002, 'The mean computed from the pdf does not match the theoretical result!');
disp('========================================')
disp('Testing BuTools function IntervalPdfFromPH')
disp('Input:');
disp('------');
a = [0.1,0.9,0];
disp('a = ');
disp(a);
A = [-6.2, 2, 0; 2, -9, 1; 1, 0, -3];
disp('A = ');
disp(A);
x = (0.0:0.002:3.0);
disp('Test:');
disp('-----');
disp('[x, y] = IntervalPdfFromPH(a, A, x);:');
[x, y] = IntervalPdfFromPH(a, A, x);
plot(x, y)
assert(all(y>=0), 'The interval pdf is negative!');
assert(abs(dot(x, y)*0.002-MomentsFromPH(a, A, 1))<0.002, 'The mean computed from the interval pdf does not match the theoretical');
disp('========================================')
disp('Testing BuTools function RandomPH')
disp('Test:');
disp('-----');
disp('[a, A] = RandomPH(3, 8, 4);:');
[a, A] = RandomPH(3, 8, 4);
disp('a = ');
disp(a);
disp('A = ');
disp(A);
assert(CheckPHRepresentation(a, A), 'RandomPH failed to return a valid PH representation!');
assert(max(abs(MomentsFromPH(a, A, 1)-8))<10^-14, 'RandomPH failed to match the given mean value!');
disp('========================================')
disp('Testing BuTools function CheckMERepresentation')
disp('Input:');
disp('------');
a = [-0.2,0.2];
disp('a = ');
disp(a);
A = [1, -1; 1, -2];
disp('A = ');
disp(A);
disp('Test:');
disp('-----');
disp('flag = CheckMERepresentation(a, A);:');
flag = CheckMERepresentation(a, A);
disp('flag = ');
disp(flag);
assert(flag==false, 'CheckMERepresentation did not detect that the initial vector is invalid!');
disp('Input:');
disp('------');
a = [-0.2,0.4,0.8];
disp('a = ');
disp(a);
A = [-2, 0, 3; 0, -1, 1; 0, -1, -1];
disp('A = ');
disp(A);
disp('Test:');
disp('-----');
disp('flag = CheckMERepresentation(a, A);:');
flag = CheckMERepresentation(a, A);
disp('flag = ');
disp(flag);
assert(flag==false, 'CheckMERepresentation did not detect that the dominant eigenvalue is invalid!');
disp('Input:');
disp('------');
a = [0.2,0.3,0.5];
disp('a = ');
disp(a);
A = [-1, 0, 0; 0, -3, 2; 0, -2, -3];
disp('A = ');
disp(A);
disp('Test:');
disp('-----');
disp('flag = CheckMERepresentation(a, A);:');
flag = CheckMERepresentation(a, A);
disp('flag = ');
disp(flag);
assert(flag==true, 'CheckMERepresentation did not recognize that the given ME representation is valid!');
disp('========================================')
disp('Testing BuTools function CheckPHRepresentation')
disp('Input:');
disp('------');
a = [0.2];
disp('a = ');
disp(a);
A = [-1, 1; 1, -2];
disp('A = ');
disp(A);
disp('Test:');
disp('-----');
disp('flag = CheckPHRepresentation(a, A);:');
flag = CheckPHRepresentation(a, A);
disp('flag = ');
disp(flag);
assert(flag==false, 'CheckPHRepresentation did not recognize the wrong input dimensions!');
disp('Input:');
disp('------');
a = [0.2,0.7];
disp('a = ');
disp(a);
A = [-1, 1; 1, -2];
disp('A = ');
disp(A);
disp('Test:');
disp('-----');
disp('flag = CheckPHRepresentation(a, A);:');
flag = CheckPHRepresentation(a, A);
disp('flag = ');
disp(flag);
assert(flag==true, 'CheckPHRepresentation did not recognize that the given PH representation is valid!');
disp('========================================')
disp('Testing BuTools function CheckMEPositiveDensity')
disp('Input:');
disp('------');
a = [0.2,0.3,0.5];
disp('a = ');
disp(a);
A = [-1, 0, 0; 0, -3, 2; 0, -2, -3];
disp('A = ');
disp(A);
disp('Test:');
disp('-----');
disp('flag = CheckMEPositiveDensity(a, A);:');
flag = CheckMEPositiveDensity(a, A);
disp('flag = ');
disp(flag);
assert(flag==true, 'CheckMEPositiveDensity did not recognize that the given ME distribution has positive density!');
disp('Input:');
disp('------');
a = [0.2,0.3,0.5];
disp('a = ');
disp(a);
A = [-1, 0, 0; 0, -3, 2.9; 0, -2.9, -3];
disp('A = ');
disp(A);
disp('Test:');
disp('-----');
disp('flag = CheckMEPositiveDensity(a, A);:');
flag = CheckMEPositiveDensity(a, A);
disp('flag = ');
disp(flag);
assert(flag==false, 'CheckMEPositiveDensity did not recognize that the given ME distribution does not have positive density!');
disp('========================================')
disp('Testing BuTools function APHFrom3Moments')
disp('Input:');
disp('------');
moms = [10.0, 125.0, 8400.0];
disp('moms = ');
disp(moms);
disp('Test:');
disp('-----');
disp('[a, A] = APHFrom3Moments(moms);:');
[a, A] = APHFrom3Moments(moms);
disp('a = ');
disp(a);
disp('A = ');
disp(A);
phmoms = MomentsFromPH(a, A, 3);
disp('phmoms = ');
disp(phmoms);
assert(norm((phmoms-moms)./moms)<10^-12, 'APHFrom3Moments failed to match the given moments!');
disp('Input:');
disp('------');
moms = [10.0, 525.0, 31400.0];
disp('moms = ');
disp(moms);
disp('Test:');
disp('-----');
disp('[a, A] = APHFrom3Moments(moms);:');
[a, A] = APHFrom3Moments(moms);
disp('a = ');
disp(a);
disp('A = ');
disp(A);
phmoms = MomentsFromPH(a, A, 3);
disp('phmoms = ');
disp(phmoms);
assert(norm((phmoms-moms)./moms)<10^-12, 'APHFrom3Moments failed to match the given moments!');
disp('========================================')
disp('Testing BuTools function PH2From3Moments')
disp('Input:');
disp('------');
moms = [10.0, 160.0, 3500.0];
disp('moms = ');
disp(moms);
disp('Test:');
disp('-----');
disp('[a, A] = PH2From3Moments(moms);:');
[a, A] = PH2From3Moments(moms);
disp('a = ');
disp(a);
disp('A = ');
disp(A);
phmoms = MomentsFromPH(a, A, 3);
disp('phmoms = ');
disp(phmoms);
assert(norm((phmoms-moms)./moms)<10^-12, 'PH2From3Moments failed to match the given moments!');
disp('Input:');
disp('------');
moms = [10.0, 260.0, 13500.0];
disp('moms = ');
disp(moms);
disp('Test:');
disp('-----');
disp('[a, A] = PH2From3Moments(moms);:');
[a, A] = PH2From3Moments(moms);
disp('a = ');
disp(a);
disp('A = ');
disp(A);
phmoms = MomentsFromPH(a, A, 3);
disp('phmoms = ');
disp(phmoms);
assert(norm((phmoms-moms)./moms)<10^-12, 'PH2From3Moments failed to match the given moments!');
disp('========================================')
disp('Testing BuTools function PH3From5Moments')
disp('Input:');
disp('------');
a = [0.1,0.9,0];
A = [-6.2, 2, 0; 2, -9, 1; 1, 0, -3];
moms = MomentsFromPH(a, A);
disp('moms = ');
disp(moms);
disp('Test:');
disp('-----');
disp('[a, A] = PH3From5Moments(moms);:');
[a, A] = PH3From5Moments(moms);
disp('a = ');
disp(a);
disp('A = ');
disp(A);
phmoms = MomentsFromME(a, A, 5);
disp('phmoms = ');
disp(phmoms);
assert(norm((phmoms-moms)./moms)<10^-12, 'PH3From5Moments failed to match the given moments!');
disp('Input:');
disp('------');
a = [0.2,0.3,0.5];
A = [-1, 0, 0; 0, -3, 0.5; 0, -0.5, -3];
moms = MomentsFromME(a, A);
disp('moms = ');
disp(moms);
disp('Test:');
disp('-----');
disp('[a, A] = PH3From5Moments(moms);:');
[a, A] = PH3From5Moments(moms);
disp('a = ');
disp(a);
disp('A = ');
disp(A);
phmoms = MomentsFromME(a, A, 5);
disp('phmoms = ');
disp(phmoms);
assert(norm((phmoms-moms)./moms)<10^-12, 'PH3From5Moments failed to match the given moments!');
disp('========================================')
disp('Testing BuTools function MEFromMoments')
disp('Input:');
disp('------');
a = [0.1,0.9,0];
A = [-6.2, 2, 0; 2, -9, 1; 1, 0, -3];
moms = MomentsFromPH(a, A, 5);
disp('moms = ');
disp(moms);
disp('Test:');
disp('-----');
disp('[a, A] = MEFromMoments(moms);:');
[a, A] = MEFromMoments(moms);
disp('a = ');
disp(a);
disp('A = ');
disp(A);
memoms = MomentsFromME(a, A, 5);
disp('memoms = ');
disp(memoms);
assert(norm((memoms-moms)./moms)<10^-12, 'MEFromMoments failed to match the given moments!');
disp('========================================')
disp('Testing BuTools function APH2ndMomentLowerBound')
disp('Input:');
disp('------');
mean = 1.9;
disp('mean = ');
disp(mean);
n = 4;
disp('n = ');
disp(n);
disp('Test:');
disp('-----');
disp('mom2 = APH2ndMomentLowerBound(mean, n);:');
mom2 = APH2ndMomentLowerBound(mean, n);
disp('mom2 = ');
disp(mom2);
disp('cv2 = mom2/mean^2-1;:');
cv2 = mom2/mean^2-1;
disp('1/cv2:');
disp(1/cv2);
assert(abs(cv2-1/n)<10^-14, 'APH2ndMomentLowerBound did not give the expected result!');
disp('========================================')
disp('Testing BuTools function APH3rdMomentLowerBound')
disp('Input:');
disp('------');
mean = 1.9;
disp('mean = ');
disp(mean);
mom2 = 5;
disp('mom2 = ');
disp(mom2);
n = 3;
disp('n = ');
disp(n);
disp('Test:');
disp('-----');
disp('mom3lower = APH3rdMomentLowerBound(mean, mom2, n);:');
mom3lower = APH3rdMomentLowerBound(mean, mom2, n);
disp('mom3lower = ');
disp(mom3lower);
disp('mom3upper = APH3rdMomentUpperBound(mean, mom2, n);:');
mom3upper = APH3rdMomentUpperBound(mean, mom2, n);
disp('mom3upper = ');
disp(mom3upper);
assert(mom3upper>mom3lower, 'Lower bound is larger than the upper bound!');
disp('Input:');
disp('------');
mean = 1.9;
disp('mean = ');
disp(mean);
mom2 = 5;
disp('mom2 = ');
disp(mom2);
n = 4;
disp('n = ');
disp(n);
disp('Test:');
disp('-----');
disp('mom3lower = APH3rdMomentLowerBound(mean, mom2, n);:');
mom3lower = APH3rdMomentLowerBound(mean, mom2, n);
disp('mom3lower = ');
disp(mom3lower);
disp('mom3upper = APH3rdMomentUpperBound(mean, mom2, n);:');
mom3upper = APH3rdMomentUpperBound(mean, mom2, n);
disp('mom3upper = ');
disp(mom3upper);
assert(mom3upper>mom3lower, 'Lower bound is larger than the upper bound!');
assert(mom3upper==inf, 'Upper bound must be infinity with 4 phases!');
disp('========================================')
disp('Testing BuTools function APH3rdMomentUpperBound')
disp('Input:');
disp('------');
mean = 1.9;
disp('mean = ');
disp(mean);
mom2 = 5;
disp('mom2 = ');
disp(mom2);
n = 3;
disp('n = ');
disp(n);
disp('Test:');
disp('-----');
disp('mom3lower = APH3rdMomentLowerBound(mean, mom2, n);:');
mom3lower = APH3rdMomentLowerBound(mean, mom2, n);
disp('mom3lower = ');
disp(mom3lower);
disp('mom3upper = APH3rdMomentUpperBound(mean, mom2, n);:');
mom3upper = APH3rdMomentUpperBound(mean, mom2, n);
disp('mom3upper = ');
disp(mom3upper);
assert(mom3upper>mom3lower, 'Lower bound is larger than the upper bound!');
disp('Input:');
disp('------');
mean = 1.9;
disp('mean = ');
disp(mean);
mom2 = 5;
disp('mom2 = ');
disp(mom2);
n = 4;
disp('n = ');
disp(n);
disp('Test:');
disp('-----');
disp('mom3lower = APH3rdMomentLowerBound(mean, mom2, n);:');
mom3lower = APH3rdMomentLowerBound(mean, mom2, n);
disp('mom3lower = ');
disp(mom3lower);
disp('mom3upper = APH3rdMomentUpperBound(mean, mom2, n);:');
mom3upper = APH3rdMomentUpperBound(mean, mom2, n);
disp('mom3upper = ');
disp(mom3upper);
assert(mom3upper>mom3lower, 'Lower bound is larger than the upper bound!');
assert(mom3upper==inf, 'Upper bound must be infinity with 4 phases!');
disp('========================================')
disp('Testing BuTools function CanonicalFromPH2')
disp('Input:');
disp('------');
a = [0.12,0.88];
disp('a = ');
disp(a);
A = [-1.28, 0; 3.94, -3.94];
disp('A = ');
disp(A);
disp('Test:');
disp('-----');
disp('[b, B] = CanonicalFromPH2(a, A);:');
[b, B] = CanonicalFromPH2(a, A);
disp('b = ');
disp(b);
disp('B = ');
disp(B);
Cm = SimilarityMatrix(A, B);
err1 = norm(A*Cm-Cm*B);
err2 = norm(a*Cm-b);
disp('Transformation errors:');
disp(max(err1, err2));
assert(err1<10^-12&&err2<10^-12, 'Transformation to canonical PH(2) failed!');
disp('========================================')
disp('Testing BuTools function CanonicalFromPH3')
disp('Input:');
disp('------');
a = [0.1,0.9,0];
disp('a = ');
disp(a);
A = [-6.2, 2, 0; 2, -9, 1; 1, 0, -3];
disp('A = ');
disp(A);
disp('Test:');
disp('-----');
disp('[b, B] = CanonicalFromPH3(a, A);:');
[b, B] = CanonicalFromPH3(a, A);
disp('b = ');
disp(b);
disp('B = ');
disp(B);
Cm = SimilarityMatrix(A, B);
err1 = norm(A*Cm-Cm*B);
err2 = norm(a*Cm-b);
disp('Transformation errors:');
disp(max(err1, err2));
assert(err1<10^-12&&err2<10^-12, 'Transformation to canonical PH(3) failed!');
disp('========================================')
disp('Testing BuTools function AcyclicPHFromME')
disp('Input:');
disp('------');
a = [-0.4,1.4,0.];
disp('a = ');
disp(a);
A = [-4., 1., 1.; 0., -2., 1.; 1., 0., -8.];
disp('A = ');
disp(A);
disp('Test:');
disp('-----');
disp('[b, B] = AcyclicPHFromME(a, A);:');
[b, B] = AcyclicPHFromME(a, A);
disp('b = ');
disp(b);
disp('B = ');
disp(B);
disp('ma = MomentsFromME(a, A, 5);:');
ma = MomentsFromME(a, A, 5);
disp('ma = ');
disp(ma);
disp('mb = MomentsFromME(b, B, 5);:');
mb = MomentsFromME(b, B, 5);
disp('mb = ');
disp(mb);
assert(norm((ma-mb)./ma)<10^-7, 'Transformation to acyclic representation failed!');
disp('========================================')
disp('Testing BuTools function MonocyclicPHFromME')
disp('Input:');
disp('------');
a = [0.2,0.3,0.5];
disp('a = ');
disp(a);
A = [-1., 0., 0.; 0., -3., 2.; 0., -2., -3.];
disp('A = ');
disp(A);
disp('Test:');
disp('-----');
disp('[b, B] = MonocyclicPHFromME(a, A);:');
[b, B] = MonocyclicPHFromME(a, A);
disp('b = ');
disp(b);
disp('B = ');
disp(B);
disp('ma = MomentsFromME(a, A, 5);:');
ma = MomentsFromME(a, A, 5);
disp('ma = ');
disp(ma);
disp('mb = MomentsFromME(b, B, 5);:');
mb = MomentsFromME(b, B, 5);
disp('mb = ');
disp(mb);
assert(norm((ma-mb)./ma)<10^-7, 'Transformation to monocyclic representation failed!');
disp('========================================')
disp('Testing BuTools function PHFromME')
disp('Input:');
disp('------');
a = [-0.4,1.4];
disp('a = ');
disp(a);
A = [-3.8, 2; 2, -9];
disp('A = ');
disp(A);
disp('flag = CheckMERepresentation(a, A);:');
flag = CheckMERepresentation(a, A);
disp('flag = ');
disp(flag);
disp('flag = CheckPHRepresentation(a, A);:');
flag = CheckPHRepresentation(a, A);
disp('flag = ');
disp(flag);
disp('Test:');
disp('-----');
disp('[b, B] = PHFromME(a, A);:');
[b, B] = PHFromME(a, A);
disp('b = ');
disp(b);
disp('B = ');
disp(B);
disp('flag = CheckPHRepresentation(b, B);:');
flag = CheckPHRepresentation(b, B);
disp('flag = ');
disp(flag);
Cm = SimilarityMatrix(A, B);
err1 = norm(A*Cm-Cm*B);
err2 = norm(a*Cm-b);
disp('Transformation error:');
disp(max(err1, err2));
assert(flag&&err1<10^-12&&err2<10^-12, 'Transformation to PH failed!');
disp('Input:');
disp('------');
a = [-0.5,1.5];
disp('a = ');
disp(a);
A = [-3.8, 2; 2, -9];
disp('A = ');
disp(A);
disp('flag = CheckMERepresentation(a, A);:');
flag = CheckMERepresentation(a, A);
disp('flag = ');
disp(flag);
disp('flag = CheckPHRepresentation(a, A);:');
flag = CheckPHRepresentation(a, A);
disp('flag = ');
disp(flag);
disp('Test:');
disp('-----');
disp('[b, B] = PHFromME(a, A);:');
[b, B] = PHFromME(a, A);
disp('b = ');
disp(b);
disp('B = ');
disp(B);
disp('flag = CheckPHRepresentation(b, B);:');
flag = CheckPHRepresentation(b, B);
disp('flag = ');
disp(flag);
Cm = SimilarityMatrix(A, B);
err1 = norm(A*Cm-Cm*B);
err2 = norm(a*Cm-b);
disp('Transformation error:');
disp(max(err1, err2));
assert(flag&&err1<10^-12&&err2<10^-12, 'Transformation to PH failed!');
disp('========================================')
disp('Testing BuTools function MEOrder')
disp('Input:');
disp('------');
a = [1.0/6,1.0/6,1.0/6,1.0/6,1.0/6,1.0/6];
disp('a = ');
disp(a);
A = [-1., 0., 0., 0., 0., 0.; 0.5, -2., 1., 0., 0., 0.; 1., 0., -3., 1., 0., 0.; 1., 0., 1., -4., 1., 0.; 4., 0., 0., 0., -5., 0.; 5., 0., 0., 0., 0., -6.];
disp('A = ');
disp(A);
disp('Test:');
disp('-----');
disp('co = MEOrder(a, A, ''cont'');:');
co = MEOrder(a, A, 'cont');
disp('co = ');
disp(co);
disp('oo = MEOrder(a, A, ''obs'');:');
oo = MEOrder(a, A, 'obs');
disp('oo = ');
disp(oo);
disp('coo = MEOrder(a, A, ''obscont'');:');
coo = MEOrder(a, A, 'obscont');
disp('coo = ');
disp(coo);
disp('mo = MEOrder(a, A, ''moment'');:');
mo = MEOrder(a, A, 'moment');
disp('mo = ');
disp(mo);
assert(co==2, 'Wrong controllability order returned!');
assert(oo==6, 'Wrong observability order returned!');
assert(coo==2, 'The minimum of the controllability and observability order is wrong!');
assert(mo==2, 'Wrong moment order returned!');
disp('Input:');
disp('------');
a = [2.0/3,1.0/3];
disp('a = ');
disp(a);
A = [-1., 1.; 0., -3.];
disp('A = ');
disp(A);
disp('Test:');
disp('-----');
disp('co = MEOrder(a, A, ''cont'');:');
co = MEOrder(a, A, 'cont');
disp('co = ');
disp(co);
disp('oo = MEOrder(a, A, ''obs'');:');
oo = MEOrder(a, A, 'obs');
disp('oo = ');
disp(oo);
disp('coo = MEOrder(a, A, ''obscont'');:');
coo = MEOrder(a, A, 'obscont');
disp('coo = ');
disp(coo);
disp('mo = MEOrder(a, A, ''moment'');:');
mo = MEOrder(a, A, 'moment');
disp('mo = ');
disp(mo);
assert(co==2, 'Wrong controllability order returned!');
assert(oo==1, 'Wrong observability order returned!');
assert(coo==1, 'The minimum of the controllability and observability order is wrong!');
assert(mo==1, 'Wrong moment order returned!');
disp('Input:');
disp('------');
b = [0.2,0.3,0.5];
B = [-1., 0., 0.; 0., -3., 1.; 0., -1., -3.];
disp('[a, A] = MonocyclicPHFromME(b, B);:');
[a, A] = MonocyclicPHFromME(b, B);
disp('a = ');
disp(a);
disp('A = ');
disp(A);
disp('Test:');
disp('-----');
disp('co = MEOrder(a, A, ''cont'');:');
co = MEOrder(a, A, 'cont');
disp('co = ');
disp(co);
disp('oo = MEOrder(a, A, ''obs'');:');
oo = MEOrder(a, A, 'obs');
disp('oo = ');
disp(oo);
disp('coo = MEOrder(a, A, ''obscont'');:');
coo = MEOrder(a, A, 'obscont');
disp('coo = ');
disp(coo);
disp('mo = MEOrder(a, A, ''moment'');:');
mo = MEOrder(a, A, 'moment');
disp('mo = ');
disp(mo);
assert(co==9, 'Wrong controllability order returned!');
assert(oo==3, 'Wrong observability order returned!');
assert(coo==3, 'The minimum of the controllability and observability order is wrong!');
assert(mo==3, 'Wrong moment order returned!');
disp('========================================')
disp('Testing BuTools function MEOrderFromMoments')
disp('Input:');
disp('------');
a = [0.1,0.9,0];
disp('a = ');
disp(a);
A = [-6.2, 2., 0.; 2., -9., 1.; 1., 0., -3.];
disp('A = ');
disp(A);
disp('Test:');
disp('-----');
disp('moms = MomentsFromME(a, A);:');
moms = MomentsFromME(a, A);
disp('moms = ');
disp(moms);
disp('mo = MEOrderFromMoments(moms);:');
mo = MEOrderFromMoments(moms);
disp('mo = ');
disp(mo);
assert(mo==3, 'Wrong moment order returned!');
disp('Input:');
disp('------');
b = [0.2,0.3,0.5];
disp('b = ');
disp(b);
B = [-1., 0., 0.; 0., -3., 2.; 0., -2., -3.];
disp('B = ');
disp(B);
disp('[a, A] = MonocyclicPHFromME(b, B);:');
[a, A] = MonocyclicPHFromME(b, B);
disp('moms = MomentsFromME(a, A);:');
moms = MomentsFromME(a, A);
disp('moms = ');
disp(moms);
disp('Test:');
disp('-----');
disp('mo = MEOrderFromMoments(moms);:');
mo = MEOrderFromMoments(moms);
disp('mo = ');
disp(mo);
assert(mo==3, 'Wrong moment order returned!');
disp('========================================')
disp('Testing BuTools function MinimalRepFromME')
disp('Input:');
disp('------');
a = [1.0/6,1.0/6,1.0/6,1.0/6,1.0/6,1.0/6];
disp('a = ');
disp(a);
A = [-1., 0., 0., 0., 0., 0.; 0.5, -2., 1., 0., 0., 0.; 1., 0., -3., 1., 0., 0.; 1., 0., 1., -4., 1., 0.; 4., 0., 0., 0., -5., 0.; 5., 0., 0., 0., 0., -6.];
disp('A = ');
disp(A);
disp('Test:');
disp('-----');
disp('[b, B] = MinimalRepFromME(a, A, ''cont'');:');
[b, B] = MinimalRepFromME(a, A, 'cont');
disp('b = ');
disp(b);
disp('B = ');
disp(B);
assert(length(b)==2, 'Non-minimal representation returned based on controllability!');
disp('[b, B] = MinimalRepFromME(a, A, ''obs'');:');
[b, B] = MinimalRepFromME(a, A, 'obs');
disp('b = ');
disp(b);
disp('B = ');
disp(B);
assert(length(b)==6, 'Non-minimal representation returned based on observability!');
disp('[b, B] = MinimalRepFromME(a, A, ''obscont'');:');
[b, B] = MinimalRepFromME(a, A, 'obscont');
disp('b = ');
disp(b);
disp('B = ');
disp(B);
assert(length(b)==2, 'Non-minimal representation returned based on observability and controllability!');
disp('[b, B] = MinimalRepFromME(a, A, ''moment'');:');
[b, B] = MinimalRepFromME(a, A, 'moment');
disp('b = ');
disp(b);
disp('B = ');
disp(B);
assert(length(b)==2, 'Non-minimal representation returned based on the moments!');
disp('Input:');
disp('------');
a = [2.0/3,1.0/3];
disp('a = ');
disp(a);
A = [-1., 1.; 0., -3.];
disp('A = ');
disp(A);
disp('Test:');
disp('-----');
disp('[b, B] = MinimalRepFromME(a, A, ''cont'');:');
[b, B] = MinimalRepFromME(a, A, 'cont');
disp('b = ');
disp(b);
disp('B = ');
disp(B);
assert(length(b)==2, 'Non-minimal representation returned based on controllability!');
disp('[b, B] = MinimalRepFromME(a, A, ''obs'');:');
[b, B] = MinimalRepFromME(a, A, 'obs');
disp('b = ');
disp(b);
disp('B = ');
disp(B);
assert(length(b)==1, 'Non-minimal representation returned based on observability!');
disp('[b, B] = MinimalRepFromME(a, A, ''obscont'');:');
[b, B] = MinimalRepFromME(a, A, 'obscont');
disp('b = ');
disp(b);
disp('B = ');
disp(B);
assert(length(b)==1, 'Non-minimal representation returned based on observability and controllability!');
disp('[b, B] = MinimalRepFromME(a, A, ''moment'');:');
[b, B] = MinimalRepFromME(a, A, 'moment');
disp('b = ');
disp(b);
disp('B = ');
disp(B);
assert(length(b)==1, 'Non-minimal representation returned based on the moments!');
disp('Input:');
disp('------');
b = [0.2,0.3,0.5];
B = [-1., 0., 0.; 0., -3., 1.; 0., -1., -3.];
disp('[a, A] = MonocyclicPHFromME(b, B);:');
[a, A] = MonocyclicPHFromME(b, B);
disp('a = ');
disp(a);
disp('A = ');
disp(A);
disp('Test:');
disp('-----');
disp('[b, B] = MinimalRepFromME(a, A, ''cont'');:');
[b, B] = MinimalRepFromME(a, A, 'cont');
disp('b = ');
disp(b);
disp('B = ');
disp(B);
assert(length(b)==length(a), 'Non-minimal representation returned based on controllability!');
disp('[b, B] = MinimalRepFromME(a, A, ''obs'');:');
[b, B] = MinimalRepFromME(a, A, 'obs');
disp('b = ');
disp(b);
disp('B = ');
disp(B);
Cm = SimilarityMatrix(B, A);
err1 = norm(B*Cm-Cm*A);
err2 = norm(b*Cm-a);
disp('Transformation error:');
disp(max(err1, err2));
assert(length(b)==3&&err1+err2<10^-12, 'Non-minimal representation returned based on observability!');
disp('[b, B] = MinimalRepFromME(a, A, ''obscont'');:');
[b, B] = MinimalRepFromME(a, A, 'obscont');
disp('b = ');
disp(b);
disp('B = ');
disp(B);
Cm = SimilarityMatrix(B, A);
err1 = norm(B*Cm-Cm*A);
err2 = norm(b*Cm-a);
disp('Transformation error:');
disp(max(err1, err2));
assert(length(b)==3&&err1+err2<10^-12, 'Non-minimal representation returned based on observability and controllability!');
disp('[b, B] = MinimalRepFromME(a, A, ''moment'');:');
[b, B] = MinimalRepFromME(a, A, 'moment');
disp('b = ');
disp(b);
disp('B = ');
disp(B);
Cm = SimilarityMatrix(B, A);
err1 = norm(B*Cm-Cm*A);
err2 = norm(b*Cm-a);
disp('Transformation error:');
disp(max(err1, err2));
assert(length(b)==3&&err1+err2<10^-12, 'Non-minimal representation returned based on the moments!');
disp('========================================')
disp('Testing BuTools function SamplesFromPH')
disp('Input:');
disp('------');
a = [0.1,0.9,0];
disp('a = ');
disp(a);
A = [-6.2, 2, 0; 2, -9, 1; 1, 0, -3];
disp('A = ');
disp(A);
disp('Test:');
disp('-----');
disp('x = SamplesFromPH(a, A, 1000);:');
x = SamplesFromPH(a, A, 1000);
disp('mt = MarginalMomentsFromTrace(x, 3);:');
mt = MarginalMomentsFromTrace(x, 3);
disp('mt = ');
disp(mt);
disp('mp = MomentsFromPH(a, A, 3);:');
mp = MomentsFromPH(a, A, 3);
disp('mp = ');
disp(mp);

