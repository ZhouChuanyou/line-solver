clear all
run('/home/gabor/project/butools/Matlab/BuToolsInit.m')

disp('---BuTools: Queues package test file---');
disp('Enable the verbose messages with the BuToolsVerbose flag');
global BuToolsVerbose;
BuToolsVerbose = true;
disp('Enable input parameter checking with the BuToolsCheckInput flag');
global BuToolsCheckInput;
BuToolsCheckInput = true;
global BuToolsCheckPrecision;
format short g;
disp('========================================')
disp('Testing BuTools function QBDQueue')
disp('Input:');
disp('------');
B = [6., 1., 0.; 0., 4., 1.; 2., 0., 0.];
disp('B = ');
disp(B);
F = [0., 1., 1.; 5., 0., 0.; 1., 3., 0.];
disp('F = ');
disp(F);
L = [-14., 3., 2.; 0., -14., 4.; 3., 1., -10.];
disp('L = ');
disp(L);
L0 = L+B;
disp('L0 = ');
disp(L0);
BuToolsVerbose = false;
[pi0, R] = QBDSolve(B, L, F, L0);
lambd = sum(pi0*inv(eye(size(R,1))-R)*F);
BuToolsVerbose = true;
disp('Test:');
disp('-----');
disp('[ncd, ncm] = QBDQueue(B, L, F, L0, ''ncDistr'', 11, ''ncMoms'', 5);:');
[ncd, ncm] = QBDQueue(B, L, F, L0, 'ncDistr', 11, 'ncMoms', 5);
disp('ncd = ');
disp(ncd);
disp('ncm = ');
disp(ncm);
disp('[alphap, Ap] = QBDQueue(B, L, F, L0, ''ncDistrDPH'');:');
[alphap, Ap] = QBDQueue(B, L, F, L0, 'ncDistrDPH');
disp('alphap = ');
disp(alphap);
disp('Ap = ');
disp(Ap);
disp('[alpha, A] = QBDQueue(B, L, F, L0, ''ncDistrMG'');:');
[alpha, A] = QBDQueue(B, L, F, L0, 'ncDistrMG');
disp('alpha = ');
disp(alpha);
disp('A = ');
disp(A);
disp('ncdFromDPH = PmfFromDPH(alphap, Ap, (0:1:10));:');
ncdFromDPH = PmfFromDPH(alphap, Ap, (0:1:10));
disp('ncdFromDPH = ');
disp(ncdFromDPH);
disp('ncmFromMG = MomentsFromMG(alpha, A, 5);:');
ncmFromMG = MomentsFromMG(alpha, A, 5);
disp('ncmFromMG = ');
disp(ncmFromMG);
disp('[std, stm] = QBDQueue(B, L, F, L0, ''stDistr'', (0.:0.1:1.), ''stMoms'', 5);:');
[std, stm] = QBDQueue(B, L, F, L0, 'stDistr', (0.:0.1:1.), 'stMoms', 5);
disp('std = ');
disp(std);
disp('stm = ');
disp(stm);
disp('[betap, Bp] = QBDQueue(B, L, F, L0, ''stDistrPH'');:');
[betap, Bp] = QBDQueue(B, L, F, L0, 'stDistrPH');
disp('betap = ');
disp(betap);
disp('Bp = ');
disp(Bp);
disp('[beta, B] = QBDQueue(B, L, F, L0, ''stDistrME'');:');
[beta, B] = QBDQueue(B, L, F, L0, 'stDistrME');
disp('beta = ');
disp(beta);
disp('B = ');
disp(B);
disp('stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));:');
stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));
disp('stdFromPH = ');
disp(stdFromPH);
disp('stmFromME = MomentsFromME(beta, B, 5);:');
stmFromME = MomentsFromME(beta, B, 5);
disp('stmFromME = ');
disp(stmFromME);
assert(CheckMGRepresentation(alpha, A), 'QBDQueue: invalid MG representation of the queue length!');
assert(CheckMERepresentation(beta, B), 'QBDQueue: invalid ME representation of the sojourn time!');
assert(CheckDPHRepresentation(alphap, Ap), 'QBDQueue: invalid DPH representation of the queue length!');
assert(CheckPHRepresentation(betap, Bp), 'QBDQueue: invalid PH representation of the sojourn time!');
assert(abs(ncm(1)-stm(1)*lambd)<10^-12, 'QBDQueue: Little formula does not hold!');
assert(norm((MomentsFromDPH(alphap, Ap, 5)-ncmFromMG)./ncmFromMG)<10^-12, 'QBDQueue: the MG and DPH representations are not equal!');
assert(norm((MomentsFromPH(betap, Bp, 5)-stmFromME)./stmFromME)<10^-12, 'QBDQueue: the ME and PH representations are not equal!');
assert(norm(ncd-PmfFromMG(alpha, A, (0:1:10)))<10^-12, 'QBDQueue: ncdistr returns wrong queue length distribution!');
assert(norm(std-CdfFromME(beta, B, (0.:0.1:1.)))<10^-12, 'QBDQueue: stDistr returns wrong sojourn time distribution!');
assert(norm((ncm-ncmFromMG)./ncm)<10^-12, 'QBDQueue: ncmoms returns wrong queue length moments!');
assert(norm((stm-stmFromME)./stm)<10^-12, 'QBDQueue: stMoms returns wrong sojourn time moments!');
disp('Input:');
disp('------');
B = [6., 1., 0.; 0., 4., 1.; 2., 0., 0.];
disp('B = ');
disp(B);
F = [0., 0., 0.; 5., 0., 0.; 1., 3., 0.];
disp('F = ');
disp(F);
L = [-12., 3., 2.; 0., -14., 4.; 3., 1., -10.];
disp('L = ');
disp(L);
L0 = L+B;
disp('L0 = ');
disp(L0);
BuToolsVerbose = false;
[pi0, R] = QBDSolve(B, L, F, L0);
lambd = sum(pi0*inv(eye(size(R,1))-R)*F);
BuToolsVerbose = true;
disp('Test:');
disp('-----');
disp('[ncd, ncm] = QBDQueue(B, L, F, L0, ''ncDistr'', 11, ''ncMoms'', 5);:');
[ncd, ncm] = QBDQueue(B, L, F, L0, 'ncDistr', 11, 'ncMoms', 5);
disp('ncd = ');
disp(ncd);
disp('ncm = ');
disp(ncm);
disp('[alphap, Ap] = QBDQueue(B, L, F, L0, ''ncDistrDPH'');:');
[alphap, Ap] = QBDQueue(B, L, F, L0, 'ncDistrDPH');
disp('alphap = ');
disp(alphap);
disp('Ap = ');
disp(Ap);
disp('[alpha, A] = QBDQueue(B, L, F, L0, ''ncDistrMG'');:');
[alpha, A] = QBDQueue(B, L, F, L0, 'ncDistrMG');
disp('alpha = ');
disp(alpha);
disp('A = ');
disp(A);
disp('ncdFromDPH = PmfFromDPH(alphap, Ap, (0:1:10));:');
ncdFromDPH = PmfFromDPH(alphap, Ap, (0:1:10));
disp('ncdFromDPH = ');
disp(ncdFromDPH);
disp('ncmFromMG = MomentsFromMG(alpha, A, 5);:');
ncmFromMG = MomentsFromMG(alpha, A, 5);
disp('ncmFromMG = ');
disp(ncmFromMG);
disp('[std, stm] = QBDQueue(B, L, F, L0, ''stDistr'', (0.:0.1:1.), ''stMoms'', 5);:');
[std, stm] = QBDQueue(B, L, F, L0, 'stDistr', (0.:0.1:1.), 'stMoms', 5);
disp('std = ');
disp(std);
disp('stm = ');
disp(stm);
disp('[betap, Bp] = QBDQueue(B, L, F, L0, ''stDistrPH'');:');
[betap, Bp] = QBDQueue(B, L, F, L0, 'stDistrPH');
disp('betap = ');
disp(betap);
disp('Bp = ');
disp(Bp);
disp('[beta, B] = QBDQueue(B, L, F, L0, ''stDistrME'');:');
[beta, B] = QBDQueue(B, L, F, L0, 'stDistrME');
disp('beta = ');
disp(beta);
disp('B = ');
disp(B);
disp('stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));:');
stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));
disp('stdFromPH = ');
disp(stdFromPH);
disp('stmFromME = MomentsFromME(beta, B, 5);:');
stmFromME = MomentsFromME(beta, B, 5);
disp('stmFromME = ');
disp(stmFromME);
assert(CheckMGRepresentation(alpha, A), 'QBDQueue: invalid MG representation of the queue length!');
assert(CheckMERepresentation(beta, B), 'QBDQueue: invalid ME representation of the sojourn time!');
assert(CheckDPHRepresentation(alphap, Ap), 'QBDQueue: invalid DPH representation of the queue length!');
assert(CheckPHRepresentation(betap, Bp), 'QBDQueue: invalid PH representation of the sojourn time!');
assert(abs(ncm(1)-stm(1)*lambd)<10^-12, 'QBDQueue: Little formula does not hold!');
assert(norm((MomentsFromDPH(alphap, Ap, 5)-ncmFromMG)./ncmFromMG)<10^-12, 'QBDQueue: the MG and DPH representations are not equal!');
assert(norm((MomentsFromPH(betap, Bp, 5)-stmFromME)./stmFromME)<10^-12, 'QBDQueue: the ME and PH representations are not equal!');
assert(norm(ncd-PmfFromMG(alpha, A, (0:1:10)))<10^-12, 'QBDQueue: ncdistr returns wrong queue length distribution!');
assert(norm(std-CdfFromME(beta, B, (0.:0.1:1.)))<10^-12, 'QBDQueue: stDistr returns wrong sojourn time distribution!');
assert(norm((ncm-ncmFromMG)./ncm)<10^-12, 'QBDQueue: ncmoms returns wrong queue length moments!');
assert(norm((stm-stmFromME)./stm)<10^-12, 'QBDQueue: stMoms returns wrong sojourn time moments!');
disp('Input:');
disp('------');
B = [6., 1., 0.; 0., 5., 0.; 0., 0., 0.];
disp('B = ');
disp(B);
F = [0., 3., 1.; 0., 5., 0.; 0., 0., 0.];
disp('F = ');
disp(F);
L = [-16., 3., 2.; 0., -14., 4.; 3., 1., -4.];
disp('L = ');
disp(L);
L0 = [-14., 10., 0.; 5., -10., 0.; 3., 1., -4.];
disp('L0 = ');
disp(L0);
BuToolsVerbose = false;
[pi0, R] = QBDSolve(B, L, F, L0);
lambd = sum(pi0*inv(eye(size(R,1))-R)*F);
BuToolsVerbose = true;
disp('Test:');
disp('-----');
disp('[ncd, ncm] = QBDQueue(B, L, F, L0, ''ncDistr'', 11, ''ncMoms'', 5);:');
[ncd, ncm] = QBDQueue(B, L, F, L0, 'ncDistr', 11, 'ncMoms', 5);
disp('ncd = ');
disp(ncd);
disp('ncm = ');
disp(ncm);
disp('[alphap, Ap] = QBDQueue(B, L, F, L0, ''ncDistrDPH'');:');
[alphap, Ap] = QBDQueue(B, L, F, L0, 'ncDistrDPH');
disp('alphap = ');
disp(alphap);
disp('Ap = ');
disp(Ap);
disp('[alpha, A] = QBDQueue(B, L, F, L0, ''ncDistrMG'');:');
[alpha, A] = QBDQueue(B, L, F, L0, 'ncDistrMG');
disp('alpha = ');
disp(alpha);
disp('A = ');
disp(A);
disp('ncdFromDPH = PmfFromDPH(alphap, Ap, (0:1:10));:');
ncdFromDPH = PmfFromDPH(alphap, Ap, (0:1:10));
disp('ncdFromDPH = ');
disp(ncdFromDPH);
disp('ncmFromMG = MomentsFromMG(alpha, A, 5);:');
ncmFromMG = MomentsFromMG(alpha, A, 5);
disp('ncmFromMG = ');
disp(ncmFromMG);
disp('[std, stm] = QBDQueue(B, L, F, L0, ''stDistr'', (0.:0.1:1.), ''stMoms'', 5);:');
[std, stm] = QBDQueue(B, L, F, L0, 'stDistr', (0.:0.1:1.), 'stMoms', 5);
disp('std = ');
disp(std);
disp('stm = ');
disp(stm);
disp('[betap, Bp] = QBDQueue(B, L, F, L0, ''stDistrPH'');:');
[betap, Bp] = QBDQueue(B, L, F, L0, 'stDistrPH');
disp('betap = ');
disp(betap);
disp('Bp = ');
disp(Bp);
disp('[beta, B] = QBDQueue(B, L, F, L0, ''stDistrME'');:');
[beta, B] = QBDQueue(B, L, F, L0, 'stDistrME');
disp('beta = ');
disp(beta);
disp('B = ');
disp(B);
disp('stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));:');
stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));
disp('stdFromPH = ');
disp(stdFromPH);
disp('stmFromME = MomentsFromME(beta, B, 5);:');
stmFromME = MomentsFromME(beta, B, 5);
disp('stmFromME = ');
disp(stmFromME);
assert(CheckMGRepresentation(alpha, A), 'QBDQueue: invalid MG representation of the queue length!');
assert(CheckMERepresentation(beta, B), 'QBDQueue: invalid ME representation of the sojourn time!');
assert(CheckDPHRepresentation(alphap, Ap), 'QBDQueue: invalid DPH representation of the queue length!');
assert(CheckPHRepresentation(betap, Bp), 'QBDQueue: invalid PH representation of the sojourn time!');
assert(abs(ncm(1)-stm(1)*lambd)<10^-12, 'QBDQueue: Little formula does not hold!');
assert(norm((MomentsFromDPH(alphap, Ap, 5)-ncmFromMG)./ncmFromMG)<10^-12, 'QBDQueue: the MG and DPH representations are not equal!');
assert(norm((MomentsFromPH(betap, Bp, 5)-stmFromME)./stmFromME)<10^-12, 'QBDQueue: the ME and PH representations are not equal!');
assert(norm(ncd-PmfFromMG(alpha, A, (0:1:10)))<10^-12, 'QBDQueue: ncdistr returns wrong queue length distribution!');
assert(norm(std-CdfFromME(beta, B, (0.:0.1:1.)))<10^-12, 'QBDQueue: stDistr returns wrong sojourn time distribution!');
assert(norm((ncm-ncmFromMG)./ncm)<10^-12, 'QBDQueue: ncmoms returns wrong queue length moments!');
assert(norm((stm-stmFromME)./stm)<10^-12, 'QBDQueue: stMoms returns wrong sojourn time moments!');
disp('Input:');
disp('------');
B = [0., 0.; 3., 4.];
disp('B = ');
disp(B);
F = [1., 0.; 2., 0.];
disp('F = ');
disp(F);
L = [-6., 5.; 3., -12.];
disp('L = ');
disp(L);
L0 = [-6., 5.; 6., -8.];
disp('L0 = ');
disp(L0);
BuToolsVerbose = false;
[pi0, R] = QBDSolve(B, L, F, L0);
lambd = sum(pi0*inv(eye(size(R,1))-R)*F);
BuToolsVerbose = true;
disp('Test:');
disp('-----');
disp('[ncd, ncm] = QBDQueue(B, L, F, L0, ''ncDistr'', 11, ''ncMoms'', 5);:');
[ncd, ncm] = QBDQueue(B, L, F, L0, 'ncDistr', 11, 'ncMoms', 5);
disp('ncd = ');
disp(ncd);
disp('ncm = ');
disp(ncm);
disp('[alphap, Ap] = QBDQueue(B, L, F, L0, ''ncDistrDPH'');:');
[alphap, Ap] = QBDQueue(B, L, F, L0, 'ncDistrDPH');
disp('alphap = ');
disp(alphap);
disp('Ap = ');
disp(Ap);
disp('[alpha, A] = QBDQueue(B, L, F, L0, ''ncDistrMG'');:');
[alpha, A] = QBDQueue(B, L, F, L0, 'ncDistrMG');
disp('alpha = ');
disp(alpha);
disp('A = ');
disp(A);
disp('ncdFromDPH = PmfFromDPH(alphap, Ap, (0:1:10));:');
ncdFromDPH = PmfFromDPH(alphap, Ap, (0:1:10));
disp('ncdFromDPH = ');
disp(ncdFromDPH);
disp('ncmFromMG = MomentsFromMG(alpha, A, 5);:');
ncmFromMG = MomentsFromMG(alpha, A, 5);
disp('ncmFromMG = ');
disp(ncmFromMG);
disp('[std, stm] = QBDQueue(B, L, F, L0, ''stDistr'', (0.:0.1:1.), ''stMoms'', 5);:');
[std, stm] = QBDQueue(B, L, F, L0, 'stDistr', (0.:0.1:1.), 'stMoms', 5);
disp('std = ');
disp(std);
disp('stm = ');
disp(stm);
disp('[betap, Bp] = QBDQueue(B, L, F, L0, ''stDistrPH'');:');
[betap, Bp] = QBDQueue(B, L, F, L0, 'stDistrPH');
disp('betap = ');
disp(betap);
disp('Bp = ');
disp(Bp);
disp('[beta, B] = QBDQueue(B, L, F, L0, ''stDistrME'');:');
[beta, B] = QBDQueue(B, L, F, L0, 'stDistrME');
disp('beta = ');
disp(beta);
disp('B = ');
disp(B);
disp('stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));:');
stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));
disp('stdFromPH = ');
disp(stdFromPH);
disp('stmFromME = MomentsFromME(beta, B, 5);:');
stmFromME = MomentsFromME(beta, B, 5);
disp('stmFromME = ');
disp(stmFromME);
assert(CheckMGRepresentation(alpha, A), 'QBDQueue: invalid MG representation of the queue length!');
assert(CheckMERepresentation(beta, B), 'QBDQueue: invalid ME representation of the sojourn time!');
assert(CheckDPHRepresentation(alphap, Ap), 'QBDQueue: invalid DPH representation of the queue length!');
assert(CheckPHRepresentation(betap, Bp), 'QBDQueue: invalid PH representation of the sojourn time!');
assert(abs(ncm(1)-stm(1)*lambd)<10^-12, 'QBDQueue: Little formula does not hold!');
assert(norm((MomentsFromDPH(alphap, Ap, 5)-ncmFromMG)./ncmFromMG)<10^-12, 'QBDQueue: the MG and DPH representations are not equal!');
assert(norm((MomentsFromPH(betap, Bp, 5)-stmFromME)./stmFromME)<10^-12, 'QBDQueue: the ME and PH representations are not equal!');
assert(norm(ncd-PmfFromMG(alpha, A, (0:1:10)))<10^-12, 'QBDQueue: ncdistr returns wrong queue length distribution!');
assert(norm(std-CdfFromME(beta, B, (0.:0.1:1.)))<10^-12, 'QBDQueue: stDistr returns wrong sojourn time distribution!');
assert(norm((ncm-ncmFromMG)./ncm)<10^-12, 'QBDQueue: ncmoms returns wrong queue length moments!');
assert(norm((stm-stmFromME)./stm)<10^-12, 'QBDQueue: stMoms returns wrong sojourn time moments!');
disp('========================================')
disp('Testing BuTools function MAPMAP1')
disp('Input:');
disp('------');
D0 = [-8., 1., 2.; 0., -6., 4.; 3., 0., -3.];
disp('D0 = ');
disp(D0);
D1 = [4., 1., 0.; 0., 2., 0.; 0., 0., 0.];
disp('D1 = ');
disp(D1);
S0 = [-10., 4.; 0., -7.];
disp('S0 = ');
disp(S0);
S1 = [5., 1.; 4., 3.];
disp('S1 = ');
disp(S1);
lambd = 1./MarginalMomentsFromMAP(D0, D1, 1);
disp('Test:');
disp('-----');
disp('[ncd, ncm] = MAPMAP1(D0, D1, S0, S1, ''ncDistr'', 11, ''ncMoms'', 5);:');
[ncd, ncm] = MAPMAP1(D0, D1, S0, S1, 'ncDistr', 11, 'ncMoms', 5);
disp('ncd = ');
disp(ncd);
disp('ncm = ');
disp(ncm);
disp('[alphap, Ap] = MAPMAP1(D0, D1, S0, S1, ''ncDistrDPH'');:');
[alphap, Ap] = MAPMAP1(D0, D1, S0, S1, 'ncDistrDPH');
disp('alphap = ');
disp(alphap);
disp('Ap = ');
disp(Ap);
disp('[alpha, A] = MAPMAP1(D0, D1, S0, S1, ''ncDistrMG'');:');
[alpha, A] = MAPMAP1(D0, D1, S0, S1, 'ncDistrMG');
disp('alpha = ');
disp(alpha);
disp('A = ');
disp(A);
disp('ncdFromDPH = PmfFromDPH(alphap, Ap, (0:1:10));:');
ncdFromDPH = PmfFromDPH(alphap, Ap, (0:1:10));
disp('ncdFromDPH = ');
disp(ncdFromDPH);
disp('ncmFromMG = MomentsFromMG(alpha, A, 5);:');
ncmFromMG = MomentsFromMG(alpha, A, 5);
disp('ncmFromMG = ');
disp(ncmFromMG);
disp('[std, stm] = MAPMAP1(D0, D1, S0, S1, ''stDistr'', (0.:0.1:1.), ''stMoms'', 5);:');
[std, stm] = MAPMAP1(D0, D1, S0, S1, 'stDistr', (0.:0.1:1.), 'stMoms', 5);
disp('std = ');
disp(std);
disp('stm = ');
disp(stm);
disp('[betap, Bp] = MAPMAP1(D0, D1, S0, S1, ''stDistrPH'');:');
[betap, Bp] = MAPMAP1(D0, D1, S0, S1, 'stDistrPH');
disp('betap = ');
disp(betap);
disp('Bp = ');
disp(Bp);
disp('[beta, B] = MAPMAP1(D0, D1, S0, S1, ''stDistrME'');:');
[beta, B] = MAPMAP1(D0, D1, S0, S1, 'stDistrME');
disp('beta = ');
disp(beta);
disp('B = ');
disp(B);
disp('stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));:');
stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));
disp('stdFromPH = ');
disp(stdFromPH);
disp('stmFromME = MomentsFromME(beta, B, 5);:');
stmFromME = MomentsFromME(beta, B, 5);
disp('stmFromME = ');
disp(stmFromME);
assert(CheckMGRepresentation(alpha, A), 'MAPMAP1: invalid MG representation of the queue length!');
assert(CheckMERepresentation(beta, B), 'MAPMAP1: invalid ME representation of the sojourn time!');
assert(CheckDPHRepresentation(alphap, Ap), 'MAPMAP1: invalid DPH representation of the queue length!');
assert(CheckPHRepresentation(betap, Bp), 'MAPMAP1: invalid PH representation of the sojourn time!');
assert(abs(ncm(1)-stm(1)*lambd)<10^-12, 'MAPMAP1: Little formula does not hold!');
assert(norm((MomentsFromDPH(alphap, Ap, 5)-ncmFromMG)./ncmFromMG)<10^-12, 'MAPMAP1: the MG and DPH representations are not equal!');
assert(norm((MomentsFromPH(betap, Bp, 5)-stmFromME)./stmFromME)<10^-12, 'MAPMAP1: the ME and PH representations are not equal!');
assert(norm(ncd-PmfFromMG(alpha, A, (0:1:10)))<10^-12, 'MAPMAP1: ncdistr returns wrong queue length distribution!');
assert(norm(std-CdfFromME(beta, B, (0.:0.1:1.)))<10^-12, 'MAPMAP1: stDistr returns wrong sojourn time distribution!');
assert(norm((ncm-ncmFromMG)./ncm)<10^-12, 'MAPMAP1: ncmoms returns wrong queue length moments!');
assert(norm((stm-stmFromME)./stm)<10^-12, 'MAPMAP1: stMoms returns wrong sojourn time moments!');
IA = eye(size(D0,1));
IS = eye(size(S0,1));
BuToolsVerbose = false;
[gamma, G] = QBDQueue(kron(IA, S1), kron(D0, IS)+kron(IA, S0), kron(D1, IS), kron(D0, IS), 'stDistrME');
BuToolsVerbose = true;
msmall = MomentsFromME(beta, B, 5);
mlarge = MomentsFromME(gamma, G, 5);
assert(norm((msmall-mlarge)./msmall)<10^-12, 'MAPMAP1: Large and small model does not give the same results!');
disp('Input:');
disp('------');
delta = [0.5,0.1,0.4];
disp('delta = ');
disp(delta);
Dm = [-8., 1., 2.; 0., -6., 4.; 3., 0., -3.];
disp('Dm = ');
disp(Dm);
sigma = [0.2,0.7,0.1];
disp('sigma = ');
disp(sigma);
S = [-10., 4., 0.; 5., -7., 2.; 1., 2., -8.];
disp('S = ');
disp(S);
disp('D0 = Dm;:');
D0 = Dm;
disp('D1 = sum(-Dm,2)*delta;:');
D1 = sum(-Dm,2)*delta;
disp('S0 = S;:');
S0 = S;
disp('S1 = sum(-S,2)*sigma;:');
S1 = sum(-S,2)*sigma;
lambd = 1./MarginalMomentsFromMAP(D0, D1, 1);
disp('Test:');
disp('-----');
disp('[ncd, ncm] = MAPMAP1(D0, D1, S0, S1, ''ncDistr'', 11, ''ncMoms'', 5);:');
[ncd, ncm] = MAPMAP1(D0, D1, S0, S1, 'ncDistr', 11, 'ncMoms', 5);
disp('ncd = ');
disp(ncd);
disp('ncm = ');
disp(ncm);
disp('[alphap, Ap] = MAPMAP1(D0, D1, S0, S1, ''ncDistrDPH'');:');
[alphap, Ap] = MAPMAP1(D0, D1, S0, S1, 'ncDistrDPH');
disp('alphap = ');
disp(alphap);
disp('Ap = ');
disp(Ap);
disp('[alpha, A] = MAPMAP1(D0, D1, S0, S1, ''ncDistrMG'');:');
[alpha, A] = MAPMAP1(D0, D1, S0, S1, 'ncDistrMG');
disp('alpha = ');
disp(alpha);
disp('A = ');
disp(A);
disp('ncdFromDPH = PmfFromDPH(alphap, Ap, (0:1:10));:');
ncdFromDPH = PmfFromDPH(alphap, Ap, (0:1:10));
disp('ncdFromDPH = ');
disp(ncdFromDPH);
disp('ncmFromMG = MomentsFromMG(alpha, A, 5);:');
ncmFromMG = MomentsFromMG(alpha, A, 5);
disp('ncmFromMG = ');
disp(ncmFromMG);
disp('[std, stm] = MAPMAP1(D0, D1, S0, S1, ''stDistr'', (0.:0.1:1.), ''stMoms'', 5);:');
[std, stm] = MAPMAP1(D0, D1, S0, S1, 'stDistr', (0.:0.1:1.), 'stMoms', 5);
disp('std = ');
disp(std);
disp('stm = ');
disp(stm);
disp('[betap, Bp] = MAPMAP1(D0, D1, S0, S1, ''stDistrPH'');:');
[betap, Bp] = MAPMAP1(D0, D1, S0, S1, 'stDistrPH');
disp('betap = ');
disp(betap);
disp('Bp = ');
disp(Bp);
disp('[beta, B] = MAPMAP1(D0, D1, S0, S1, ''stDistrME'');:');
[beta, B] = MAPMAP1(D0, D1, S0, S1, 'stDistrME');
disp('beta = ');
disp(beta);
disp('B = ');
disp(B);
disp('stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));:');
stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));
disp('stdFromPH = ');
disp(stdFromPH);
disp('stmFromME = MomentsFromME(beta, B, 5);:');
stmFromME = MomentsFromME(beta, B, 5);
disp('stmFromME = ');
disp(stmFromME);
assert(CheckMGRepresentation(alpha, A), 'MAPMAP1: invalid MG representation of the queue length!');
assert(CheckMERepresentation(beta, B), 'MAPMAP1: invalid ME representation of the sojourn time!');
assert(CheckDPHRepresentation(alphap, Ap), 'MAPMAP1: invalid DPH representation of the queue length!');
assert(CheckPHRepresentation(betap, Bp), 'MAPMAP1: invalid PH representation of the sojourn time!');
assert(abs(ncm(1)-stm(1)*lambd)<10^-12, 'MAPMAP1: Little formula does not hold!');
assert(norm((MomentsFromDPH(alphap, Ap, 5)-ncmFromMG)./ncmFromMG)<10^-12, 'MAPMAP1: the MG and DPH representations are not equal!');
assert(norm((MomentsFromPH(betap, Bp, 5)-stmFromME)./stmFromME)<10^-12, 'MAPMAP1: the ME and PH representations are not equal!');
assert(norm(ncd-PmfFromMG(alpha, A, (0:1:10)))<10^-12, 'MAPMAP1: ncdistr returns wrong queue length distribution!');
assert(norm(std-CdfFromME(beta, B, (0.:0.1:1.)))<10^-12, 'MAPMAP1: stDistr returns wrong sojourn time distribution!');
assert(norm((ncm-ncmFromMG)./ncm)<10^-12, 'MAPMAP1: ncmoms returns wrong queue length moments!');
assert(norm((stm-stmFromME)./stm)<10^-12, 'MAPMAP1: stMoms returns wrong sojourn time moments!');
IA = eye(size(D0,1));
IS = eye(size(S0,1));
BuToolsVerbose = false;
[gamma, G] = QBDQueue(kron(IA, S1), kron(D0, IS)+kron(IA, S0), kron(D1, IS), kron(D0, IS), 'stDistrME');
BuToolsVerbose = true;
msmall = MomentsFromME(beta, B, 5);
mlarge = MomentsFromME(gamma, G, 5);
assert(norm((msmall-mlarge)./msmall)<10^-12, 'MAPMAP1: Large and small model does not give the same results!');
disp('Input:');
disp('------');
D0 = [-8., 2.; 1., -3.];
disp('D0 = ');
disp(D0);
D1 = [1., 5.; 0., 2.];
disp('D1 = ');
disp(D1);
S0 = [-10., 4.; 0., -7.];
disp('S0 = ');
disp(S0);
S1 = [5., 1.; 4., 3.];
disp('S1 = ');
disp(S1);
lambd = 1./MarginalMomentsFromMAP(D0, D1, 1);
disp('Test:');
disp('-----');
disp('[ncd, ncm] = MAPMAP1(D0, D1, S0, S1, ''ncDistr'', 11, ''ncMoms'', 5);:');
[ncd, ncm] = MAPMAP1(D0, D1, S0, S1, 'ncDistr', 11, 'ncMoms', 5);
disp('ncd = ');
disp(ncd);
disp('ncm = ');
disp(ncm);
disp('[alphap, Ap] = MAPMAP1(D0, D1, S0, S1, ''ncDistrDPH'');:');
[alphap, Ap] = MAPMAP1(D0, D1, S0, S1, 'ncDistrDPH');
disp('alphap = ');
disp(alphap);
disp('Ap = ');
disp(Ap);
disp('[alpha, A] = MAPMAP1(D0, D1, S0, S1, ''ncDistrMG'');:');
[alpha, A] = MAPMAP1(D0, D1, S0, S1, 'ncDistrMG');
disp('alpha = ');
disp(alpha);
disp('A = ');
disp(A);
disp('ncdFromDPH = PmfFromDPH(alphap, Ap, (0:1:10));:');
ncdFromDPH = PmfFromDPH(alphap, Ap, (0:1:10));
disp('ncdFromDPH = ');
disp(ncdFromDPH);
disp('ncmFromMG = MomentsFromMG(alpha, A, 5);:');
ncmFromMG = MomentsFromMG(alpha, A, 5);
disp('ncmFromMG = ');
disp(ncmFromMG);
disp('[std, stm] = MAPMAP1(D0, D1, S0, S1, ''stDistr'', (0.:0.1:1.), ''stMoms'', 5);:');
[std, stm] = MAPMAP1(D0, D1, S0, S1, 'stDistr', (0.:0.1:1.), 'stMoms', 5);
disp('std = ');
disp(std);
disp('stm = ');
disp(stm);
disp('[betap, Bp] = MAPMAP1(D0, D1, S0, S1, ''stDistrPH'');:');
[betap, Bp] = MAPMAP1(D0, D1, S0, S1, 'stDistrPH');
disp('betap = ');
disp(betap);
disp('Bp = ');
disp(Bp);
disp('[beta, B] = MAPMAP1(D0, D1, S0, S1, ''stDistrME'');:');
[beta, B] = MAPMAP1(D0, D1, S0, S1, 'stDistrME');
disp('beta = ');
disp(beta);
disp('B = ');
disp(B);
disp('stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));:');
stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));
disp('stdFromPH = ');
disp(stdFromPH);
disp('stmFromME = MomentsFromME(beta, B, 5);:');
stmFromME = MomentsFromME(beta, B, 5);
disp('stmFromME = ');
disp(stmFromME);
assert(CheckMGRepresentation(alpha, A), 'MAPMAP1: invalid MG representation of the queue length!');
assert(CheckMERepresentation(beta, B), 'MAPMAP1: invalid ME representation of the sojourn time!');
assert(CheckDPHRepresentation(alphap, Ap), 'MAPMAP1: invalid DPH representation of the queue length!');
assert(CheckPHRepresentation(betap, Bp), 'MAPMAP1: invalid PH representation of the sojourn time!');
assert(abs(ncm(1)-stm(1)*lambd)<10^-12, 'MAPMAP1: Little formula does not hold!');
assert(norm((MomentsFromDPH(alphap, Ap, 5)-ncmFromMG)./ncmFromMG)<10^-12, 'MAPMAP1: the MG and DPH representations are not equal!');
assert(norm((MomentsFromPH(betap, Bp, 5)-stmFromME)./stmFromME)<10^-12, 'MAPMAP1: the ME and PH representations are not equal!');
assert(norm(ncd-PmfFromMG(alpha, A, (0:1:10)))<10^-12, 'MAPMAP1: ncdistr returns wrong queue length distribution!');
assert(norm(std-CdfFromME(beta, B, (0.:0.1:1.)))<10^-12, 'MAPMAP1: stDistr returns wrong sojourn time distribution!');
assert(norm((ncm-ncmFromMG)./ncm)<10^-12, 'MAPMAP1: ncmoms returns wrong queue length moments!');
assert(norm((stm-stmFromME)./stm)<10^-12, 'MAPMAP1: stMoms returns wrong sojourn time moments!');
IA = eye(size(D0,1));
IS = eye(size(S0,1));
BuToolsVerbose = false;
[gamma, G] = QBDQueue(kron(IA, S1), kron(D0, IS)+kron(IA, S0), kron(D1, IS), kron(D0, IS), 'stDistrME');
BuToolsVerbose = true;
msmall = MomentsFromME(beta, B, 5);
mlarge = MomentsFromME(gamma, G, 5);
assert(norm((msmall-mlarge)./msmall)<10^-12, 'MAPMAP1: Large and small model does not give the same results!');
disp('Input:');
disp('------');
S0 = [-10., 4., 0.; 5., -7., 2.; 1., 2., -8.];
disp('S0 = ');
disp(S0);
S1 = [0., 0., 6.; 0., 0., 0.; 0., 3., 2.];
disp('S1 = ');
disp(S1);
D0 = [-8., 1., 2.; 0., -6., 4.; 3., 0., -3.];
disp('D0 = ');
disp(D0);
D1 = [4., 1., 0.; 0., 0., 2.; 0., 0., 0.];
disp('D1 = ');
disp(D1);
lambd = 1./MarginalMomentsFromMAP(D0, D1, 1);
disp('Test:');
disp('-----');
disp('[ncd, ncm] = MAPMAP1(D0, D1, S0, S1, ''ncDistr'', 11, ''ncMoms'', 5);:');
[ncd, ncm] = MAPMAP1(D0, D1, S0, S1, 'ncDistr', 11, 'ncMoms', 5);
disp('ncd = ');
disp(ncd);
disp('ncm = ');
disp(ncm);
disp('[alphap, Ap] = MAPMAP1(D0, D1, S0, S1, ''ncDistrDPH'');:');
[alphap, Ap] = MAPMAP1(D0, D1, S0, S1, 'ncDistrDPH');
disp('alphap = ');
disp(alphap);
disp('Ap = ');
disp(Ap);
disp('[alpha, A] = MAPMAP1(D0, D1, S0, S1, ''ncDistrMG'');:');
[alpha, A] = MAPMAP1(D0, D1, S0, S1, 'ncDistrMG');
disp('alpha = ');
disp(alpha);
disp('A = ');
disp(A);
disp('ncdFromDPH = PmfFromDPH(alphap, Ap, (0:1:10));:');
ncdFromDPH = PmfFromDPH(alphap, Ap, (0:1:10));
disp('ncdFromDPH = ');
disp(ncdFromDPH);
disp('ncmFromMG = MomentsFromMG(alpha, A, 5);:');
ncmFromMG = MomentsFromMG(alpha, A, 5);
disp('ncmFromMG = ');
disp(ncmFromMG);
disp('[std, stm] = MAPMAP1(D0, D1, S0, S1, ''stDistr'', (0.:0.1:1.), ''stMoms'', 5);:');
[std, stm] = MAPMAP1(D0, D1, S0, S1, 'stDistr', (0.:0.1:1.), 'stMoms', 5);
disp('std = ');
disp(std);
disp('stm = ');
disp(stm);
disp('[betap, Bp] = MAPMAP1(D0, D1, S0, S1, ''stDistrPH'');:');
[betap, Bp] = MAPMAP1(D0, D1, S0, S1, 'stDistrPH');
disp('betap = ');
disp(betap);
disp('Bp = ');
disp(Bp);
disp('[beta, B] = MAPMAP1(D0, D1, S0, S1, ''stDistrME'');:');
[beta, B] = MAPMAP1(D0, D1, S0, S1, 'stDistrME');
disp('beta = ');
disp(beta);
disp('B = ');
disp(B);
disp('stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));:');
stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));
disp('stdFromPH = ');
disp(stdFromPH);
disp('stmFromME = MomentsFromME(beta, B, 5);:');
stmFromME = MomentsFromME(beta, B, 5);
disp('stmFromME = ');
disp(stmFromME);
assert(CheckMGRepresentation(alpha, A), 'MAPMAP1: invalid MG representation of the queue length!');
assert(CheckMERepresentation(beta, B), 'MAPMAP1: invalid ME representation of the sojourn time!');
assert(CheckDPHRepresentation(alphap, Ap), 'MAPMAP1: invalid DPH representation of the queue length!');
assert(CheckPHRepresentation(betap, Bp), 'MAPMAP1: invalid PH representation of the sojourn time!');
assert(abs(ncm(1)-stm(1)*lambd)<10^-12, 'MAPMAP1: Little formula does not hold!');
assert(norm((MomentsFromDPH(alphap, Ap, 5)-ncmFromMG)./ncmFromMG)<10^-12, 'MAPMAP1: the MG and DPH representations are not equal!');
assert(norm((MomentsFromPH(betap, Bp, 5)-stmFromME)./stmFromME)<10^-12, 'MAPMAP1: the ME and PH representations are not equal!');
assert(norm(ncd-PmfFromMG(alpha, A, (0:1:10)))<10^-12, 'MAPMAP1: ncdistr returns wrong queue length distribution!');
assert(norm(std-CdfFromME(beta, B, (0.:0.1:1.)))<10^-12, 'MAPMAP1: stDistr returns wrong sojourn time distribution!');
assert(norm((ncm-ncmFromMG)./ncm)<10^-12, 'MAPMAP1: ncmoms returns wrong queue length moments!');
assert(norm((stm-stmFromME)./stm)<10^-12, 'MAPMAP1: stMoms returns wrong sojourn time moments!');
IA = eye(size(D0,1));
IS = eye(size(S0,1));
BuToolsVerbose = false;
[gamma, G] = QBDQueue(kron(IA, S1), kron(D0, IS)+kron(IA, S0), kron(D1, IS), kron(D0, IS), 'stDistrME');
BuToolsVerbose = true;
msmall = MomentsFromME(beta, B, 5);
mlarge = MomentsFromME(gamma, G, 5);
assert(norm((msmall-mlarge)./msmall)<10^-12, 'MAPMAP1: Large and small model does not give the same results!');
disp('Input:');
disp('------');
D0 = [-8., 1., 2.; 0., -6., 4.; 3., 0., -3.];
disp('D0 = ');
disp(D0);
D1 = [4., 1., 0.; 0., 0., 2.; 0., 0., 0.];
disp('D1 = ');
disp(D1);
sigma = [0.2,0.7,0.1];
disp('sigma = ');
disp(sigma);
S = [-10., 4., 0.; 5., -7., 2.; 1., 2., -8.];
disp('S = ');
disp(S);
disp('S0 = S;:');
S0 = S;
disp('S1 = sum(-S,2)*sigma;:');
S1 = sum(-S,2)*sigma;
lambd = 1./MarginalMomentsFromMAP(D0, D1, 1);
disp('Test:');
disp('-----');
disp('[ncd, ncm] = MAPMAP1(D0, D1, S0, S1, ''ncDistr'', 11, ''ncMoms'', 5);:');
[ncd, ncm] = MAPMAP1(D0, D1, S0, S1, 'ncDistr', 11, 'ncMoms', 5);
disp('ncd = ');
disp(ncd);
disp('ncm = ');
disp(ncm);
disp('[alphap, Ap] = MAPMAP1(D0, D1, S0, S1, ''ncDistrDPH'');:');
[alphap, Ap] = MAPMAP1(D0, D1, S0, S1, 'ncDistrDPH');
disp('alphap = ');
disp(alphap);
disp('Ap = ');
disp(Ap);
disp('[alpha, A] = MAPMAP1(D0, D1, S0, S1, ''ncDistrMG'');:');
[alpha, A] = MAPMAP1(D0, D1, S0, S1, 'ncDistrMG');
disp('alpha = ');
disp(alpha);
disp('A = ');
disp(A);
disp('ncdFromDPH = PmfFromDPH(alphap, Ap, (0:1:10));:');
ncdFromDPH = PmfFromDPH(alphap, Ap, (0:1:10));
disp('ncdFromDPH = ');
disp(ncdFromDPH);
disp('ncmFromMG = MomentsFromMG(alpha, A, 5);:');
ncmFromMG = MomentsFromMG(alpha, A, 5);
disp('ncmFromMG = ');
disp(ncmFromMG);
disp('[std, stm] = MAPMAP1(D0, D1, S0, S1, ''stDistr'', (0.:0.1:1.), ''stMoms'', 5);:');
[std, stm] = MAPMAP1(D0, D1, S0, S1, 'stDistr', (0.:0.1:1.), 'stMoms', 5);
disp('std = ');
disp(std);
disp('stm = ');
disp(stm);
disp('[betap, Bp] = MAPMAP1(D0, D1, S0, S1, ''stDistrPH'');:');
[betap, Bp] = MAPMAP1(D0, D1, S0, S1, 'stDistrPH');
disp('betap = ');
disp(betap);
disp('Bp = ');
disp(Bp);
disp('[beta, B] = MAPMAP1(D0, D1, S0, S1, ''stDistrME'');:');
[beta, B] = MAPMAP1(D0, D1, S0, S1, 'stDistrME');
disp('beta = ');
disp(beta);
disp('B = ');
disp(B);
disp('stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));:');
stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));
disp('stdFromPH = ');
disp(stdFromPH);
disp('stmFromME = MomentsFromME(beta, B, 5);:');
stmFromME = MomentsFromME(beta, B, 5);
disp('stmFromME = ');
disp(stmFromME);
assert(CheckMGRepresentation(alpha, A), 'MAPMAP1: invalid MG representation of the queue length!');
assert(CheckMERepresentation(beta, B), 'MAPMAP1: invalid ME representation of the sojourn time!');
assert(CheckDPHRepresentation(alphap, Ap), 'MAPMAP1: invalid DPH representation of the queue length!');
assert(CheckPHRepresentation(betap, Bp), 'MAPMAP1: invalid PH representation of the sojourn time!');
assert(abs(ncm(1)-stm(1)*lambd)<10^-12, 'MAPMAP1: Little formula does not hold!');
assert(norm((MomentsFromDPH(alphap, Ap, 5)-ncmFromMG)./ncmFromMG)<10^-12, 'MAPMAP1: the MG and DPH representations are not equal!');
assert(norm((MomentsFromPH(betap, Bp, 5)-stmFromME)./stmFromME)<10^-12, 'MAPMAP1: the ME and PH representations are not equal!');
assert(norm(ncd-PmfFromMG(alpha, A, (0:1:10)))<10^-12, 'MAPMAP1: ncdistr returns wrong queue length distribution!');
assert(norm(std-CdfFromME(beta, B, (0.:0.1:1.)))<10^-12, 'MAPMAP1: stDistr returns wrong sojourn time distribution!');
assert(norm((ncm-ncmFromMG)./ncm)<10^-12, 'MAPMAP1: ncmoms returns wrong queue length moments!');
assert(norm((stm-stmFromME)./stm)<10^-12, 'MAPMAP1: stMoms returns wrong sojourn time moments!');
IA = eye(size(D0,1));
IS = eye(size(S0,1));
BuToolsVerbose = false;
[gamma, G] = QBDQueue(kron(IA, S1), kron(D0, IS)+kron(IA, S0), kron(D1, IS), kron(D0, IS), 'stDistrME');
BuToolsVerbose = true;
msmall = MomentsFromME(beta, B, 5);
mlarge = MomentsFromME(gamma, G, 5);
assert(norm((msmall-mlarge)./msmall)<10^-12, 'MAPMAP1: Large and small model do not give the same results!');
disp('========================================')
disp('Testing BuTools function MMAPPH1PRPR')
disp('Input:');
disp('------');
D0 = [-5.49, 0., 1.15, 0.; 0., -2.29, 0., 0.; 0., 0.08, -1.32, 0.; 0.72, 1.17, 0.7, -7.07];
disp('D0 = ');
disp(D0);
D1 = [0.25, 0.38, 0.64, 0.; 0., 0., 0., 1.09; 0., 1.24, 0., 0.; 0.37, 0., 0., 0.];
disp('D1 = ');
disp(D1);
D2 = [0.3, 1.0, 0., 0.48; 0., 0.2, 0., 0.; 0., 0., 0., 0.; 0.61, 0., 0., 0.2];
disp('D2 = ');
disp(D2);
D3 = [0., 0.98, 0., 0.31; 0., 0., 1.0, 0.; 0., 0., 0., 0.; 1.1, 0.84, 0.33, 1.03];
disp('D3 = ');
disp(D3);
sigma3 = [0.83333,0.11404,0.05263];
disp('sigma3 = ');
disp(sigma3);
S3 = [-3., 0., 0.; 0.73077, -0.73077, 0.; 0., 0.5, -0.5];
disp('S3 = ');
disp(S3);
sigma2 = [1.];
disp('sigma2 = ');
disp(sigma2);
S2 = [-2.];
disp('S2 = ');
disp(S2);
sigma1 = [0.25,0.75];
disp('sigma1 = ');
disp(sigma1);
S1 = [-2.5, 2.5; 0., -10.];
disp('S1 = ');
disp(S1);
disp('Test:');
disp('-----');
disp('[ncm1, ncd1, ncm2, ncd2, ncm3, ncd3] = MMAPPH1PRPR({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, ''ncMoms'', 3, ''ncDistr'', 500);:');
[ncm1, ncd1, ncm2, ncd2, ncm3, ncd3] = MMAPPH1PRPR({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, 'ncMoms', 3, 'ncDistr', 500);
momFromDistr1 = ncd1*[(0:1:499);(0:1:499).^2;(0:1:499).^3]';
momFromDistr2 = ncd2*[(0:1:499);(0:1:499).^2;(0:1:499).^3]';
momFromDistr3 = ncd3*[(0:1:499);(0:1:499).^2;(0:1:499).^3]';
assert(norm((momFromDistr1-ncm1)./ncm1)<0.001&&norm((momFromDistr2-ncm2)./ncm2)<0.001&&norm((momFromDistr3-ncm3)./ncm3)<0.001, 'MMAPPH1PRPR: queue length moments and queue length distribution are not consistent!');
distrPoints = [1., 5., 10.];
disp('[stm1, std1, stm2, std2, stm3, std3] = MMAPPH1PRPR({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, ''stMoms'', 3, ''stDistr'', distrPoints);:');
[stm1, std1, stm2, std2, stm3, std3] = MMAPPH1PRPR({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, 'stMoms', 3, 'stDistr', distrPoints);
disp('stm1 = ');
disp(stm1);
disp('std1 = ');
disp(std1);
disp('stm2 = ');
disp(stm2);
disp('std2 = ');
disp(std2);
disp('stm3 = ');
disp(stm3);
disp('std3 = ');
disp(std3);
assert(min(std1)>=0&&max(std1)<=1&&all(diff(std1)>=0)&&min(std2)>=0&&max(std2)<=1&&all(diff(std2)>=0)&&min(std3)>=0&&max(std3)<=1&&all(diff(std3)>=0), 'MMAPPH1PRPR: invalid sojourn time distribution!');
lambda1 = 1./MarginalMomentsFromMAP(D0+D2+D3, D1, 1);
lambda2 = 1./MarginalMomentsFromMAP(D0+D1+D3, D2, 1);
lambda3 = 1./MarginalMomentsFromMAP(D0+D1+D2, D3, 1);
assert(abs(ncm1(1)-stm1(1)*lambda1)<10^-12, 'MMAPPH1PRPR: Little formula does not hold for class 1!');
assert(abs(ncm2(1)-stm2(1)*lambda2)<10^-12, 'MMAPPH1PRPR: Little formula does not hold for class 2!');
assert(abs(ncm3(1)-stm3(1)*lambda3)<10^-12, 'MMAPPH1PRPR: Little formula does not hold for class 3!');
disp('Input:');
disp('------');
D0 = [-5.49, 0., 1.15, 0.; 0., -2.29, 0., 0.; 0., 0.08, -1.32, 0.; 0.72, 1.17, 0.7, -7.07];
disp('D0 = ');
disp(D0);
D1 = [0.25, 0.38, 0.64, 0.; 0., 0., 0., 1.09; 0., 1.24, 0., 0.; 0.37, 0., 0., 0.];
disp('D1 = ');
disp(D1);
D2 = [0.3, 1.0, 0., 0.48; 0., 0.2, 0., 0.; 0., 0., 0., 0.; 0.61, 0., 0., 0.2];
disp('D2 = ');
disp(D2);
D3 = [0., 0.98, 0., 0.31; 0., 0., 1.0, 0.; 0., 0., 0., 0.; 1.1, 0.84, 0.33, 1.03];
disp('D3 = ');
disp(D3);
sigma3 = [0.16667,0.83333];
disp('sigma3 = ');
disp(sigma3);
S3 = [-0.5, 0.5; 0., -3.];
disp('S3 = ');
disp(S3);
sigma2 = [0.58824,0.41176];
disp('sigma2 = ');
disp(sigma2);
S2 = [-2.3529, 2.3529; 0., -4.];
disp('S2 = ');
disp(S2);
sigma1 = [0.25,0.75];
disp('sigma1 = ');
disp(sigma1);
S1 = [-2.5, 2.5; 0., -10.];
disp('S1 = ');
disp(S1);
disp('Test:');
disp('-----');
disp('[ncm1, ncd1, ncm2, ncd2, ncm3, ncd3] = MMAPPH1PRPR({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, ''ncMoms'', 3, ''ncDistr'', 500);:');
[ncm1, ncd1, ncm2, ncd2, ncm3, ncd3] = MMAPPH1PRPR({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, 'ncMoms', 3, 'ncDistr', 500);
momFromDistr1 = ncd1*[(0:1:499);(0:1:499).^2;(0:1:499).^3]';
momFromDistr2 = ncd2*[(0:1:499);(0:1:499).^2;(0:1:499).^3]';
momFromDistr3 = ncd3*[(0:1:499);(0:1:499).^2;(0:1:499).^3]';
assert(norm((momFromDistr1-ncm1)./ncm1)<0.001&&norm((momFromDistr2-ncm2)./ncm2)<0.001&&norm((momFromDistr3-ncm3)./ncm3)<0.001, 'MMAPPH1PRPR: queue length moments and queue length distribution are not consistent!');
distrPoints = [1., 5., 10.];
disp('[stm1, std1, stm2, std2, stm3, std3] = MMAPPH1PRPR({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, ''stMoms'', 3, ''stDistr'', distrPoints);:');
[stm1, std1, stm2, std2, stm3, std3] = MMAPPH1PRPR({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, 'stMoms', 3, 'stDistr', distrPoints);
disp('stm1 = ');
disp(stm1);
disp('std1 = ');
disp(std1);
disp('stm2 = ');
disp(stm2);
disp('std2 = ');
disp(std2);
disp('stm3 = ');
disp(stm3);
disp('std3 = ');
disp(std3);
assert(min(std1)>=0&&max(std1)<=1&&all(diff(std1)>=0)&&min(std2)>=0&&max(std2)<=1&&all(diff(std2)>=0)&&min(std3)>=0&&max(std3)<=1&&all(diff(std3)>=0), 'MMAPPH1PRPR: invalid sojourn time distribution!');
lambda1 = 1./MarginalMomentsFromMAP(D0+D2+D3, D1, 1);
lambda2 = 1./MarginalMomentsFromMAP(D0+D1+D3, D2, 1);
lambda3 = 1./MarginalMomentsFromMAP(D0+D1+D2, D3, 1);
assert(abs(ncm1(1)-stm1(1)*lambda1)<10^-12, 'MMAPPH1PRPR: Little formula does not hold for class 1!');
assert(abs(ncm2(1)-stm2(1)*lambda2)<10^-12, 'MMAPPH1PRPR: Little formula does not hold for class 2!');
assert(abs(ncm3(1)-stm3(1)*lambda3)<10^-12, 'MMAPPH1PRPR: Little formula does not hold for class 3!');
disp('========================================')
disp('Testing BuTools function MMAPPH1NPPR')
disp('Input:');
disp('------');
D0 = [-5.49, 0., 1.15, 0.; 0., -2.29, 0., 0.; 0., 0.08, -1.32, 0.; 0.72, 1.17, 0.7, -7.07];
disp('D0 = ');
disp(D0);
D1 = [0.25, 0.38, 0.64, 0.; 0., 0., 0., 1.09; 0., 1.24, 0., 0.; 0.37, 0., 0., 0.];
disp('D1 = ');
disp(D1);
D2 = [0.3, 1.0, 0., 0.48; 0., 0.2, 0., 0.; 0., 0., 0., 0.; 0.61, 0., 0., 0.2];
disp('D2 = ');
disp(D2);
D3 = [0., 0.98, 0., 0.31; 0., 0., 1.0, 0.; 0., 0., 0., 0.; 1.1, 0.84, 0.33, 1.03];
disp('D3 = ');
disp(D3);
sigma3 = [0.83333,0.11404,0.05263];
disp('sigma3 = ');
disp(sigma3);
S3 = [-3., 0., 0.; 0.73077, -0.73077, 0.; 0., 0.5, -0.5];
disp('S3 = ');
disp(S3);
sigma2 = [1.];
disp('sigma2 = ');
disp(sigma2);
S2 = [-2.];
disp('S2 = ');
disp(S2);
sigma1 = [0.25,0.75];
disp('sigma1 = ');
disp(sigma1);
S1 = [-2.5, 2.5; 0., -10.];
disp('S1 = ');
disp(S1);
disp('Test:');
disp('-----');
disp('[ncm1, ncd1, ncm2, ncd2, ncm3, ncd3] = MMAPPH1NPPR({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, ''ncMoms'', 3, ''ncDistr'', 500);:');
[ncm1, ncd1, ncm2, ncd2, ncm3, ncd3] = MMAPPH1NPPR({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, 'ncMoms', 3, 'ncDistr', 500);
momFromDistr1 = ncd1*[(0:1:499);(0:1:499).^2;(0:1:499).^3]';
momFromDistr2 = ncd2*[(0:1:499);(0:1:499).^2;(0:1:499).^3]';
momFromDistr3 = ncd3*[(0:1:499);(0:1:499).^2;(0:1:499).^3]';
assert(norm((momFromDistr1-ncm1)./ncm1)<0.001&&norm((momFromDistr2-ncm2)./ncm2)<0.001&&norm((momFromDistr3-ncm3)./ncm3)<0.001, 'MMAPPH1NPPR: queue length moments and queue length distribution are not consistent!');
distrPoints = [1., 5., 10.];
disp('[stm1, std1, stm2, std2, stm3, std3] = MMAPPH1NPPR({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, ''stMoms'', 3, ''stDistr'', distrPoints);:');
[stm1, std1, stm2, std2, stm3, std3] = MMAPPH1NPPR({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, 'stMoms', 3, 'stDistr', distrPoints);
disp('stm1 = ');
disp(stm1);
disp('std1 = ');
disp(std1);
disp('stm2 = ');
disp(stm2);
disp('std2 = ');
disp(std2);
disp('stm3 = ');
disp(stm3);
disp('std3 = ');
disp(std3);
assert(min(std1)>=0&&max(std1)<=1&&all(diff(std1)>=0)&&min(std2)>=0&&max(std2)<=1&&all(diff(std2)>=0)&&min(std3)>=0&&max(std3)<=1&&all(diff(std3)>=0), 'MMAPPH1NPPR: invalid sojourn time distribution!');
lambda1 = 1./MarginalMomentsFromMAP(D0+D2+D3, D1, 1);
lambda2 = 1./MarginalMomentsFromMAP(D0+D1+D3, D2, 1);
lambda3 = 1./MarginalMomentsFromMAP(D0+D1+D2, D3, 1);
assert(abs(ncm1(1)-stm1(1)*lambda1)<10^-12, 'MMAPPH1NPPR: Little formula does not hold for class 1!');
assert(abs(ncm2(1)-stm2(1)*lambda2)<10^-12, 'MMAPPH1NPPR: Little formula does not hold for class 2!');
assert(abs(ncm3(1)-stm3(1)*lambda3)<10^-12, 'MMAPPH1NPPR: Little formula does not hold for class 3!');
disp('Input:');
disp('------');
D0 = [-5.49, 0., 1.15, 0.; 0., -2.29, 0., 0.; 0., 0.08, -1.32, 0.; 0.72, 1.17, 0.7, -7.07];
disp('D0 = ');
disp(D0);
D1 = [0.25, 0.38, 0.64, 0.; 0., 0., 0., 1.09; 0., 1.24, 0., 0.; 0.37, 0., 0., 0.];
disp('D1 = ');
disp(D1);
D2 = [0.3, 1.0, 0., 0.48; 0., 0.2, 0., 0.; 0., 0., 0., 0.; 0.61, 0., 0., 0.2];
disp('D2 = ');
disp(D2);
D3 = [0., 0.98, 0., 0.31; 0., 0., 1.0, 0.; 0., 0., 0., 0.; 1.1, 0.84, 0.33, 1.03];
disp('D3 = ');
disp(D3);
sigma3 = [0.16667,0.83333];
disp('sigma3 = ');
disp(sigma3);
S3 = [-0.5, 0.5; 0., -3.];
disp('S3 = ');
disp(S3);
sigma2 = [0.58824,0.41176];
disp('sigma2 = ');
disp(sigma2);
S2 = [-2.3529, 2.3529; 0., -4.];
disp('S2 = ');
disp(S2);
sigma1 = [0.25,0.75];
disp('sigma1 = ');
disp(sigma1);
S1 = [-2.5, 2.5; 0., -10.];
disp('S1 = ');
disp(S1);
disp('Test:');
disp('-----');
disp('[ncm1, ncd1, ncm2, ncd2, ncm3, ncd3] = MMAPPH1NPPR({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, ''ncMoms'', 3, ''ncDistr'', 500);:');
[ncm1, ncd1, ncm2, ncd2, ncm3, ncd3] = MMAPPH1NPPR({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, 'ncMoms', 3, 'ncDistr', 500);
momFromDistr1 = ncd1*[(0:1:499);(0:1:499).^2;(0:1:499).^3]';
momFromDistr2 = ncd2*[(0:1:499);(0:1:499).^2;(0:1:499).^3]';
momFromDistr3 = ncd3*[(0:1:499);(0:1:499).^2;(0:1:499).^3]';
assert(norm((momFromDistr1-ncm1)./ncm1)<0.001&&norm((momFromDistr2-ncm2)./ncm2)<0.001&&norm((momFromDistr3-ncm3)./ncm3)<0.001, 'MMAPPH1NPPR: queue length moments and queue length distribution are not consistent!');
distrPoints = [1., 5., 10.];
disp('[stm1, std1, stm2, std2, stm3, std3] = MMAPPH1NPPR({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, ''stMoms'', 3, ''stDistr'', distrPoints);:');
[stm1, std1, stm2, std2, stm3, std3] = MMAPPH1NPPR({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, 'stMoms', 3, 'stDistr', distrPoints);
disp('stm1 = ');
disp(stm1);
disp('std1 = ');
disp(std1);
disp('stm2 = ');
disp(stm2);
disp('std2 = ');
disp(std2);
disp('stm3 = ');
disp(stm3);
disp('std3 = ');
disp(std3);
assert(min(std1)>=0&&max(std1)<=1&&all(diff(std1)>=0)&&min(std2)>=0&&max(std2)<=1&&all(diff(std2)>=0)&&min(std3)>=0&&max(std3)<=1&&all(diff(std3)>=0), 'MMAPPH1NPPR: invalid sojourn time distribution!');
lambda1 = 1./MarginalMomentsFromMAP(D0+D2+D3, D1, 1);
lambda2 = 1./MarginalMomentsFromMAP(D0+D1+D3, D2, 1);
lambda3 = 1./MarginalMomentsFromMAP(D0+D1+D2, D3, 1);
assert(abs(ncm1(1)-stm1(1)*lambda1)<10^-12, 'MMAPPH1NPPR: Little formula does not hold for class 1!');
assert(abs(ncm2(1)-stm2(1)*lambda2)<10^-12, 'MMAPPH1NPPR: Little formula does not hold for class 2!');
assert(abs(ncm3(1)-stm3(1)*lambda3)<10^-12, 'MMAPPH1NPPR: Little formula does not hold for class 3!');
disp('========================================')
disp('Testing BuTools function MMAPPH1FCFS')
disp('Input:');
disp('------');
D0 = [-5.49, 0., 1.15, 0.; 0., -2.29, 0., 0.; 0., 0.08, -1.32, 0.; 0.72, 1.17, 0.7, -7.07];
disp('D0 = ');
disp(D0);
D1 = [0.25, 0.38, 0.64, 0.; 0., 0., 0., 1.09; 0., 1.24, 0., 0.; 0.37, 0., 0., 0.];
disp('D1 = ');
disp(D1);
D2 = [0.3, 1.0, 0., 0.48; 0., 0.2, 0., 0.; 0., 0., 0., 0.; 0.61, 0., 0., 0.2];
disp('D2 = ');
disp(D2);
D3 = [0., 0.98, 0., 0.31; 0., 0., 1.0, 0.; 0., 0., 0., 0.; 1.1, 0.84, 0.33, 1.03];
disp('D3 = ');
disp(D3);
sigma3 = [0.83333,0.11404,0.05263];
disp('sigma3 = ');
disp(sigma3);
S3 = [-3., 0., 0.; 0.73077, -0.73077, 0.; 0., 0.5, -0.5];
disp('S3 = ');
disp(S3);
sigma2 = [1.];
disp('sigma2 = ');
disp(sigma2);
S2 = [-2.];
disp('S2 = ');
disp(S2);
sigma1 = [0.25,0.75];
disp('sigma1 = ');
disp(sigma1);
S1 = [-2.5, 2.5; 0., -10.];
disp('S1 = ');
disp(S1);
disp('Test:');
disp('-----');
disp('[ncm1, ncd1, ncm2, ncd2, ncm3, ncd3] = MMAPPH1FCFS({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, ''ncMoms'', 3, ''ncDistr'', 500);:');
[ncm1, ncd1, ncm2, ncd2, ncm3, ncd3] = MMAPPH1FCFS({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, 'ncMoms', 3, 'ncDistr', 500);
momFromDistr1 = ncd1*[(0:1:499);(0:1:499).^2;(0:1:499).^3]';
momFromDistr2 = ncd2*[(0:1:499);(0:1:499).^2;(0:1:499).^3]';
momFromDistr3 = ncd3*[(0:1:499);(0:1:499).^2;(0:1:499).^3]';
assert(norm((momFromDistr1-ncm1)./ncm1)<0.001&&norm((momFromDistr2-ncm2)./ncm2)<0.001&&norm((momFromDistr3-ncm3)./ncm3)<0.001, 'MMAPPH1FCFS: queue length moments and queue length distribution are not consistent!');
distrPoints = [1., 5., 10.];
disp('[stm1, std1, stm2, std2, stm3, std3] = MMAPPH1FCFS({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, ''stMoms'', 3, ''stDistr'', distrPoints);:');
[stm1, std1, stm2, std2, stm3, std3] = MMAPPH1FCFS({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, 'stMoms', 3, 'stDistr', distrPoints);
disp('stm1 = ');
disp(stm1);
disp('std1 = ');
disp(std1);
disp('stm2 = ');
disp(stm2);
disp('std2 = ');
disp(std2);
disp('stm3 = ');
disp(stm3);
disp('std3 = ');
disp(std3);
disp('[betap1, Bp1, betap2, Bp2, betap3, Bp3] = MMAPPH1FCFS({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, ''stDistrPH'');:');
[betap1, Bp1, betap2, Bp2, betap3, Bp3] = MMAPPH1FCFS({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, 'stDistrPH');
disp('[beta1, B1, beta2, B2, beta3, B3] = MMAPPH1FCFS({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, ''stDistrME'');:');
[beta1, B1, beta2, B2, beta3, B3] = MMAPPH1FCFS({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, 'stDistrME');
disp('stdFromPH1 = CdfFromPH(betap1, Bp1, distrPoints);:');
stdFromPH1 = CdfFromPH(betap1, Bp1, distrPoints);
disp('stdFromPH1 = ');
disp(stdFromPH1);
disp('stmFromME1 = MomentsFromME(beta1, B1, 3);:');
stmFromME1 = MomentsFromME(beta1, B1, 3);
disp('stmFromME1 = ');
disp(stmFromME1);
disp('stdFromPH2 = CdfFromPH(betap2, Bp2, distrPoints);:');
stdFromPH2 = CdfFromPH(betap2, Bp2, distrPoints);
disp('stdFromPH2 = ');
disp(stdFromPH2);
disp('stmFromME2 = MomentsFromME(beta2, B2, 3);:');
stmFromME2 = MomentsFromME(beta2, B2, 3);
disp('stmFromME2 = ');
disp(stmFromME2);
disp('stdFromPH3 = CdfFromPH(betap3, Bp3, distrPoints);:');
stdFromPH3 = CdfFromPH(betap3, Bp3, distrPoints);
disp('stdFromPH3 = ');
disp(stdFromPH3);
disp('stmFromME3 = MomentsFromME(beta3, B3, 3);:');
stmFromME3 = MomentsFromME(beta3, B3, 3);
disp('stmFromME3 = ');
disp(stmFromME3);
assert(min(std1)>=0&&max(std1)<=1&&all(diff(std1)>=0)&&min(std2)>=0&&max(std2)<=1&&all(diff(std2)>=0)&&min(std3)>=0&&max(std3)<=1&&all(diff(std3)>=0), 'MMAPPH1FCFS: invalid sojourn time distribution!');
assert(norm((MomentsFromPH(betap1, Bp1, 3)-stmFromME1)./stmFromME1)<10^-10, 'MMAPPH1FCFS: the ME and PH representations for class 1 are not equal!');
assert(norm((MomentsFromPH(betap2, Bp2, 3)-stmFromME2)./stmFromME2)<10^-10, 'MMAPPH1FCFS: the ME and PH representations for class 2 are not equal!');
assert(norm((MomentsFromPH(betap3, Bp3, 3)-stmFromME3)./stmFromME3)<10^-10, 'MMAPPH1FCFS: the ME and PH representations for class 3 are not equal!');
assert(norm(std1-CdfFromME(beta1, B1, distrPoints))<10^-12, 'MMAPPH1FCFS: stDistr returns wrong sojourn time distribution for class 1!');
assert(norm(std2-CdfFromME(beta2, B2, distrPoints))<10^-12, 'MMAPPH1FCFS: stDistr returns wrong sojourn time distribution for class 2!');
assert(norm(std3-CdfFromME(beta3, B3, distrPoints))<10^-12, 'MMAPPH1FCFS: stDistr returns wrong sojourn time distribution for class 3!');
assert(norm((stm1-stmFromME1)./stm1)<10^-10, 'MMAPPH1FCFS: stMoms returns wrong sojourn time moments for class 1!');
assert(norm((stm2-stmFromME2)./stm2)<10^-10, 'MMAPPH1FCFS: stMoms returns wrong sojourn time moments for class 2!');
assert(norm((stm3-stmFromME3)./stm3)<10^-10, 'MMAPPH1FCFS: stMoms returns wrong sojourn time moments for class 3!');
lambda1 = 1./MarginalMomentsFromMAP(D0+D2+D3, D1, 1);
lambda2 = 1./MarginalMomentsFromMAP(D0+D1+D3, D2, 1);
lambda3 = 1./MarginalMomentsFromMAP(D0+D1+D2, D3, 1);
assert(abs(ncm1(1)-stm1(1)*lambda1)<10^-12, 'MMAPPH1FCFS: Little formula does not hold for class 1!');
assert(abs(ncm2(1)-stm2(1)*lambda2)<10^-12, 'MMAPPH1FCFS: Little formula does not hold for class 2!');
assert(abs(ncm3(1)-stm3(1)*lambda3)<10^-12, 'MMAPPH1FCFS: Little formula does not hold for class 3!');
disp('Input:');
disp('------');
D0 = [-5.49, 0., 1.15, 0.; 0., -2.29, 0., 0.; 0., 0.08, -1.32, 0.; 0.72, 1.17, 0.7, -7.07];
disp('D0 = ');
disp(D0);
D1 = [0.25, 0.38, 0.64, 0.; 0., 0., 0., 1.09; 0., 1.24, 0., 0.; 0.37, 0., 0., 0.];
disp('D1 = ');
disp(D1);
D2 = [0.3, 1.0, 0., 0.48; 0., 0.2, 0., 0.; 0., 0., 0., 0.; 0.61, 0., 0., 0.2];
disp('D2 = ');
disp(D2);
D3 = [0., 0.98, 0., 0.31; 0., 0., 1.0, 0.; 0., 0., 0., 0.; 1.1, 0.84, 0.33, 1.03];
disp('D3 = ');
disp(D3);
sigma3 = [0.16667,0.83333];
disp('sigma3 = ');
disp(sigma3);
S3 = [-0.5, 0.5; 0., -3.];
disp('S3 = ');
disp(S3);
sigma2 = [0.58824,0.41176];
disp('sigma2 = ');
disp(sigma2);
S2 = [-2.3529, 2.3529; 0., -4.];
disp('S2 = ');
disp(S2);
sigma1 = [0.25,0.75];
disp('sigma1 = ');
disp(sigma1);
S1 = [-2.5, 2.5; 0., -10.];
disp('S1 = ');
disp(S1);
disp('Test:');
disp('-----');
disp('[ncm1, ncd1, ncm2, ncd2, ncm3, ncd3] = MMAPPH1FCFS({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, ''ncMoms'', 3, ''ncDistr'', 500);:');
[ncm1, ncd1, ncm2, ncd2, ncm3, ncd3] = MMAPPH1FCFS({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, 'ncMoms', 3, 'ncDistr', 500);
momFromDistr1 = ncd1*[(0:1:499);(0:1:499).^2;(0:1:499).^3]';
momFromDistr2 = ncd2*[(0:1:499);(0:1:499).^2;(0:1:499).^3]';
momFromDistr3 = ncd3*[(0:1:499);(0:1:499).^2;(0:1:499).^3]';
assert(norm((momFromDistr1-ncm1)./ncm1)<0.001&&norm((momFromDistr2-ncm2)./ncm2)<0.001&&norm((momFromDistr3-ncm3)./ncm3)<0.001, 'MMAPPH1FCFS: queue length moments and queue length distribution are not consistent!');
distrPoints = [1., 5., 10.];
disp('[stm1, std1, stm2, std2, stm3, std3] = MMAPPH1FCFS({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, ''stMoms'', 3, ''stDistr'', distrPoints);:');
[stm1, std1, stm2, std2, stm3, std3] = MMAPPH1FCFS({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, 'stMoms', 3, 'stDistr', distrPoints);
disp('stm1 = ');
disp(stm1);
disp('std1 = ');
disp(std1);
disp('stm2 = ');
disp(stm2);
disp('std2 = ');
disp(std2);
disp('stm3 = ');
disp(stm3);
disp('std3 = ');
disp(std3);
disp('[betap1, Bp1, betap2, Bp2, betap3, Bp3] = MMAPPH1FCFS({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, ''stDistrPH'');:');
[betap1, Bp1, betap2, Bp2, betap3, Bp3] = MMAPPH1FCFS({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, 'stDistrPH');
disp('[beta1, B1, beta2, B2, beta3, B3] = MMAPPH1FCFS({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, ''stDistrME'');:');
[beta1, B1, beta2, B2, beta3, B3] = MMAPPH1FCFS({D0, D1, D2, D3}, {sigma1, sigma2, sigma3}, {S1, S2, S3}, 'stDistrME');
disp('stdFromPH1 = CdfFromPH(betap1, Bp1, distrPoints);:');
stdFromPH1 = CdfFromPH(betap1, Bp1, distrPoints);
disp('stdFromPH1 = ');
disp(stdFromPH1);
disp('stmFromME1 = MomentsFromME(beta1, B1, 3);:');
stmFromME1 = MomentsFromME(beta1, B1, 3);
disp('stmFromME1 = ');
disp(stmFromME1);
disp('stdFromPH2 = CdfFromPH(betap2, Bp2, distrPoints);:');
stdFromPH2 = CdfFromPH(betap2, Bp2, distrPoints);
disp('stdFromPH2 = ');
disp(stdFromPH2);
disp('stmFromME2 = MomentsFromME(beta2, B2, 3);:');
stmFromME2 = MomentsFromME(beta2, B2, 3);
disp('stmFromME2 = ');
disp(stmFromME2);
disp('stdFromPH3 = CdfFromPH(betap3, Bp3, distrPoints);:');
stdFromPH3 = CdfFromPH(betap3, Bp3, distrPoints);
disp('stdFromPH3 = ');
disp(stdFromPH3);
disp('stmFromME3 = MomentsFromME(beta3, B3, 3);:');
stmFromME3 = MomentsFromME(beta3, B3, 3);
disp('stmFromME3 = ');
disp(stmFromME3);
assert(min(std1)>=0&&max(std1)<=1&&all(diff(std1)>=0)&&min(std2)>=0&&max(std2)<=1&&all(diff(std2)>=0)&&min(std3)>=0&&max(std3)<=1&&all(diff(std3)>=0), 'MMAPPH1FCFS: invalid sojourn time distribution!');
assert(norm((MomentsFromPH(betap1, Bp1, 3)-stmFromME1)./stmFromME1)<10^-10, 'MMAPPH1FCFS: the ME and PH representations for class 1 are not equal!');
assert(norm((MomentsFromPH(betap2, Bp2, 3)-stmFromME2)./stmFromME2)<10^-10, 'MMAPPH1FCFS: the ME and PH representations for class 2 are not equal!');
assert(norm((MomentsFromPH(betap3, Bp3, 3)-stmFromME3)./stmFromME3)<10^-10, 'MMAPPH1FCFS: the ME and PH representations for class 3 are not equal!');
assert(norm(std1-CdfFromME(beta1, B1, distrPoints))<10^-12, 'MMAPPH1FCFS: stDistr returns wrong sojourn time distribution for class 1!');
assert(norm(std2-CdfFromME(beta2, B2, distrPoints))<10^-12, 'MMAPPH1FCFS: stDistr returns wrong sojourn time distribution for class 2!');
assert(norm(std3-CdfFromME(beta3, B3, distrPoints))<10^-12, 'MMAPPH1FCFS: stDistr returns wrong sojourn time distribution for class 3!');
assert(norm((stm1-stmFromME1)./stm1)<10^-10, 'MMAPPH1FCFS: stMoms returns wrong sojourn time moments for class 1!');
assert(norm((stm2-stmFromME2)./stm2)<10^-10, 'MMAPPH1FCFS: stMoms returns wrong sojourn time moments for class 2!');
assert(norm((stm3-stmFromME3)./stm3)<10^-10, 'MMAPPH1FCFS: stMoms returns wrong sojourn time moments for class 3!');
lambda1 = 1./MarginalMomentsFromMAP(D0+D2+D3, D1, 1);
lambda2 = 1./MarginalMomentsFromMAP(D0+D1+D3, D2, 1);
lambda3 = 1./MarginalMomentsFromMAP(D0+D1+D2, D3, 1);
assert(abs(ncm1(1)-stm1(1)*lambda1)<10^-12, 'MMAPPH1FCFS: Little formula does not hold for class 1!');
assert(abs(ncm2(1)-stm2(1)*lambda2)<10^-12, 'MMAPPH1FCFS: Little formula does not hold for class 2!');
assert(abs(ncm3(1)-stm3(1)*lambda3)<10^-12, 'MMAPPH1FCFS: Little formula does not hold for class 3!');
disp('========================================')
disp('Testing BuTools function FluidQueue')
disp('Input:');
disp('------');
Q = [-9., 2., 4., 0., 1., 2.; 6., -25., 5., 3., 7., 4.; 1., 3., -4., 0., 0., 0.; 0., 0., 0., -8., 3., 5.; 7., 3., 0., 2., -13., 1.; 7., 8., 0., 3., 8., -26.];
disp('Q = ');
disp(Q);
vRin = [4.,2.,1.,0.,0.,3.];
disp('vRin = ');
disp(vRin);
vRout = [6.,2.,0.,0.,3.,2.];
disp('vRout = ');
disp(vRout);
disp('Rin = diag(vRin);:');
Rin = diag(vRin);
disp('Rout = diag(vRout);:');
Rout = diag(vRout);
lambd = sum(CTMCSolve(Q)*Rin);
disp('Test:');
disp('-----');
disp('[fld, flm] = FluidQueue(Q, Rin, Rout, ''flDistr'', (0.:0.1:1.), ''flMoms'', 5);:');
[fld, flm] = FluidQueue(Q, Rin, Rout, 'flDistr', (0.:0.1:1.), 'flMoms', 5);
disp('fld = ');
disp(fld);
disp('flm = ');
disp(flm);
disp('[alphap, Ap] = FluidQueue(Q, Rin, Rout, ''flDistrPH'');:');
[alphap, Ap] = FluidQueue(Q, Rin, Rout, 'flDistrPH');
disp('alphap = ');
disp(alphap);
disp('Ap = ');
disp(Ap);
disp('[alpha, A] = FluidQueue(Q, Rin, Rout, ''flDistrME'');:');
[alpha, A] = FluidQueue(Q, Rin, Rout, 'flDistrME');
disp('alpha = ');
disp(alpha);
disp('A = ');
disp(A);
disp('fldFromPH = CdfFromPH(alphap, Ap, (0.:0.1:1.));:');
fldFromPH = CdfFromPH(alphap, Ap, (0.:0.1:1.));
disp('fldFromPH = ');
disp(fldFromPH);
disp('flmFromME = MomentsFromME(alpha, A, 5);:');
flmFromME = MomentsFromME(alpha, A, 5);
disp('flmFromME = ');
disp(flmFromME);
disp('[std, stm] = FluidQueue(Q, Rin, Rout, ''stDistr'', (0.:0.1:1.), ''stMoms'', 5);:');
[std, stm] = FluidQueue(Q, Rin, Rout, 'stDistr', (0.:0.1:1.), 'stMoms', 5);
disp('std = ');
disp(std);
disp('stm = ');
disp(stm);
disp('[betap, Bp] = FluidQueue(Q, Rin, Rout, ''stDistrPH'');:');
[betap, Bp] = FluidQueue(Q, Rin, Rout, 'stDistrPH');
disp('betap = ');
disp(betap);
disp('Bp = ');
disp(Bp);
disp('[beta, B] = FluidQueue(Q, Rin, Rout, ''stDistrME'');:');
[beta, B] = FluidQueue(Q, Rin, Rout, 'stDistrME');
disp('beta = ');
disp(beta);
disp('B = ');
disp(B);
disp('stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));:');
stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));
disp('stdFromPH = ');
disp(stdFromPH);
disp('stmFromME = MomentsFromME(beta, B, 5);:');
stmFromME = MomentsFromME(beta, B, 5);
disp('stmFromME = ');
disp(stmFromME);
assert(CheckMERepresentation(alpha, A), 'FluidQueue: invalid ME representation of the queue length!');
assert(CheckMERepresentation(beta, B), 'FluidQueue: invalid ME representation of the sojourn time!');
assert(CheckPHRepresentation(alphap, Ap), 'FluidQueue: invalid PH representation of the queue length!');
assert(CheckPHRepresentation(betap, Bp), 'FluidQueue: invalid PH representation of the sojourn time!');
assert(abs(flm(1)-stm(1)*lambd)<10^-12, 'FluidQueue: Little formula does not hold!');
assert(norm((MomentsFromPH(alphap, Ap, 5)-flmFromME)./flmFromME)<10^-12, 'FluidQueue: the ME and PH representations are not equal!');
assert(norm((MomentsFromPH(betap, Bp, 5)-stmFromME)./stmFromME)<10^-12, 'FluidQueue: the ME and PH representations are not equal!');
assert(norm(fld-CdfFromME(alpha, A, (0.:0.1:1.)))<10^-12, 'FluidQueue: flDistr returns wrong queue length distribution!');
assert(norm(std-CdfFromME(beta, B, (0.:0.1:1.)))<10^-12, 'FluidQueue: stDistr returns wrong sojourn time distribution!');
assert(norm((flm-flmFromME)./flm)<10^-12, 'FluidQueue: flmoms returns wrong queue length moments!');
assert(norm((stm-stmFromME)./stm)<10^-12, 'FluidQueue: stMoms returns wrong sojourn time moments!');
disp('========================================')
disp('Testing BuTools function FluFluQueue')
disp('Input:');
disp('------');
Qin = [-2., 1., 1.; 2., -5., 3.; 4., 0., -4.];
disp('Qin = ');
disp(Qin);
vRin = [3.,7.,0.];
disp('vRin = ');
disp(vRin);
disp('Rin = diag(vRin);:');
Rin = diag(vRin);
Qout = [-4., 1., 3.; 6., -8., 2.; 3., 7., -10.];
disp('Qout = ');
disp(Qout);
vRout = [1.,7.,15.];
disp('vRout = ');
disp(vRout);
disp('Rout = diag(vRout);:');
Rout = diag(vRout);
lambd = sum(CTMCSolve(Qin)*Rin);
disp('Test:');
disp('-----');
disp('[fld, flm] = FluFluQueue(Qin, Rin, Qout, Rout, false, ''flDistr'', (0.:0.1:1.), ''flMoms'', 5);:');
[fld, flm] = FluFluQueue(Qin, Rin, Qout, Rout, false, 'flDistr', (0.:0.1:1.), 'flMoms', 5);
disp('fld = ');
disp(fld);
disp('flm = ');
disp(flm);
disp('[alphap, Ap] = FluFluQueue(Qin, Rin, Qout, Rout, false, ''flDistrPH'');:');
[alphap, Ap] = FluFluQueue(Qin, Rin, Qout, Rout, false, 'flDistrPH');
disp('alphap = ');
disp(alphap);
disp('Ap = ');
disp(Ap);
disp('[alpha, A] = FluFluQueue(Qin, Rin, Qout, Rout, false, ''flDistrME'');:');
[alpha, A] = FluFluQueue(Qin, Rin, Qout, Rout, false, 'flDistrME');
disp('alpha = ');
disp(alpha);
disp('A = ');
disp(A);
disp('fldFromPH = CdfFromPH(alphap, Ap, (0.:0.1:1.));:');
fldFromPH = CdfFromPH(alphap, Ap, (0.:0.1:1.));
disp('fldFromPH = ');
disp(fldFromPH);
disp('flmFromME = MomentsFromME(alpha, A, 5);:');
flmFromME = MomentsFromME(alpha, A, 5);
disp('flmFromME = ');
disp(flmFromME);
disp('[std, stm] = FluFluQueue(Qin, Rin, Qout, Rout, false, ''stDistr'', (0.:0.1:1.), ''stMoms'', 5);:');
[std, stm] = FluFluQueue(Qin, Rin, Qout, Rout, false, 'stDistr', (0.:0.1:1.), 'stMoms', 5);
disp('std = ');
disp(std);
disp('stm = ');
disp(stm);
disp('[betap, Bp] = FluFluQueue(Qin, Rin, Qout, Rout, false, ''stDistrPH'');:');
[betap, Bp] = FluFluQueue(Qin, Rin, Qout, Rout, false, 'stDistrPH');
disp('betap = ');
disp(betap);
disp('Bp = ');
disp(Bp);
disp('[beta, B] = FluFluQueue(Qin, Rin, Qout, Rout, false, ''stDistrME'');:');
[beta, B] = FluFluQueue(Qin, Rin, Qout, Rout, false, 'stDistrME');
disp('beta = ');
disp(beta);
disp('B = ');
disp(B);
disp('stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));:');
stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));
disp('stdFromPH = ');
disp(stdFromPH);
disp('stmFromME = MomentsFromME(beta, B, 5);:');
stmFromME = MomentsFromME(beta, B, 5);
disp('stmFromME = ');
disp(stmFromME);
assert(CheckMERepresentation(alpha, A), 'FluFluQueue: invalid ME representation of the queue length!');
assert(CheckMERepresentation(beta, B), 'FluFluQueue: invalid ME representation of the sojourn time!');
assert(CheckPHRepresentation(alphap, Ap), 'FluFluQueue: invalid PH representation of the queue length!');
assert(CheckPHRepresentation(betap, Bp), 'FluFluQueue: invalid PH representation of the sojourn time!');
assert(abs(flm(1)-stm(1)*lambd)<10^-12, 'FluFluQueue: Little formula does not hold!');
assert(norm((MomentsFromPH(alphap, Ap, 5)-flmFromME)./flmFromME)<10^-12, 'FluFluQueue: the ME and PH representations are not equal!');
assert(norm((MomentsFromPH(betap, Bp, 5)-stmFromME)./stmFromME)<10^-12, 'FluFluQueue: the ME and PH representations are not equal!');
assert(norm(fld-CdfFromME(alpha, A, (0.:0.1:1.)))<10^-12, 'FluFluQueue: flDistr returns wrong queue length distribution!');
assert(norm(std-CdfFromME(beta, B, (0.:0.1:1.)))<10^-12, 'FluFluQueue: stDistr returns wrong sojourn time distribution!');
assert(norm((flm-flmFromME)./flm)<10^-12, 'FluFluQueue: flmoms returns wrong queue length moments!');
assert(norm((stm-stmFromME)./stm)<10^-12, 'FluFluQueue: stMoms returns wrong sojourn time moments!');
Iin = eye(size(Qin,1));
Iout = eye(size(Qout,1));
BuToolsVerbose = false;
[gamma, G] = FluidQueue(kron(Qin, Iout)+kron(Iin, Qout), kron(Rin, Iout), kron(Iin, Rout), 'stDistrME');
BuToolsVerbose = true;
msmall = MomentsFromME(beta, B, 5);
mlarge = MomentsFromME(gamma, G, 5);
assert(norm((msmall-mlarge)./msmall)<10^-12, 'FluFluQueue: Large and small model do not give the same results!');
disp('Test:');
disp('-----');
disp('[fld, flm] = FluFluQueue(Qin, Rin, Qout, Rout, true, ''flDistr'', (0.:0.1:1.), ''flMoms'', 5);:');
[fld, flm] = FluFluQueue(Qin, Rin, Qout, Rout, true, 'flDistr', (0.:0.1:1.), 'flMoms', 5);
disp('fld = ');
disp(fld);
disp('flm = ');
disp(flm);
disp('[alphap, Ap] = FluFluQueue(Qin, Rin, Qout, Rout, true, ''flDistrPH'');:');
[alphap, Ap] = FluFluQueue(Qin, Rin, Qout, Rout, true, 'flDistrPH');
disp('alphap = ');
disp(alphap);
disp('Ap = ');
disp(Ap);
disp('[alpha, A] = FluFluQueue(Qin, Rin, Qout, Rout, true, ''flDistrME'');:');
[alpha, A] = FluFluQueue(Qin, Rin, Qout, Rout, true, 'flDistrME');
disp('alpha = ');
disp(alpha);
disp('A = ');
disp(A);
disp('fldFromPH = CdfFromPH(alphap, Ap, (0.:0.1:1.));:');
fldFromPH = CdfFromPH(alphap, Ap, (0.:0.1:1.));
disp('fldFromPH = ');
disp(fldFromPH);
disp('flmFromME = MomentsFromME(alpha, A, 5);:');
flmFromME = MomentsFromME(alpha, A, 5);
disp('flmFromME = ');
disp(flmFromME);
disp('[std, stm] = FluFluQueue(Qin, Rin, Qout, Rout, true, ''stDistr'', (0.:0.1:1.), ''stMoms'', 5);:');
[std, stm] = FluFluQueue(Qin, Rin, Qout, Rout, true, 'stDistr', (0.:0.1:1.), 'stMoms', 5);
disp('std = ');
disp(std);
disp('stm = ');
disp(stm);
disp('[betap, Bp] = FluFluQueue(Qin, Rin, Qout, Rout, true, ''stDistrPH'');:');
[betap, Bp] = FluFluQueue(Qin, Rin, Qout, Rout, true, 'stDistrPH');
disp('betap = ');
disp(betap);
disp('Bp = ');
disp(Bp);
disp('[beta, B] = FluFluQueue(Qin, Rin, Qout, Rout, true, ''stDistrME'');:');
[beta, B] = FluFluQueue(Qin, Rin, Qout, Rout, true, 'stDistrME');
disp('beta = ');
disp(beta);
disp('B = ');
disp(B);
disp('stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));:');
stdFromPH = CdfFromPH(betap, Bp, (0.:0.1:1.));
disp('stdFromPH = ');
disp(stdFromPH);
disp('stmFromME = MomentsFromME(beta, B, 5);:');
stmFromME = MomentsFromME(beta, B, 5);
disp('stmFromME = ');
disp(stmFromME);
assert(CheckMERepresentation(alpha, A), 'FluFluQueue: invalid ME representation of the queue length!');
assert(CheckMERepresentation(beta, B), 'FluFluQueue: invalid ME representation of the sojourn time!');
assert(CheckPHRepresentation(alphap, Ap), 'FluFluQueue: invalid PH representation of the queue length!');
assert(CheckPHRepresentation(betap, Bp), 'FluFluQueue: invalid PH representation of the sojourn time!');
assert(abs(flm(1)-stm(1)*lambd)<10^-12, 'FluFluQueue: Little formula does not hold!');
assert(norm((MomentsFromPH(alphap, Ap, 5)-flmFromME)./flmFromME)<10^-12, 'FluFluQueue: the ME and PH representations are not equal!');
assert(norm((MomentsFromPH(betap, Bp, 5)-stmFromME)./stmFromME)<10^-12, 'FluFluQueue: the ME and PH representations are not equal!');
assert(norm(fld-CdfFromME(alpha, A, (0.:0.1:1.)))<10^-12, 'FluFluQueue: flDistr returns wrong queue length distribution!');
assert(norm(std-CdfFromME(beta, B, (0.:0.1:1.)))<10^-12, 'FluFluQueue: stDistr returns wrong sojourn time distribution!');
assert(norm((flm-flmFromME)./flm)<10^-12, 'FluFluQueue: flmoms returns wrong queue length moments!');
assert(norm((stm-stmFromME)./stm)<10^-12, 'FluFluQueue: stMoms returns wrong sojourn time moments!');
Iin = eye(size(Qin,1));
Iout = eye(size(Qout,1));
BuToolsVerbose = false;
[gamma, G] = FluidQueue(kron(Qin, Iout)+kron(Iin, Qout), kron(Rin, Iout), kron(Iin, Rout), 'Q0', kron(Qin, Iout)+kron(Rin, pinv(Rout)*Qout), 'stDistrME');
BuToolsVerbose = true;
msmall = MomentsFromME(beta, B, 5);
mlarge = MomentsFromME(gamma, G, 5);
assert(norm((msmall-mlarge)./msmall)<10^-12, 'FluFluQueue: Large and small model do not give the same results!');

