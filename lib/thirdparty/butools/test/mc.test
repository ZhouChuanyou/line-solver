// inputmsg: indicates the beginning of input parameters. Just prints a message, nothing else. For doc examples it is ignored.
// testmsg: indicates the beginning of input parameters. Just prints a message, nothing else. For doc examples it is ignored.
// defvec/defmat/defrange/defvar: define a parameter. If it is followed by @, it is printed to the screen, except for doc examples
// code: some source code. !: announce execution of code (except for doc examples), @: print output after executing the code

package MC

test CRPSolve

inputmsg
defmat@ Q # {{-4.3, 3.5, 0.8},{-8.4, 6.5, 1.9},{17.3, -12.7, -4.6}}
testmsg
code!@ ret = CRPSolve[Q]
print! ret.Q
assert Norm[ret.Q]<10^-12 # "The solution does not satisfy ret*Q=0!"

test DRPSolve

inputmsg
defmat@ Q # {{-0.9, 0.5, 1.4},{0.9, -0.9, 1},{0.3, 1.3, -0.6}}
testmsg
code!@ ret = DRPSolve[Q]
print! ret.Q - ret
assert Norm[ret.Q-ret]<10^-12 # "The solution does not satisfy ret*Q=ret!"

test CTMCSolve

inputmsg
defmat@ Q # {{-0.9, 0.5, 0.4},{0.9, -0.9, 0},{0.3, 0.3, -0.6}}
testmsg
code!@ ret = CTMCSolve[Q]
print! ret.Q
assert Norm[ret.Q]<10^-12 # "The solution does not satisfy ret*Q=0!"

test DTMCSolve

defmat@ Q # {{0.1, 0.5, 0.4},{0.9, 0.1, 0},{0.3, 0.3, 0.4}}
testmsg
code!@ ret = DTMCSolve[Q]
print! ret.Q - ret
assert Norm[ret.Q-ret]<10^-12 # "The solution does not satisfy ret*Q=ret!"

test CheckGenerator

inputmsg
defmat@ Q # {{-0.9, 0.2, 0.4},{0, 0.9, 0.9},{0, 0.6, -0.6}}
testmsg
code!@ flag=CheckGenerator[Q,True]
assert flag==False # "CheckGenerator did not detect bad row sum!"

inputmsg
defmat@ Q # {{-0.9, 0.5, 0.4},{0.9, -0.9, 0},{0.3, 0.3, -0.6}}
testmsg
code!@ flag=CheckGenerator[Q,True]
assert flag==True # "CheckGenerator did not recognize a valid input!"

inputmsg
defmat@ Q # {{-0.9, 0.2, 0.4},{0.9, -0.9, 0},{0.3, 0.3, -0.6}}
testmsg
code!@ flag=CheckGenerator[Q,True]
assert flag==True # "CheckGenerator did not recognize a valid input!"

inputmsg
defmat@ Q # {{-0.9, 0.5, 0.4},{0.9, -1.1, 0},{0.3, 0.3, -0.6}}
testmsg
code!@ flag=CheckGenerator[Q]
assert flag==False # "CheckGenerator did not recognize the non-zero row sum!"

inputmsg
defmat@ Q # {{-0.9, 0.5, 0.4},{0.9, -0.9, 0},{0.3, 0.3, -0.6}}
testmsg
code!@ flag=CheckGenerator[Q]
assert flag==True # "CheckGenerator did not recognize a valid input!"

test CheckProbMatrix

inputmsg
defmat@ Q # {{0.1, 0.5, 0.4},{0.9, 0.1, 0},{0.3, -0.1, 0.4}}
testmsg
code!@ flag=CheckProbMatrix[Q]
assert flag==False # "CheckProbMatrix did not recognize the negative entry!"

inputmsg
defmat@ Q # {{0.1, 0.5, 0.4},{0.9, 0.1, 0},{0.3, 0.1, 0.4}}
testmsg
code!@ flag=CheckProbMatrix[Q]
assert flag==False # "CheckProbMatrix did not recognize the invalid row sum!"

inputmsg
defmat@ Q # {{0.1, 0.5, 0.4},{0.9, 0.1, 0},{0.3, 0.3, 0.4}}
testmsg
code!@ flag=CheckProbMatrix[Q]
assert flag==True # "CheckProbMatrix did not recognize that the input is valid!"

inputmsg
defmat Q # {{0.1, 0.5, 0.4},{0.9, 0.1, 0},{0.3, 0.3, 0.4}}
testmsg
code!@ flag=CheckProbMatrix[Q,True]
assert flag==False # "CheckProbMatrix did not recognize wrong transient matrix!"

inputmsg
defmat@ Q # {{0.1, 0.5, 0.4},{0.9, 0.1, 0},{0.3, 0.1, 0.4}}
testmsg
code!@ flag=CheckProbMatrix[Q,True]
assert flag==True # "CheckProbMatrix did not recognize that the input is valid!"

test CheckProbVector

inputmsg
defvec Q # {1.1, -0.1}
testmsg
code!@ flag=CheckProbVector[Q]
assert flag==False # "CheckProbVector did not recognize the negative entry!"

inputmsg
defvec@ Q # {1.1, 0.1}
testmsg
code!@ flag=CheckProbVector[Q]
assert flag==False # "CheckProbVector did not recognize invalid sum!"

inputmsg
defvec@ Q # {1, 0}
testmsg
code!@ flag=CheckProbVector[Q]
assert flag==True # "CheckProbVector did not recognize that the input is valid!"

inputmsg
defvec@ Q # {0.9, -0.1}
testmsg
code!@ flag=CheckProbVector[Q,True]
assert flag==False # "CheckProbVector did not recognize the negative entry!"

inputmsg
defvec@ Q # {0.9, 0.1}
testmsg
code!@ flag=CheckProbVector[Q,True]
assert flag==True # "CheckProbVector did not recognize that the prob. vector is not transient!"

inputmsg
defvec@ Q # {0.8, 0.1}
testmsg
code!@ flag=CheckProbVector[Q,True]
assert flag==True # "CheckProbVector did not recognize that the input is valid!"

