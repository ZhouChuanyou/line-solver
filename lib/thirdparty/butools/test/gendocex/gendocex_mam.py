import sys
sys.path.append("/home/gabor/github/butools/Python")
import math
import numpy as np
import numpy.matlib as ml
import matplotlib.pyplot as plt
import butools
from butools.utils import *
from butools.ph import *
from butools.dph import *
from butools.map import *
from butools.moments import *
from butools.reptrans import*
from butools.mc import *
from butools.dmap import *
from butools.trace import *
from butools.mam import *
from butools.queues import *
from butools.fitting import *
from contextlib import redirect_stdout
import os


print('---BuTools: MAM package test file---')
print('Enable the verbose messages with the BuToolsVerbose flag')
butools.verbose = True
print('Enable input parameter checking with the BuToolsCheckInput flag')
butools.checkInput = True
np.set_printoptions(precision=5,linewidth=1024)
outFile = open('/home/gabor/github/butools/test/docex/MAM_python.docex','w')
with redirect_stdout(outFile):
    print('=== QBDFundamentalMatrices ===')
    print('>>> B = ml.matrix([[0., 0.],[3., 4.]])')
    B = ml.matrix([[0., 0.],[3., 4.]])
    print('>>> L = ml.matrix([[-6., 5.],[3., -12.]])')
    L = ml.matrix([[-6., 5.],[3., -12.]])
    print('>>> F = ml.matrix([[1., 0.],[2., 0.]])')
    F = ml.matrix([[1., 0.],[2., 0.]])
    print('>>> L0 = ml.matrix([[-6., 5.],[6., -8.]])')
    L0 = ml.matrix([[-6., 5.],[6., -8.]])
    print('>>> R, G, U = QBDFundamentalMatrices(B, L, F, "RGU")')
    R, G, U = QBDFundamentalMatrices(B, L, F, "RGU")
    print('>>> print(R)')
    print(R)
    print('>>> print(G)')
    print(G)
    print('>>> print(U)')
    print(U)
    print('=== QBDSolve ===')
    print('>>> B = ml.matrix([[0., 0.],[3., 4.]])')
    B = ml.matrix([[0., 0.],[3., 4.]])
    print('>>> L = ml.matrix([[-6., 5.],[3., -12.]])')
    L = ml.matrix([[-6., 5.],[3., -12.]])
    print('>>> F = ml.matrix([[1., 0.],[2., 0.]])')
    F = ml.matrix([[1., 0.],[2., 0.]])
    print('>>> L0 = ml.matrix([[-6., 5.],[6., -8.]])')
    L0 = ml.matrix([[-6., 5.],[6., -8.]])
    print('>>> pi0, R = QBDSolve(B, L, F, L0)')
    pi0, R = QBDSolve(B, L, F, L0)
    print('>>> print(pi0)')
    print(pi0)
    print('>>> print(R)')
    print(R)
    print('=== QBDStationaryDistr ===')
    print('>>> B = ml.matrix([[0., 0.],[3., 4.]])')
    B = ml.matrix([[0., 0.],[3., 4.]])
    print('>>> L = ml.matrix([[-6., 5.],[3., -12.]])')
    L = ml.matrix([[-6., 5.],[3., -12.]])
    print('>>> F = ml.matrix([[1., 0.],[2., 0.]])')
    F = ml.matrix([[1., 0.],[2., 0.]])
    print('>>> L0 = ml.matrix([[-6., 5.],[6., -8.]])')
    L0 = ml.matrix([[-6., 5.],[6., -8.]])
    print('>>> pi = QBDStationaryDistr(pi0, R, 5)')
    pi = QBDStationaryDistr(pi0, R, 5)
    print('>>> print(pi)')
    print(pi)
    print('=== MG1FundamentalMatrix ===')
    print('>>> A0 = ml.matrix([[0.4, 0.2],[0.3, 0.4]])')
    A0 = ml.matrix([[0.4, 0.2],[0.3, 0.4]])
    print('>>> A1 = ml.matrix([[0., 0.1],[0., 0.]])')
    A1 = ml.matrix([[0., 0.1],[0., 0.]])
    print('>>> A2 = ml.matrix([[0., 0.2],[0., 0.2]])')
    A2 = ml.matrix([[0., 0.2],[0., 0.2]])
    print('>>> A3 = ml.matrix([[0.1, 0.],[0.1, 0.]])')
    A3 = ml.matrix([[0.1, 0.],[0.1, 0.]])
    print('>>> A = [A0, A1, A2, A3]')
    A = [A0, A1, A2, A3]
    print('>>> G = MG1FundamentalMatrix(A)')
    G = MG1FundamentalMatrix(A)
    print('>>> print(G)')
    print(G)
    print('=== MG1StationaryDistr ===')
    print('>>> B0 = ml.matrix([[0.1, 0.5],[0.3, 0.4]])')
    B0 = ml.matrix([[0.1, 0.5],[0.3, 0.4]])
    print('>>> B1 = ml.matrix([[0., 0.1],[0., 0.]])')
    B1 = ml.matrix([[0., 0.1],[0., 0.]])
    print('>>> B2 = ml.matrix([[0.2, 0.],[0., 0.2]])')
    B2 = ml.matrix([[0.2, 0.],[0., 0.2]])
    print('>>> B3 = ml.matrix([[0., 0.1],[0.1, 0.]])')
    B3 = ml.matrix([[0., 0.1],[0.1, 0.]])
    print('>>> A0 = ml.matrix([[0.4, 0.2],[0.3, 0.4]])')
    A0 = ml.matrix([[0.4, 0.2],[0.3, 0.4]])
    print('>>> A1 = ml.matrix([[0., 0.1],[0., 0.]])')
    A1 = ml.matrix([[0., 0.1],[0., 0.]])
    print('>>> A2 = ml.matrix([[0., 0.2],[0., 0.2]])')
    A2 = ml.matrix([[0., 0.2],[0., 0.2]])
    print('>>> A3 = ml.matrix([[0.1, 0.],[0.1, 0.]])')
    A3 = ml.matrix([[0.1, 0.],[0.1, 0.]])
    print('>>> B = [B0, B1, B2, B3]')
    B = [B0, B1, B2, B3]
    print('>>> A = [A0, A1, A2, A3]')
    A = [A0, A1, A2, A3]
    print('>>> G = MG1FundamentalMatrix(A)')
    G = MG1FundamentalMatrix(A)
    print('>>> print(G)')
    print(G)
    print('>>> pi = MG1StationaryDistr(A, B, G, 300)')
    pi = MG1StationaryDistr(A, B, G, 300)
    print('=== GM1FundamentalMatrix ===')
    print('>>> A0 = ml.matrix([[0.1, 0.],[0., 0.1]])')
    A0 = ml.matrix([[0.1, 0.],[0., 0.1]])
    print('>>> A1 = ml.matrix([[0., 0.2],[0., 0.2]])')
    A1 = ml.matrix([[0., 0.2],[0., 0.2]])
    print('>>> A2 = ml.matrix([[0., 0.1],[0., 0.]])')
    A2 = ml.matrix([[0., 0.1],[0., 0.]])
    print('>>> A3 = ml.matrix([[0.3, 0.2],[0.3, 0.2]])')
    A3 = ml.matrix([[0.3, 0.2],[0.3, 0.2]])
    print('>>> A4 = ml.matrix([[0., 0.1],[0.2, 0.]])')
    A4 = ml.matrix([[0., 0.1],[0.2, 0.]])
    print('>>> A = [A0, A1, A2, A3, A4]')
    A = [A0, A1, A2, A3, A4]
    print('>>> R = GM1FundamentalMatrix(A)')
    R = GM1FundamentalMatrix(A)
    print('>>> print(R)')
    print(R)
    print('=== GM1StationaryDistr ===')
    print('>>> B0 = ml.matrix([[0.7, 0.2],[0.3, 0.6]])')
    B0 = ml.matrix([[0.7, 0.2],[0.3, 0.6]])
    print('>>> B1 = ml.matrix([[0.3, 0.4],[0.5, 0.2]])')
    B1 = ml.matrix([[0.3, 0.4],[0.5, 0.2]])
    print('>>> B2 = ml.matrix([[0.2, 0.4],[0.1, 0.6]])')
    B2 = ml.matrix([[0.2, 0.4],[0.1, 0.6]])
    print('>>> B3 = ml.matrix([[0., 0.1],[0.2, 0.]])')
    B3 = ml.matrix([[0., 0.1],[0.2, 0.]])
    print('>>> A0 = ml.matrix([[0.1, 0.],[0., 0.1]])')
    A0 = ml.matrix([[0.1, 0.],[0., 0.1]])
    print('>>> A1 = ml.matrix([[0., 0.2],[0., 0.2]])')
    A1 = ml.matrix([[0., 0.2],[0., 0.2]])
    print('>>> A2 = ml.matrix([[0., 0.1],[0., 0.]])')
    A2 = ml.matrix([[0., 0.1],[0., 0.]])
    print('>>> A3 = ml.matrix([[0.3, 0.2],[0.3, 0.2]])')
    A3 = ml.matrix([[0.3, 0.2],[0.3, 0.2]])
    print('>>> A4 = ml.matrix([[0., 0.1],[0.2, 0.]])')
    A4 = ml.matrix([[0., 0.1],[0.2, 0.]])
    print('>>> B = [B0, B1, B2, B3]')
    B = [B0, B1, B2, B3]
    print('>>> A = [A0, A1, A2, A3, A4]')
    A = [A0, A1, A2, A3, A4]
    print('>>> R = GM1FundamentalMatrix(A)')
    R = GM1FundamentalMatrix(A)
    print('>>> print(R)')
    print(R)
    print('>>> pi = GM1StationaryDistr(B, R, 300)')
    pi = GM1StationaryDistr(B, R, 300)
    print('=== FluidFundamentalMatrices ===')
    print('>>> Fpp = ml.matrix([[-5., 1.],[2., -3.]])')
    Fpp = ml.matrix([[-5., 1.],[2., -3.]])
    print('>>> Fpm = ml.matrix([[2., 1., 1.],[1., 0., 0.]])')
    Fpm = ml.matrix([[2., 1., 1.],[1., 0., 0.]])
    print('>>> Fmm = ml.matrix([[-8., 4., 1.],[2., -12., 3.],[2., 0., -2.]])')
    Fmm = ml.matrix([[-8., 4., 1.],[2., -12., 3.],[2., 0., -2.]])
    print('>>> Fmp = ml.matrix([[3., 0.],[2., 5.],[0., 0.]])')
    Fmp = ml.matrix([[3., 0.],[2., 5.],[0., 0.]])
    print('>>> Psi, K, U = FluidFundamentalMatrices(Fpp, Fpm, Fmp, Fmm, "PKU")')
    Psi, K, U = FluidFundamentalMatrices(Fpp, Fpm, Fmp, Fmm, "PKU")
    print('>>> print(Psi)')
    print(Psi)
    print('>>> print(K)')
    print(K)
    print('>>> print(U)')
    print(U)
    print('=== FluidSolve ===')
    print('>>> Fpp = ml.matrix([[-5., 1.],[2., -3.]])')
    Fpp = ml.matrix([[-5., 1.],[2., -3.]])
    print('>>> Fpm = ml.matrix([[2., 1., 1.],[1., 0., 0.]])')
    Fpm = ml.matrix([[2., 1., 1.],[1., 0., 0.]])
    print('>>> Fmm = ml.matrix([[-8., 4., 1.],[2., -12., 3.],[2., 0., -2.]])')
    Fmm = ml.matrix([[-8., 4., 1.],[2., -12., 3.],[2., 0., -2.]])
    print('>>> Fmp = ml.matrix([[3., 0.],[2., 5.],[0., 0.]])')
    Fmp = ml.matrix([[3., 0.],[2., 5.],[0., 0.]])
    print('>>> x = 0.7')
    x = 0.7
    print('>>> mass0, ini, K, clo = FluidSolve(Fpp, Fpm, Fmp, Fmm)')
    mass0, ini, K, clo = FluidSolve(Fpp, Fpm, Fmp, Fmm)
    print('>>> print(mass0)')
    print(mass0)
    print('>>> print(ini)')
    print(ini)
    print('>>> print(K)')
    print(K)
    print('>>> print(clo)')
    print(clo)
    print('>>> pdfAtX = ini*la.expm(K*x)*clo')
    pdfAtX = ini*la.expm(K*x)*clo
    print('>>> print(pdfAtX)')
    print(pdfAtX)
    print('=== GeneralFluidSolve ===')
    print('>>> Q = ml.matrix([[-6., 1., 3., 2., 0., 0.],[6., -10., 2., 0., 2., 0.],[3., 7., -12., 0., 0., 2.],[5., 0., 0., -9., 1., 3.],[0., 5., 0., 6., -13., 2.],[0., 0., 5., 3., 7., -15.]])')
    Q = ml.matrix([[-6., 1., 3., 2., 0., 0.],[6., -10., 2., 0., 2., 0.],[3., 7., -12., 0., 0., 2.],[5., 0., 0., -9., 1., 3.],[0., 5., 0., 6., -13., 2.],[0., 0., 5., 3., 7., -15.]])
    print('>>> R = ml.matrix([[2., 0., 0., 0., 0., 0.],[0., -4., 0., 0., 0., 0.],[0., 0., -12., 0., 0., 0.],[0., 0., 0., 6., 0., 0.],[0., 0., 0., 0., 0., 0.],[0., 0., 0., 0., 0., -8.]])')
    R = ml.matrix([[2., 0., 0., 0., 0., 0.],[0., -4., 0., 0., 0., 0.],[0., 0., -12., 0., 0., 0.],[0., 0., 0., 6., 0., 0.],[0., 0., 0., 0., 0., 0.],[0., 0., 0., 0., 0., -8.]])
    print('>>> x = 0.7')
    x = 0.7
    print('>>> mass0, ini, K, clo = GeneralFluidSolve(Q, R)')
    mass0, ini, K, clo = GeneralFluidSolve(Q, R)
    print('>>> print(mass0)')
    print(mass0)
    print('>>> print(ini)')
    print(ini)
    print('>>> print(K)')
    print(K)
    print('>>> print(clo)')
    print(clo)
    print('>>> pdfAtX = ini*la.expm(K*x)*clo')
    pdfAtX = ini*la.expm(K*x)*clo
    print('>>> print(pdfAtX)')
    print(pdfAtX)
    print('=== FluidStationaryDistr ===')
    print('>>> Q = ml.matrix([[-6., 1., 3., 2., 0., 0.],[6., -10., 2., 0., 2., 0.],[3., 7., -12., 0., 0., 2.],[5., 0., 0., -9., 1., 3.],[0., 5., 0., 6., -13., 2.],[0., 0., 5., 3., 7., -15.]])')
    Q = ml.matrix([[-6., 1., 3., 2., 0., 0.],[6., -10., 2., 0., 2., 0.],[3., 7., -12., 0., 0., 2.],[5., 0., 0., -9., 1., 3.],[0., 5., 0., 6., -13., 2.],[0., 0., 5., 3., 7., -15.]])
    print('>>> R = ml.matrix([[2., 0., 0., 0., 0., 0.],[0., -4., 0., 0., 0., 0.],[0., 0., -12., 0., 0., 0.],[0., 0., 0., 6., 0., 0.],[0., 0., 0., 0., 0., 0.],[0., 0., 0., 0., 0., -8.]])')
    R = ml.matrix([[2., 0., 0., 0., 0., 0.],[0., -4., 0., 0., 0., 0.],[0., 0., -12., 0., 0., 0.],[0., 0., 0., 6., 0., 0.],[0., 0., 0., 0., 0., 0.],[0., 0., 0., 0., 0., -8.]])
    print('>>> x = np.arange(0.0,31.0,1.0)')
    x = np.arange(0.0,31.0,1.0)
    print('>>> mass0, ini, K, clo = GeneralFluidSolve(Q, R)')
    mass0, ini, K, clo = GeneralFluidSolve(Q, R)
    print('>>> print(mass0)')
    print(mass0)
    print('>>> print(ini)')
    print(ini)
    print('>>> print(K)')
    print(K)
    print('>>> print(clo)')
    print(clo)
    print('>>> y = FluidStationaryDistr(mass0, ini, K, clo, x)')
    y = FluidStationaryDistr(mass0, ini, K, clo, x)
    print('>>> print(y)')
    print(y)
    pi = CTMCSolve(Q)

