
package DPH

test MomentsFromMG

inputmsg
defvec@ a #  {-0.6, 0.3, 1.3}
defmat@ A # {{0.25, 0.2, -0.15},{0.3, 0.1, 0.25},{0, 0.2, 0.47}}
testmsg    
code!@ moms=MomentsFromMG[a,A]
assert CheckMoments[moms]==True # "The function returned invalid moments!"
testmsg
code!@ moms=MomentsFromMG[a,A,3]
assert CheckMoments[moms]==True # "The function returned invalid moments!"

test MomentsFromDPH

inputmsg
defvec@ a # {0.76, 0, 0.24}
defmat@ A # {{0.34, 0.66, 0},{0.79, 0.05, 0.07},{0.26, 0.73, 0.01}}
testmsg    
code!@ moms=MomentsFromDPH[a,A,5]
assert CheckMoments[moms]==True # "The function returned invalid moments!"

test PmfFromMG

inputmsg
defvec@ a # {-0.6, 0.3, 1.3}
defmat@ A # {{0.25, 0.2, -0.15},{0.3, 0.1, 0.25},{0, 0.2, 0.47}}
defrange x # 0 # 100 # 1
testmsg    
code! pmf=PmfFromMG[a,A,x]
plot x # pmf
assert AllNonNegative[pmf] # "PmfFromMG returned negative pmf!"
assert Abs[Dot[x,pmf] - MomentsFromMG[a,A,1][[1]]]<10^-10 # "The mean computed from the pmf does not match the theoretical result!"

test PmfFromDPH

inputmsg
defvec@ a # {0.76, 0, 0.24}
defmat@ A # {{0.34, 0.66, 0},{0.79, 0.05, 0.07},{0.26, 0.73, 0.01}}
defrange x # 0 # 1000 # 1
testmsg    
code! pmf = PmfFromDPH[a,A,x]
plot x # pmf
assert AllNonNegative[pmf] # "PmfFromMG returned negative pmf!"
assert Abs[Dot[x,pmf] - MomentsFromDPH[a,A,1][[1]]]<10^-10 # "The mean computed from the pmf does not match the theoretical result!"

test CdfFromMG

inputmsg
defvec@ a # {-0.6, 0.3, 1.3}
defmat@ A # {{0.25, 0.2, -0.15},{0.3, 0.1, 0.25},{0, 0.2, 0.47}}
defrange x # 0 # 100 # 1
testmsg    
code! cdf=CdfFromMG[a,A,x]
plot x # cdf
assert AllNonNegative[Diff[cdf]] # "The cdf is not increasing monotonously!"
assert Abs[Total[1-cdf] - MomentsFromMG[a,A,1][[1]]]<10^-10 # "The mean computed from the cdf does not match the theoretical result!"

test CdfFromDPH

inputmsg
defvec@ a # {0.76, 0, 0.24}
defmat@ A # {{0.34, 0.66, 0},{0.79, 0.05, 0.07},{0.26, 0.73, 0.01}}
defrange x # 0 # 1000 # 1
testmsg
code! cdf=CdfFromDPH[a,A,x]
plot x # cdf
assert AllNonNegative[Diff[cdf]] # "The cdf is not increasing monotonously!"
assert Abs[Total[1-cdf] - MomentsFromDPH[a,A,1][[1]]]<10^-10 # "The mean computed from the cdf does not match the theoretical result!"

test RandomDPH

testmsg
code!@ {a,A}=RandomDPH[3,10,5]
assert CheckDPHRepresentation[a,A] # "RandomDPH failed to return a valid DPH representation!"
assert Max[Abs[MomentsFromDPH[a,A,1][[1]]-10]]<10^-14 # "RandomDPH failed to match the given mean value!"

test CheckMGRepresentation

inputmsg
defvec@ a # {-0.6, 0.3, 1.3}
defmat@ A # {{0.25, 0.2, -0.15},{0.3, 0.1, 0.25},{0, 0.2, 0.47}}
testmsg
code!@ flag=CheckMGRepresentation[a,A]
assert flag==True # "CheckMGRepresentation failed to recognize a valid MG distribution!"
inputmsg
defvec@ a # {-0.6, 0.3, 1.3}
defmat@ A # {{0.35, 0.2, -0.25},{0.3, 0.1, 0.25},{0, 0.2, 0.47}}
testmsg
code!@ flag=CheckMGRepresentation[a,A]
assert flag==False # "CheckMGRepresentation failed to recognize wrong eigenvalues!"

test CheckDPHRepresentation

inputmsg
defvec@ a # {0.48, 0.08, 0.26, 0.18}
defmat@ A # {{0, 0.08, 0.08, 0.8},{0.55, 0, 0.24, 0.19},{0.06, 0.03, 0, 0.001},{0.23, 0.005, 0.2, 0.53}}
testmsg
code!@ flag=CheckDPHRepresentation[a,A]
assert flag==True # "CheckDPHRepresentation failed to recognize a valid DPH distribution!"
inputmsg    
defvec@ a # {0.48, 0.08}
defmat@ A # {{0, 0.08},{0.55, 0.5}}
testmsg
code!@ flag=CheckDPHRepresentation[a,A]
assert flag==False # "CheckDPHRepresentation failed to recognize wrong row sums!"

test MGFromMoments

inputmsg    
deflist@ moms # {4.08, 20.41, 130.45, 1054.41, 10463.73}
testmsg
code!@ {a,A}=MGFromMoments[moms]
code!@ memoms = MomentsFromMG[a,A,5]
assert Norm[ToArray[moms]-ToArray[memoms]]<10^-9 # "The moments of the result of MGFromMoments do not match the input!"

test DPHFromMG

inputmsg
defvec@ a # {-0.6, 0.3, 1.3}
defmat@ A # {{0.1, 0.2, 0},{0.3, 0.1, 0.25},{-0.3, 0.2, 0.77}}
testmsg
code!@ flag=CheckMGRepresentation[a,A]
code!@ flag=CheckDPHRepresentation[a,A]
code!@ {b,B}=DPHFromMG[a,A]
code!@ flag=CheckDPHRepresentation[b,B]
code Cm=SimilarityMatrix[A,B]
code err1 = Norm[A.Cm-Cm.B]
code err2 = Norm[a.Cm-b]
print "Transformation errors:" # Max[err1,err2]
assert flag && err1<10^-12 && err2<10^-12 # "Transformation to DPH failed!"

test CanonicalFromDPH2

inputmsg
defvec@ a # {0, 1.0}
defmat@ A # {{0.23, 0.22},{0.41, 0.48}}
testmsg
code!@ {b,B}=CanonicalFromDPH2[a,A]
code!@ ev=Eigenvalues[A]
code!@ flag=CheckDPHRepresentation[b,B]
code Cm=SimilarityMatrix[A,B]
code err1 = Norm[A.Cm-Cm.B]
code err2 = Norm[a.Cm-b]
assert err1<10^-12 && err2<10^-12 # "Transformation to canonical DPH(2) failed!"
inputmsg
defvec@ a # {1.0, 0}
defmat@ A # {{0, 0.61},{0.56, 0.44}}
testmsg
code!@ {b,B}=CanonicalFromDPH2[a,A]
code!@ ev=Eigenvalues[A]
code!@ flag=CheckDPHRepresentation[b,B]
code Cm=SimilarityMatrix[A,B]
code err1 = Norm[A.Cm-Cm.B]
code err2 = Norm[a.Cm-b]
print "Transformation errors:" # Max[err1,err2]
assert err1<10^-12 && err2<10^-12 # "Transformation to canonical DPH(2) failed!"

test CanonicalFromDPH3

inputmsg
defvec@ a # {0.46, 0.22, 0.32}
defmat@ A # {{0.67, 0.01, 0.12},{0.06, 0.45, 0.15},{0.18, 0.43, 0.32}}
testmsg
code!@ {b,B}=CanonicalFromDPH3[a,A]
code!@ ev=Eigenvalues[A]
code!@ flag=CheckDPHRepresentation[b,B]
code Cm=SimilarityMatrix[A,B]
code err1 = Norm[A.Cm-Cm.B]
code err2 = Norm[a.Cm-b]
print "Transformation errors:" # Max[err1,err2]
assert flag && err1<10^-12 && err2<10^-12 # "Transformation to canonical DPH(3) failed!"
inputmsg
defvec@ a # {0.76, 0.12, 0.12}
defmat@ A # {{0.31, 0., 0.},{0.98, 0., 0.02},{0.88, 0.04, 0.08}}
testmsg
code!@ {b,B}=CanonicalFromDPH3[a,A]
code!@ ev=Eigenvalues[A]
code!@ flag=CheckDPHRepresentation[b,B]
code Cm=SimilarityMatrix[A,B]
code err1 = Norm[A.Cm-Cm.B]
code err2 = Norm[a.Cm-b]
print "Transformation errors:" # Max[err1,err2]
assert flag && err1<10^-12 && err2<10^-12 # "Transformation to canonical DPH(3) failed!"
inputmsg
defvec@ a # {0.67, 0.07, 0.26}
defmat@ A # {{0.31, 0., 0.},{0.98, 0., 0.02},{0.88, 0.04, 0.08}}
testmsg
code!@ {b,B}=CanonicalFromDPH3[a,A]
code!@ ev=Eigenvalues[A]
code!@ flag=CheckDPHRepresentation[b,B]
code Cm=SimilarityMatrix[A,B]
code err1 = Norm[A.Cm-Cm.B]
code err2 = Norm[a.Cm-b]
print "Transformation errors:" # Max[err1,err2]
assert flag && err1<10^-12 && err2<10^-12 # "Transformation to canonical DPH(3) failed!"
inputmsg
defvec@ a # {0.78, 0.04, 0.18}
defmat@ A # {{0.06, 0.25, 0.31},{0.45, 0.18, 0.33},{0.98, 0, 0.01}}
testmsg
code!@ {b,B}=CanonicalFromDPH3[a,A]
code!@ ev=Eigenvalues[A]
code!@ flag=CheckDPHRepresentation[b,B]
code Cm=SimilarityMatrix[A,B]
code err1 = Norm[A.Cm-Cm.B]
code err2 = Norm[a.Cm-b]
print "Transformation errors:" # Max[err1,err2]
assert flag && err1<10^-12 && err2<10^-12 # "Transformation to canonical DPH(3) failed!"

test AcyclicDPHFromMG

inputmsg
defvec@ a # {0, 0, 1.0}
defmat@ A # {{0.22, 0, 0},{0.3, 0.1, 0.55},{0.26, 0, 0.73}}
testmsg
code!@ {b,B}=AcyclicDPHFromMG[a,A]
code!@ ma=MomentsFromMG[a,A,5]
code!@ mb=MomentsFromMG[b,B,5]
code!@ flag=CheckDPHRepresentation[b,B]
code Cm=SimilarityMatrix[A,B]
code err1 = Norm[A.Cm-Cm.B]
code err2 = Norm[a.Cm-b]
print "Transformation errors:" # Max[err1,err2]
assert err1<10^-12 && err2<10^-12 # "Transformation to canonical PH(3) failed!"

test DPH2From3Moments

inputmsg
defvec@ a # {0.9, 0.1}
defmat@ A # {{0.2, 0.61},{0.58, 0.41}}
testmsg
code!@ moms=MomentsFromDPH[a,A]
code!@ {b,B}=DPH2From3Moments[moms]
code!@ phmoms = MomentsFromDPH[b,B,3]
assert Norm[(ToArray[phmoms]-ToArray[moms])./ToArray[moms]]<10^-12 # "The moments of the result of DPH2From3Moments do not match the input!"

test DPH3From5Moments

inputmsg
defvec@ a # {0.7, 0.1, 0.2}
defmat@ A # {{0.2, 0.51, 0.1},{0.58, 0.41, 0},{0.1, 0.4, 0.3}}
testmsg
code!@ moms=MomentsFromDPH[a,A]
code!@ {b,B}=DPH3From5Moments[moms]
code!@ phmoms = MomentsFromMG[b,B,5]
assert Norm[(ToArray[phmoms]-ToArray[moms])./ToArray[moms]]<10^-12 # "The moments of the result of DPH3From5Moments do not match the input!"

test SamplesFromDPH

inputmsg
defvec@ a # {0.76, 0, 0.24}
defmat@ A # {{0.34, 0.66, 0},{0.79, 0.05, 0.07},{0.26, 0.73, 0.01}}
code! x=SamplesFromDPH[a,A,1000]
code!@ mt=MarginalMomentsFromTrace[x,3]
code!@ mp=MomentsFromDPH[a,A,3]

