=== QBDQueue ===
>>> B = ml.matrix([[6., 1., 0.],[0., 4., 1.],[2., 0., 0.]])
>>> F = ml.matrix([[0., 1., 1.],[5., 0., 0.],[1., 3., 0.]])
>>> L = ml.matrix([[-14., 3., 2.],[0., -14., 4.],[3., 1., -10.]])
>>> L0 = L+B
>>> print(L0)
[[ -8.   4.   2.]
 [  0. -10.   5.]
 [  5.   1. -10.]]
>>> ncd, ncm = QBDQueue(B, L, F, L0, "ncDistr", 11, "ncMoms", 5)
Final Residual Error for G:  9.71445146547e-17
Final Residual Error for R:  1.11022302463e-16
>>> print(ncd)
[ 0.29094  0.20433  0.14547  0.10358  0.07371  0.05246  0.03734  0.02657  0.01891  0.01346  0.00958]
>>> print(ncm)
[2.4600295202120317, 14.607919051794482, 128.87860443055746, 1515.8884540468425, 22287.969412532377]
>>> alphap, Ap = QBDQueue(B, L, F, L0, "ncDistrDPH")
Final Residual Error for G:  9.71445146547e-17
Final Residual Error for R:  1.11022302463e-16
>>> print(alphap)
[[ 0.28256  0.22386  0.20264]]
>>> print(Ap)
[[ 0.11832  0.4103   0.18373]
 [ 0.196    0.19477  0.32261]
 [ 0.27566  0.22146  0.21229]]
>>> alpha, A = QBDQueue(B, L, F, L0, "ncDistrMG")
Final Residual Error for G:  9.71445146547e-17
Final Residual Error for R:  1.11022302463e-16
>>> print(alpha)
[[ 0.04258 -0.27854  0.94503]]
>>> print(A)
[[-0.00569 -0.63242  1.33129]
 [ 0.06947 -0.36133  0.99875]
 [ 0.03735 -0.21854  0.8924 ]]
>>> ncdFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1))
>>> print(ncdFromDPH)
[ 0.29094  0.20433  0.14547  0.10358  0.07371  0.05246  0.03734  0.02657  0.01891  0.01346  0.00958]
>>> ncmFromMG = MomentsFromMG(alpha, A, 5)
>>> print(ncmFromMG)
[2.4600295202120313, 14.607919051794475, 128.87860443055737, 1515.8884540468407, 22287.969412532337]
>>> std, stm = QBDQueue(B, L, F, L0, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
Final Residual Error for G:  9.71445146547e-17
Final Residual Error for R:  1.11022302463e-16
>>> print(std)
[  1.11022e-16   1.42250e-01   2.57146e-01   3.54886e-01   4.39333e-01   5.12619e-01   5.76300e-01   6.31653e-01   6.79773e-01   7.21607e-01   7.57975e-01]
>>> print(stm)
[0.70235625432140525, 1.0017175985977307, 2.1462963079180937, 6.1325315761778585, 21.903161812239034]
>>> betap, Bp = QBDQueue(B, L, F, L0, "stDistrPH")
Final Residual Error for G:  9.71445146547e-17
Final Residual Error for R:  1.11022302463e-16
>>> print(betap)
[[ 0.52899  0.       0.       0.       0.35507  0.       0.       0.       0.11594]]
>>> print(Bp)
[[-12.59079   2.36197   0.50976   4.23487   0.39366   0.08496   3.        0.        0.     ]
 [  2.00101 -12.66159   0.95667   0.3335    4.22307   0.15944   0.        3.        0.     ]
 [  2.83542   0.93483 -13.59536   0.47257   0.15581   4.06744   0.        0.        3.     ]
 [  5.        0.        0.      -13.06053   1.57465   0.33984   4.23487   0.39366   0.08496]
 [  0.        5.        0.        1.33401 -13.10772   0.63778   0.3335    4.22307   0.15944]
 [  0.        0.        5.        1.89028   0.62322 -13.73024   0.47257   0.15581   4.06744]
 [  4.46974   0.78732   0.16992   4.        0.        0.      -10.        0.        0.     ]
 [  0.667     4.44614   0.31889   0.        4.        0.        0.      -10.        0.     ]
 [  0.94514   0.31161   4.13488   0.        0.        4.        0.        0.      -10.     ]]
>>> beta, B = QBDQueue(B, L, F, L0, "stDistrME")
Final Residual Error for G:  9.71445146547e-17
Final Residual Error for R:  1.11022302463e-16
>>> print(beta)
[[ 0.17391  0.47826 -0.71739  0.71739 -1.23913  1.23913 -1.23913  0.52174  1.06522]]
>>> print(B)
[[-12.59079  -0.41431  -3.40797   2.16504 -13.13561  15.      -13.40921  12.06606   1.34314]
 [  0.5517  -13.31488  -8.03859   7.34081 -10.01035  10.7136   -6.39935   0.03303   6.67157]
 [  0.20504  -1.88439 -15.35906   1.89388  -4.0612    3.46259  -0.19879   0.02202   4.44771]
 [ -0.28868   1.38111  -2.59572 -11.07296  -3.75595   3.46259  -1.37175  -3.25117   8.89385]
 [  0.48659  -1.37547  -1.39064   5.45219 -17.35131  -1.53741   2.85299  -3.4525    9.87045]
 [  1.59973  -0.77852  -1.61449   5.57247  -4.1872  -15.01224  -0.7327    0.5475    9.87045]
 [  1.07788  -2.14306   1.89721   1.99333  -1.67029   0.26853 -14.46294   0.5475    9.87045]
 [  2.00326  -1.99382   1.89721   1.99333  -5.90516   4.39982  -4.35937  -9.4525    9.87045]
 [  0.59557   0.82156  -1.10279   4.99333  -6.49163   4.93542  -4.30849   0.5475   -0.12955]]
>>> stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
>>> print(stdFromPH)
[  1.11022e-16   1.42250e-01   2.57146e-01   3.54886e-01   4.39333e-01   5.12619e-01   5.76300e-01   6.31653e-01   6.79773e-01   7.21607e-01   7.57975e-01]
>>> stmFromME = MomentsFromME(beta, B, 5)
>>> print(stmFromME)
[0.70235625432140614, 1.001717598597732, 2.1462963079180968, 6.1325315761778718, 21.903161812239095]
=== MAPMAP1 ===
>>> D0 = ml.matrix([[-8., 1., 2.],[0., -6., 4.],[3., 0., -3.]])
>>> D1 = ml.matrix([[4., 1., 0.],[0., 2., 0.],[0., 0., 0.]])
>>> S0 = ml.matrix([[-10., 4.],[0., -7.]])
>>> S1 = ml.matrix([[5., 1.],[4., 3.]])
>>> ncd, ncm = MAPMAP1(D0, D1, S0, S1, "ncDistr", 11, "ncMoms", 5)
Final Residual Error for G:  2.35922392733e-16
Final Residual Error for R:  1.31838984174e-16
>>> print(ncd)
[  6.76969e-01   1.88906e-01   7.95099e-02   3.25628e-02   1.31820e-02   5.30870e-03   2.13277e-03   8.55834e-04   3.43223e-04   1.37603e-04   5.51578e-05]
>>> print(ncm)
[0.54863953186413617, 1.3060488095463447, 4.3570044249027839, 19.192953582041419, 105.38633755592997]
>>> alphap, Ap = MAPMAP1(D0, D1, S0, S1, "ncDistrDPH")
Final Residual Error for G:  2.35922392733e-16
Final Residual Error for R:  1.31838984174e-16
>>> print(alphap)
[[ 0.06713  0.07533  0.0407   0.04705  0.03574  0.05708]]
>>> print(Ap)
[[ 0.2813   0.04629  0.00761  0.00345  0.       0.     ]
 [ 0.10552  0.33506  0.00835  0.01223  0.       0.     ]
 [ 0.17544  0.04581  0.13666  0.01056  0.       0.     ]
 [ 0.07984  0.20353  0.04227  0.16552  0.       0.     ]
 [ 0.20818  0.09183  0.05939  0.01352  0.       0.     ]
 [ 0.1325   0.20874  0.03479  0.06576  0.       0.     ]]
>>> alpha, A = MAPMAP1(D0, D1, S0, S1, "ncDistrMG")
Final Residual Error for G:  2.35922392733e-16
Final Residual Error for R:  1.31838984174e-16
>>> print(alpha)
[[ 0.1111   0.01048  0.10662 -0.80772  0.48646  0.41608]]
>>> print(A)
[[ 0.16291  0.02302  0.1119  -0.13707 -0.0046   0.28152]
 [-0.06844  0.32235 -0.06034  0.03752 -0.15214  0.35383]
 [-0.06027  0.1733   0.03581  0.02863 -0.12729  0.35975]
 [-0.05942  0.16196 -0.10712  0.18069 -0.1826   0.39939]
 [-0.05942  0.16196 -0.10712  0.18069 -0.1826   0.39939]
 [-0.05942  0.16196 -0.10712  0.18069 -0.1826   0.39939]]
>>> ncdFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1))
>>> print(ncdFromDPH)
[  6.76969e-01   1.88906e-01   7.95099e-02   3.25628e-02   1.31820e-02   5.30870e-03   2.13277e-03   8.55834e-04   3.43223e-04   1.37603e-04   5.51578e-05]
>>> ncmFromMG = MomentsFromMG(alpha, A, 5)
>>> print(ncmFromMG)
[0.54863953186413594, 1.3060488095463438, 4.3570044249027813, 19.192953582041405, 105.38633755592987]
>>> std, stm = MAPMAP1(D0, D1, S0, S1, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
Final Residual Error for G:  2.35922392733e-16
Final Residual Error for R:  1.31838984174e-16
>>> print(std)
[  1.11022e-16   3.12202e-01   5.31969e-01   6.83448e-01   7.86668e-01   8.56547e-01   9.03672e-01   9.35376e-01   9.56674e-01   9.70967e-01   9.80552e-01]
>>> print(stm)
[0.25907977893584216, 0.1314530565761404, 0.099109779753652538, 0.099177840959181612, 0.12375826425492886]
>>> betap, Bp = MAPMAP1(D0, D1, S0, S1, "stDistrPH")
Final Residual Error for G:  2.35922392733e-16
Final Residual Error for R:  1.31838984174e-16
>>> print(betap)
[[ 0.27119  0.39548  0.13559  0.19774]]
>>> print(Bp)
[[-8.18222  1.86886  0.12464  0.12862]
 [ 3.68562 -5.98538  0.04716  0.06365]
 [ 1.22519  1.28247 -9.05895  0.94899]
 [ 0.34891  0.66063  3.45018 -6.46249]]
>>> beta, B = MAPMAP1(D0, D1, S0, S1, "stDistrME")
Final Residual Error for G:  2.35922392733e-16
Final Residual Error for R:  1.31838984174e-16
>>> print(beta)
[[ 0.40071  0.26596  0.19675  0.13659  0.       0.     ]]
>>> print(B)
[[ -8.18222   4.60702   0.61259   0.21807   0.        0.     ]
 [  1.49509  -5.98538   0.51299   0.33032   0.        0.     ]
 [  0.24927   0.11789  -9.05895   4.31272   0.        0.     ]
 [  0.20579   0.1273    0.75919  -6.46249   0.        0.     ]
 [  0.5575    0.23374   0.18872   0.08081 -10.        4.     ]
 [  0.44853   0.30439   0.1539    0.09909   0.       -7.     ]]
>>> stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
>>> print(stdFromPH)
[ 0.       0.3122   0.53197  0.68345  0.78667  0.85655  0.90367  0.93538  0.95667  0.97097  0.98055]
>>> stmFromME = MomentsFromME(beta, B, 5)
>>> print(stmFromME)
[0.25907977893584216, 0.1314530565761404, 0.099109779753652524, 0.099177840959181612, 0.12375826425492886]
>>> delta = ml.matrix([[0.5,0.1,0.4]])
>>> Dm = ml.matrix([[-8., 1., 2.],[0., -6., 4.],[3., 0., -3.]])
>>> sigma = ml.matrix([[0.2,0.7,0.1]])
>>> S = ml.matrix([[-10., 4., 0.],[5., -7., 2.],[1., 2., -8.]])
>>> D0 = Dm
>>> D1 = np.sum(-Dm,1)*delta
>>> S0 = S
>>> S1 = np.sum(-S,1)*sigma
>>> ncd, ncm = MAPMAP1(D0, D1, S0, S1, "ncDistr", 11, "ncMoms", 5)
Final Residual Error for G:  1.80411241502e-16
Final Residual Error for R:  4.02455846427e-16
>>> print(ncd)
[ 0.33826  0.21299  0.1455   0.09849  0.06653  0.04492  0.03032  0.02047  0.01382  0.00933  0.0063 ]
>>> print(ncm)
[2.0439201904271491, 10.553791196138791, 80.619285377234021, 820.68947862198797, 10442.5288789529]
>>> alphap, Ap = MAPMAP1(D0, D1, S0, S1, "ncDistrDPH")
Final Residual Error for G:  1.80411241502e-16
Final Residual Error for R:  4.02455846427e-16
>>> print(alphap)
[[ 0.07473  0.11816  0.03706  0.01969  0.03096  0.00976  0.12199  0.18879  0.0606 ]]
>>> print(Ap)
[[ 0.26782  0.31102  0.05045  0.02823  0.0326   0.00532  0.       0.       0.     ]
 [ 0.12042  0.4268   0.05194  0.01269  0.04473  0.00547  0.       0.       0.     ]
 [ 0.09361  0.29656  0.24254  0.00987  0.03108  0.02556  0.       0.       0.     ]
 [ 0.25805  0.31793  0.0515   0.0272   0.03332  0.00543  0.       0.       0.     ]
 [ 0.12382  0.42297  0.05337  0.01305  0.04433  0.00562  0.       0.       0.     ]
 [ 0.09548  0.30306  0.2325   0.01006  0.03176  0.02451  0.       0.       0.     ]
 [ 0.22985  0.33605  0.05686  0.02423  0.03522  0.00599  0.       0.       0.     ]
 [ 0.13243  0.412    0.05857  0.01396  0.04318  0.00617  0.       0.       0.     ]
 [ 0.10836  0.32375  0.19362  0.01142  0.03393  0.02041  0.       0.       0.     ]]
>>> alpha, A = MAPMAP1(D0, D1, S0, S1, "ncDistrMG")
Final Residual Error for G:  1.80411241502e-16
Final Residual Error for R:  4.02455846427e-16
>>> print(alpha)
[[ 0.33539  0.11124 -0.11565  0.22684  0.04977 -0.83292 -2.21767  2.66121  0.44353]]
>>> print(A)
[[ 0.23011  0.17196 -0.04119  0.15685  0.08314 -1.04185 -1.00769  1.59319  0.53741]
 [ 0.09207  0.32509 -0.03164  0.06726  0.14976 -1.33616 -0.52827  1.44212  0.49554]
 [ 0.09367  0.13219  0.17527  0.06844  0.0638  -1.13474 -0.53458  1.00888  0.79874]
 [ 0.1138   0.13806  0.14334  0.08148  0.06665 -1.12104 -0.60436  1.09506  0.76019]
 [ 0.09332  0.1752   0.12914  0.06817  0.08297 -1.17965 -0.53317  1.10547  0.73114]
 [ 0.09367  0.13219  0.17527  0.06844  0.0638  -1.13474 -0.53458  1.00888  0.79874]
 [ 0.09367  0.13219  0.17527  0.06844  0.0638  -1.13474 -0.53458  1.00888  0.79874]
 [ 0.09367  0.13219  0.17527  0.06844  0.0638  -1.13474 -0.53458  1.00888  0.79874]
 [ 0.09367  0.13219  0.17527  0.06844  0.0638  -1.13474 -0.53458  1.00888  0.79874]]
>>> ncdFromDPH = PmfFromDPH(alphap, Ap, np.arange(0,11.0,1))
>>> print(ncdFromDPH)
[ 0.33826  0.21299  0.1455   0.09849  0.06653  0.04492  0.03032  0.02047  0.01382  0.00933  0.0063 ]
>>> ncmFromMG = MomentsFromMG(alpha, A, 5)
>>> print(ncmFromMG)
[2.0439201904271451, 10.553791196138775, 80.61928537723395, 820.6894786219882, 10442.528878952886]
>>> std, stm = MAPMAP1(D0, D1, S0, S1, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
Final Residual Error for G:  1.80411241502e-16
Final Residual Error for R:  4.02455846427e-16
>>> print(std)
[ 0.       0.06732  0.14411  0.21822  0.28688  0.34979  0.40723  0.45962  0.50738  0.55093  0.59062]
>>> print(stm)
[1.1135106870764573, 2.411324091748754, 7.817270279651181, 33.785575107609588, 182.52100725089704]
>>> betap, Bp = MAPMAP1(D0, D1, S0, S1, "stDistrPH")
Final Residual Error for G:  1.80411241502e-16
Final Residual Error for R:  4.02455846427e-16
>>> print(betap)
[[ 0.35369  0.       0.14631  0.07074  0.       0.02926  0.28295  0.       0.11705]]
>>> print(Bp)
[[-9.71508  8.1485   0.63533  0.03275  0.04938  0.01615  0.08777  0.17848  0.04459]
 [ 3.20037 -6.23504  0.94726  0.0734   0.11068  0.03619  0.19674  0.40007  0.09996]
 [ 0.28699  6.63501 -7.86004  0.03299  0.04974  0.01626  0.08841  0.17978  0.04492]
 [ 0.28492  0.34127  0.13895 -9.96725  7.85661  0.51253  0.08777  0.17848  0.04459]
 [ 0.63864  0.76496  0.31145  2.63513 -6.88932  0.67199  0.19674  0.40007  0.09996]
 [ 0.28699  0.34375  0.13996  0.03299  6.341   -7.98374  0.08841  0.17978  0.04492]
 [ 0.28492  0.34127  0.13895  0.03275  0.04938  0.01615 -9.91223  7.98571  0.54098]
 [ 0.63864  0.76496  0.31145  0.0734   0.11068  0.03619  2.75847 -6.59993  0.73576]
 [ 0.28699  0.34375  0.13996  0.03299  0.04974  0.01626  0.08841  6.47105 -7.95508]]
>>> beta, B = MAPMAP1(D0, D1, S0, S1, "stDistrME")
Final Residual Error for G:  1.80411241502e-16
Final Residual Error for R:  4.02455846427e-16
>>> print(beta)
[[ 0.14329  0.28553  0.07118  0.02866  0.05711  0.01424  0.11463  0.22842  0.05694]]
>>> print(B)
[[-9.71508  4.99721  0.14246  0.05698  0.19944  0.02849  0.22793  0.79777  0.11397]
 [ 5.21856 -6.23504  2.10928  0.04371  0.15299  0.02186  0.17485  0.61196  0.08742]
 [ 1.27992  2.97972 -7.86004  0.05598  0.19594  0.02799  0.22394  0.78377  0.11197]
 [ 0.16374  0.57307  0.08187 -9.96725  4.11461  0.01637  0.13099  0.45846  0.06549]
 [ 0.15812  0.55341  0.07906  5.03162 -6.88932  2.01581  0.12649  0.44273  0.06325]
 [ 0.16264  0.56923  0.08132  1.03253  2.11385 -7.98374  0.13011  0.45539  0.06506]
 [ 0.10971  0.384    0.05486  0.02194  0.0768   0.01097 -9.91223  4.3072   0.04389]
 [ 0.14288  0.50009  0.07144  0.02858  0.10002  0.01429  5.11431 -6.59993  2.05715]
 [ 0.11229  0.39303  0.05615  0.02246  0.07861  0.01123  1.08984  2.31442 -7.95508]]
>>> stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
>>> print(stdFromPH)
[ 0.       0.06732  0.14411  0.21822  0.28688  0.34979  0.40723  0.45962  0.50738  0.55093  0.59062]
>>> stmFromME = MomentsFromME(beta, B, 5)
>>> print(stmFromME)
[1.1135106870764573, 2.411324091748754, 7.8172702796511846, 33.78557510760961, 182.52100725089716]
=== MMAPPH1PRPR ===
>>> D0 = ml.matrix([[-5.49, 0., 1.15, 0.],[0., -2.29, 0., 0.],[0., 0.08, -1.32, 0.],[0.72, 1.17, 0.7, -7.07]])
>>> D1 = ml.matrix([[0.25, 0.38, 0.64, 0.],[0., 0., 0., 1.09],[0., 1.24, 0., 0.],[0.37, 0., 0., 0.]])
>>> D2 = ml.matrix([[0.3, 1.0, 0., 0.48],[0., 0.2, 0., 0.],[0., 0., 0., 0.],[0.61, 0., 0., 0.2]])
>>> D3 = ml.matrix([[0., 0.98, 0., 0.31],[0., 0., 1.0, 0.],[0., 0., 0., 0.],[1.1, 0.84, 0.33, 1.03]])
>>> sigma3 = ml.matrix([[0.83333,0.11404,0.05263]])
>>> S3 = ml.matrix([[-3., 0., 0.],[0.73077, -0.73077, 0.],[0., 0.5, -0.5]])
>>> sigma2 = ml.matrix([[1.]])
>>> S2 = ml.matrix([[-2.]])
>>> sigma1 = ml.matrix([[0.25,0.75]])
>>> S1 = ml.matrix([[-2.5, 2.5],[0., -10.]])
>>> ncm1, ncd1, ncm2, ncd2, ncm3, ncd3 = MMAPPH1PRPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "ncMoms", 3, "ncDistr", 500)
Final Residual Error for G:  2.3314683517128287e-15
Final Residual Error for G:  1.4521717162097048e-13
Final Residual Error for G:  9.647230930776018e-15
Final Residual Error for G:  1.5404344466674047e-15
Final Residual Error for G:  6.7307270867900115e-15
Final Residual Error for G:  1.7069679003611782e-15
Final Residual Error for G:  1.339206523454095e-15
Final Residual Error for G:  2.69315819645e-16
Final Residual Error for R:  3.26128013484e-16
Final Residual Error for G:  2.69315819645e-16
Final Residual Error for R:  3.26128013484e-16
>>> distrPoints = [1., 5., 10.]
>>> stm1, std1, stm2, std2, stm3, std3 = MMAPPH1PRPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "stMoms", 3, "stDistr", distrPoints)
Final Residual Error for G:  2.3314683517128287e-15
Final Residual Error for G:  1.4521717162097048e-13
Final Residual Error for G:  7.88934883286745e-15
Final Residual Error for G:  4.212775961409676e-15
Final Residual Error for G:  3.1259717037102064e-15
Final Residual Error for G:  1.5404344466674047e-15
Final Residual Error for G:  6.7307270867900115e-15
Final Residual Error for G:  7.642364031024785e-16
Final Residual Error for G:  7.629124111965813e-16
Final Residual Error for G:  4.657732532997727e-16
Final Residual Error for G:  1.339206523454095e-15
>>> print(stm1)
[16.306011640793987, 806.62985258583274, 65397.232945356853]
>>> print(std1)
[ 0.22164  0.43134  0.56865]
>>> print(stm2)
[5.505255217664927, 107.77744442363372, 3848.0354975571686]
>>> print(std2)
[ 0.34346  0.69324  0.83131]
>>> print(stm3)
[1.9703276379879364, 11.741190396361684, 112.84868513581137]
>>> print(std3)
[ 0.55657  0.88197  0.97479]
=== MMAPPH1NPPR ===
>>> D0 = ml.matrix([[-5.49, 0., 1.15, 0.],[0., -2.29, 0., 0.],[0., 0.08, -1.32, 0.],[0.72, 1.17, 0.7, -7.07]])
>>> D1 = ml.matrix([[0.25, 0.38, 0.64, 0.],[0., 0., 0., 1.09],[0., 1.24, 0., 0.],[0.37, 0., 0., 0.]])
>>> D2 = ml.matrix([[0.3, 1.0, 0., 0.48],[0., 0.2, 0., 0.],[0., 0., 0., 0.],[0.61, 0., 0., 0.2]])
>>> D3 = ml.matrix([[0., 0.98, 0., 0.31],[0., 0., 1.0, 0.],[0., 0., 0., 0.],[1.1, 0.84, 0.33, 1.03]])
>>> sigma3 = ml.matrix([[0.83333,0.11404,0.05263]])
>>> S3 = ml.matrix([[-3., 0., 0.],[0.73077, -0.73077, 0.],[0., 0.5, -0.5]])
>>> sigma2 = ml.matrix([[1.]])
>>> S2 = ml.matrix([[-2.]])
>>> sigma1 = ml.matrix([[0.25,0.75]])
>>> S1 = ml.matrix([[-2.5, 2.5],[0., -10.]])
>>> ncm1, ncd1, ncm2, ncd2, ncm3, ncd3 = MMAPPH1NPPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "ncMoms", 3, "ncDistr", 500)
Final Residual Error for G:  2.3314683517128287e-15
Final Residual Error for G:  2.3314683517128287e-15
Final Residual Error for G:  1.790234627208065e-15
Final Residual Error for G:  3.6914915568786455e-15
Final Residual Error for G:  1.4521717162097048e-13
Final Residual Error for G:  5.974387651264124e-15
Final Residual Error for G:  1.0630385460785874e-14
Final Residual Error for G:  2.7131075164277263e-15
Final Residual Error for G:  3.20949754572e-16
Final Residual Error for R:  3.63464120372e-16
Final Residual Error for G:  3.20949754572e-16
Final Residual Error for R:  3.63464120372e-16
>>> distrPoints = [1., 5., 10.]
>>> stm1, std1, stm2, std2, stm3, std3 = MMAPPH1NPPR([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "stMoms", 3, "stDistr", distrPoints)
Final Residual Error for G:  2.3314683517128287e-15
Final Residual Error for G:  2.3314683517128287e-15
Final Residual Error for G:  1.790234627208065e-15
Final Residual Error for G:  3.6914915568786455e-15
Final Residual Error for G:  1.4521717162097048e-13
Final Residual Error for G:  9.319276714258098e-16
Final Residual Error for G:  7.064661355915547e-16
Final Residual Error for G:  9.459663954936026e-16
Final Residual Error for G:  1.0630385460785874e-14
Final Residual Error for G:  3.387294073432367e-15
Final Residual Error for G:  2.328351270466933e-15
Final Residual Error for G:  1.0900568642169262e-15
>>> print(stm1)
[15.908635587617834, 788.48368436722012, 63966.115387749385]
>>> print(std1)
[ 0.24787  0.44649  0.57919]
>>> print(stm2)
[5.3734954269680575, 102.74716094296781, 3650.9895132704323]
>>> print(std2)
[ 0.32134  0.70548  0.83911]
>>> print(stm3)
[2.2551683685147075, 13.113935102388783, 124.72993277593639]
>>> print(std3)
[ 0.45672  0.86989  0.97222]
=== MMAPPH1FCFS ===
>>> D0 = ml.matrix([[-5.49, 0., 1.15, 0.],[0., -2.29, 0., 0.],[0., 0.08, -1.32, 0.],[0.72, 1.17, 0.7, -7.07]])
>>> D1 = ml.matrix([[0.25, 0.38, 0.64, 0.],[0., 0., 0., 1.09],[0., 1.24, 0., 0.],[0.37, 0., 0., 0.]])
>>> D2 = ml.matrix([[0.3, 1.0, 0., 0.48],[0., 0.2, 0., 0.],[0., 0., 0., 0.],[0.61, 0., 0., 0.2]])
>>> D3 = ml.matrix([[0., 0.98, 0., 0.31],[0., 0., 1.0, 0.],[0., 0., 0., 0.],[1.1, 0.84, 0.33, 1.03]])
>>> sigma3 = ml.matrix([[0.83333,0.11404,0.05263]])
>>> S3 = ml.matrix([[-3., 0., 0.],[0.73077, -0.73077, 0.],[0., 0.5, -0.5]])
>>> sigma2 = ml.matrix([[1.]])
>>> S2 = ml.matrix([[-2.]])
>>> sigma1 = ml.matrix([[0.25,0.75]])
>>> S1 = ml.matrix([[-2.5, 2.5],[0., -10.]])
>>> ncm1, ncd1, ncm2, ncd2, ncm3, ncd3 = MMAPPH1FCFS([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "ncMoms", 3, "ncDistr", 500)
Final Residual Error for G:  4.121702978920894e-15
>>> distrPoints = [1., 5., 10.]
>>> stm1, std1, stm2, std2, stm3, std3 = MMAPPH1FCFS([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "stMoms", 3, "stDistr", distrPoints)
Final Residual Error for G:  4.121702978920894e-15
>>> print(stm1)
[5.8470062160235257, 84.706198368623802, 1866.7093911946247]
>>> print(std1)
[ 0.28789  0.60379  0.79933]
>>> print(stm2)
[6.3613219350708565, 91.529372824197793, 2014.4076848734521]
>>> print(std2)
[ 0.20213  0.57229  0.7835 ]
>>> print(stm3)
[6.4108407611137332, 92.984442871673338, 2049.1524939592864]
>>> print(std3)
[ 0.21755  0.5651   0.77972]
>>> betap1, Bp1, betap2, Bp2, betap3, Bp3 = MMAPPH1FCFS([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "stDistrPH")
Final Residual Error for G:  4.121702978920894e-15
>>> beta1, B1, beta2, B2, beta3, B3 = MMAPPH1FCFS([D0, D1, D2, D3], [sigma1, sigma2, sigma3], [S1, S2, S3], "stDistrME")
Final Residual Error for G:  4.121702978920894e-15
>>> stdFromPH1 = CdfFromPH(betap1, Bp1, distrPoints)
>>> print(stdFromPH1)
[ 0.28789  0.60379  0.79933]
>>> stmFromME1 = MomentsFromME(beta1, B1, 3)
>>> print(stmFromME1)
[5.847006216026557, 84.7061983687164, 1866.7093911974439]
>>> stdFromPH2 = CdfFromPH(betap2, Bp2, distrPoints)
>>> print(stdFromPH2)
[ 0.20213  0.57229  0.7835 ]
>>> stmFromME2 = MomentsFromME(beta2, B2, 3)
>>> print(stmFromME2)
[6.3613219350690784, 91.52937282416201, 2014.4076848721443]
>>> stdFromPH3 = CdfFromPH(betap3, Bp3, distrPoints)
>>> print(stdFromPH3)
[ 0.21755  0.5651   0.77972]
>>> stmFromME3 = MomentsFromME(beta3, B3, 3)
>>> print(stmFromME3)
[6.4108407611132225, 92.984442871662935, 2049.1524939590845]
=== FluidQueue ===
>>> Q = ml.matrix([[-9., 2., 4., 0., 1., 2.],[6., -25., 5., 3., 7., 4.],[1., 3., -4., 0., 0., 0.],[0., 0., 0., -8., 3., 5.],[7., 3., 0., 2., -13., 1.],[7., 8., 0., 3., 8., -26.]])
>>> vRin = ml.matrix([[4.,2.,1.,0.,0.,3.]])
>>> vRout = ml.matrix([[6.,2.,0.,0.,3.,2.]])
>>> Rin = Diag(vRin)
>>> Rout = Diag(vRout)
>>> fld, flm = FluidQueue(Q, Rin, Rout, "flDistr", np.arange(0.,1.1,0.1), "flMoms", 5)
Final Residual Error for G:  6.661338147750939e-15
>>> print(fld)
[ 0.23662  0.39265  0.49537  0.57807  0.6469   0.70447  0.75265  0.79297  0.82672  0.85497  0.87861]
>>> print(flm)
[0.406361527249128, 0.45459875335830258, 0.76609389063916067, 1.7219814531396287, 4.8383553122056897]
>>> alphap, Ap = FluidQueue(Q, Rin, Rout, "flDistrPH")
Final Residual Error for G:  6.661338147750939e-15
>>> print(alphap)
[[ 0.63124  0.13213]]
>>> print(Ap)
[[ -2.03873   0.41483]
 [ 12.10002 -21.1431 ]]
>>> alpha, A = FluidQueue(Q, Rin, Rout, "flDistrME")
Final Residual Error for G:  6.661338147750939e-15
>>> print(alpha)
[[ 0.09903  0.66434]]
>>> print(A)
[[ -3.87389   2.26527]
 [ 16.20615 -19.30794]]
>>> fldFromPH = CdfFromPH(alphap, Ap, np.arange(0.,1.1,0.1))
>>> print(fldFromPH)
[ 0.23662  0.39265  0.49537  0.57807  0.6469   0.70447  0.75265  0.79297  0.82672  0.85497  0.87861]
>>> flmFromME = MomentsFromME(alpha, A, 5)
>>> print(flmFromME)
[0.40636152724912805, 0.45459875335830258, 0.76609389063916078, 1.7219814531396285, 4.8383553122056906]
>>> std, stm = FluidQueue(Q, Rin, Rout, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
Final Residual Error for G:  6.661338147750939e-15
>>> print(std)
[ 0.31678  0.57513  0.67546  0.74313  0.7949   0.83595  0.8688   0.89511  0.91618  0.93304  0.94652]
>>> print(stm)
[0.23252260678168307, 0.20068950224745297, 0.26683979953080317, 0.47402477308795288, 1.0522657070139314]
>>> betap, Bp = FluidQueue(Q, Rin, Rout, "stDistrPH")
Final Residual Error for G:  6.661338147750939e-15
>>> print(betap)
[[ 0.24893  0.0304   0.06859  0.02341  0.21436  0.       0.       0.       0.       0.       0.       0.09753]]
>>> print(Bp)
[[ -21.23238    2.489      2.         0.         4.         0.         0.         0.         1.         0.         2.         0.     ]
 [  72.6001  -135.85862    0.         2.         0.         4.         0.         0.         0.         1.         0.         2.     ]
 [   6.         0.       -29.07746    0.82967    5.         0.         3.         0.         7.         0.         4.         0.     ]
 [   0.         6.        24.20003  -67.28621    0.         5.         0.         3.         0.         7.         0.         4.     ]
 [   1.         0.         3.         0.        -4.         0.         0.         0.         0.         0.         0.         0.     ]
 [   0.         1.         0.         3.         0.        -4.         0.         0.         0.         0.         0.         0.     ]
 [   0.         0.         0.         0.         0.         0.        -8.         0.         3.         0.         5.         0.     ]
 [   0.         0.         0.         0.         0.         0.         0.        -8.         0.         3.         0.         5.     ]
 [   7.         0.         3.         0.         0.         0.         2.         0.       -19.11619    1.2445     1.         0.     ]
 [   0.         7.         0.         3.         0.         0.         0.         2.        36.30005  -76.42931    0.         1.     ]
 [   7.         0.         8.         0.         0.         0.         3.         0.         8.         0.       -30.07746    0.82967]
 [   0.         7.         0.         8.         0.         0.         0.         3.         0.         8.        24.20003  -68.28621]]
>>> beta, B = FluidQueue(Q, Rin, Rout, "stDistrME")
Final Residual Error for G:  6.661338147750939e-15
>>> print(beta)
[[ 0.       0.       0.07883 -0.08752  0.09534  0.       0.      -0.10977  0.10977 -0.10977  0.10977  0.59657]]
>>> print(B)
[[ -22.23238   -9.02433   12.67634  -16.41886  -10.24852   30.26497    0.         0.         0.       -20.59361   20.59361    0.     ]
 [  -7.88555  -14.        12.87627   -9.09699   -5.67827   16.76854    0.         0.         0.       -11.41004   11.41004    0.     ]
 [  -7.20983   15.44329  -18.07746  -16.65305    4.82436   14.3251    -4.95592    5.11088    0.       -13.92489   13.92489    0.     ]
 [  -6.49415   13.91033   45.22483  -88.75656    8.12592   15.24683   -9.32892    9.62061   -6.27132   -6.27132   11.28838    1.25426]
 [  -5.17874    9.94388   41.78795  -50.49679  -22.61806   13.99623   -8.56373    3.07457    0.        -6.90832   11.51386    1.15139]
 [   1.15647    9.24387   33.46571  -40.96853  105.26888 -123.84766  -13.15029    9.28013    0.        -6.422      3.211      8.56267]
 [   1.11426    8.90648   32.24425  -39.47323   97.844   -111.61937  -21.67032   14.09775    0.        -6.1876     3.0938     8.25014]
 [   1.08047    5.28041   29.44999  -31.89819   93.1404  -109.16943   47.14189  -53.61589    0.        -6.         0.        11.     ]
 [   1.08047    3.43993   31.60441  -34.29003   95.74595 -109.16943   47.14189  -45.61589   -8.        -8.         2.        11.     ]
 [   1.08047    3.43993   29.44999  -31.89819   95.74595 -109.16943   44.23284  -42.61589    0.       -16.         0.        13.     ]
 [   1.42039   -0.85454   34.47696  -38.27643  102.6941  -109.16943   44.23284  -45.61589    3.         3.11619  -24.62166   18.50548]
 [   1.42039   -0.85454   28.73186  -31.89819  101.82558 -108.23515   37.44508  -38.61589    0.        -2.08935   60.01318  -57.92383]]
>>> stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
>>> print(stdFromPH)
[ 0.31678  0.57513  0.67546  0.74313  0.7949   0.83595  0.8688   0.89511  0.91618  0.93304  0.94652]
>>> stmFromME = MomentsFromME(beta, B, 5)
>>> print(stmFromME)
[0.23252260678168368, 0.20068950224745336, 0.2668397995308035, 0.47402477308795293, 1.0522657070139294]
=== FluFluQueue ===
>>> Qin = ml.matrix([[-2., 1., 1.],[2., -5., 3.],[4., 0., -4.]])
>>> vRin = ml.matrix([[3.,7.,0.]])
>>> Rin = Diag(vRin)
>>> Qout = ml.matrix([[-4., 1., 3.],[6., -8., 2.],[3., 7., -10.]])
>>> vRout = ml.matrix([[1.,7.,15.]])
>>> Rout = Diag(vRout)
>>> fld, flm = FluFluQueue(Qin, Rin, Qout, Rout, False, "flDistr", np.arange(0.,1.1,0.1), "flMoms", 5)
Final Residual Error for G:  1.2975731600306517e-15
>>> print(fld)
[ 0.3918   0.47163  0.53819  0.59413  0.6415   0.68193  0.71667  0.74673  0.77292  0.79585  0.81605]
>>> print(flm)
[0.53570356276760078, 1.0765385576008903, 3.4298090557057193, 14.869885651621992, 81.162335691323889]
>>> alphap, Ap = FluFluQueue(Qin, Rin, Qout, Rout, False, "flDistrPH")
Final Residual Error for G:  1.2975731600306517e-15
>>> print(alphap)
[[ 0.45573  0.15247]]
>>> print(Ap)
[[-2.34046  0.53197]
 [ 0.92131 -1.25592]]
>>> alpha, A = FluFluQueue(Qin, Rin, Qout, Rout, False, "flDistrME")
Final Residual Error for G:  1.2975731600306517e-15
>>> print(alpha)
[[-0.65561  1.2638 ]]
>>> print(A)
[[-2.14253  1.51938]
 [ 0.43807 -1.45385]]
>>> fldFromPH = CdfFromPH(alphap, Ap, np.arange(0.,1.1,0.1))
>>> print(fldFromPH)
[ 0.3918   0.47163  0.53819  0.59413  0.6415   0.68193  0.71667  0.74673  0.77292  0.79585  0.81605]
>>> flmFromME = MomentsFromME(alpha, A, 5)
>>> print(flmFromME)
[0.53570356276760067, 1.0765385576008901, 3.4298090557057166, 14.869885651621992, 81.162335691323918]
>>> std, stm = FluFluQueue(Qin, Rin, Qout, Rout, False, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
Final Residual Error for G:  1.8457457784393227e-15
>>> print(std)
[[ 0.29838  0.51911  0.66679  0.76705  0.83596  0.88381  0.91733  0.94097  0.95774  0.96968  0.97821]]
>>> print(stm)
[0.19480129555185471, 0.1128710807256384, 0.10068642773107296, 0.12157602438536934, 0.18505841424939878]
>>> betap, Bp = FluFluQueue(Qin, Rin, Qout, Rout, False, "stDistrPH")
Final Residual Error for G:  1.8457457784393227e-15
>>> print(betap)
[[ 0.45285  0.24877]]
>>> print(Bp)
[[-5.49734  0.83675]
 [ 1.44917 -3.79143]]
>>> beta, B = FluFluQueue(Qin, Rin, Qout, Rout, False, "stDistrME")
Final Residual Error for G:  1.8457457784393227e-15
>>> print(beta)
[[ 0.18114  0.52048]]
>>> print(B)
[[-6.36684  1.6656 ]
 [-0.61643 -2.92193]]
>>> stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
>>> print(stdFromPH)
[ 0.29838  0.51911  0.66679  0.76705  0.83596  0.88381  0.91733  0.94097  0.95774  0.96968  0.97821]
>>> stmFromME = MomentsFromME(beta, B, 5)
>>> print(stmFromME)
[0.19480129555185474, 0.11287108072563844, 0.10068642773107304, 0.12157602438536946, 0.18505841424939901]
>>> fld, flm = FluFluQueue(Qin, Rin, Qout, Rout, True, "flDistr", np.arange(0.,1.1,0.1), "flMoms", 5)
Final Residual Error for G:  1.2975731600306517e-15
>>> print(fld)
[ 0.64736  0.68913  0.72467  0.75512  0.7814   0.80423  0.82418  0.84172  0.85721  0.87095  0.88319]
>>> print(flm)
[0.33264746858870425, 0.68891737022488087, 2.2197747580073659, 9.6621085259501385, 52.809563478451246]
>>> alphap, Ap = FluFluQueue(Qin, Rin, Qout, Rout, True, "flDistrPH")
Final Residual Error for G:  1.2975731600306517e-15
>>> print(alphap)
[[ 0.24142  0.11122]]
>>> print(Ap)
[[-2.34046  0.73252]
 [ 0.66907 -1.25592]]
>>> alpha, A = FluFluQueue(Qin, Rin, Qout, Rout, True, "flDistrME")
Final Residual Error for G:  1.2975731600306517e-15
>>> print(alpha)
[[-0.24261  0.59524]]
>>> print(A)
[[-2.14253  1.51938]
 [ 0.43807 -1.45385]]
>>> fldFromPH = CdfFromPH(alphap, Ap, np.arange(0.,1.1,0.1))
>>> print(fldFromPH)
[ 0.64736  0.68913  0.72467  0.75512  0.7814   0.80423  0.82418  0.84172  0.85721  0.87095  0.88319]
>>> flmFromME = MomentsFromME(alpha, A, 5)
>>> print(flmFromME)
[0.3326474685887042, 0.68891737022488064, 2.219774758007365, 9.6621085259501367, 52.809563478451238]
>>> std, stm = FluFluQueue(Qin, Rin, Qout, Rout, True, "stDistr", np.arange(0.,1.1,0.1), "stMoms", 5)
Final Residual Error for G:  1.8457457784393227e-15
>>> print(std)
[[ 0.57864  0.70628  0.79365  0.85412  0.89636  0.92608  0.94712  0.96209  0.97277  0.98041  0.98589]]
>>> print(stm)
[0.12096271585043798, 0.071546261021158727, 0.064592069915750366, 0.078520337012782174, 0.11996554734440762]
>>> betap, Bp = FluFluQueue(Qin, Rin, Qout, Rout, True, "stDistrPH")
Final Residual Error for G:  1.8457457784393227e-15
>>> print(betap)
[[ 0.23831  0.18306]]
>>> print(Bp)
[[-5.49734  0.83675]
 [ 1.44917 -3.79143]]
>>> beta, B = FluFluQueue(Qin, Rin, Qout, Rout, True, "stDistrME")
Final Residual Error for G:  1.8457457784393227e-15
>>> print(beta)
[[-0.12204  0.5434 ]]
>>> print(B)
[[-5.18601  2.4839 ]
 [ 0.66298 -4.10276]]
>>> stdFromPH = CdfFromPH(betap, Bp, np.arange(0.,1.1,0.1))
>>> print(stdFromPH)
[ 0.57864  0.70628  0.79365  0.85412  0.89636  0.92608  0.94712  0.96209  0.97277  0.98041  0.98589]
>>> stmFromME = MomentsFromME(beta, B, 5)
>>> print(stmFromME)
[0.12096271585043798, 0.071546261021158755, 0.064592069915750394, 0.078520337012782215, 0.11996554734440766]
