// inputmsg: indicates the beginning of input parameters. Just prints a message, nothing else. For doc examples it is ignored.
// testmsg: indicates the beginning of input parameters. Just prints a message, nothing else. For doc examples it is ignored.
// defvec/defmat/defrange/defvar: define a parameter. If it is followed by @, it is printed to the screen, except for doc examples
// code: some source code. !: announce execution of code (except for doc examples), @: print output after executing the code

package DMAP

test MarginalDistributionFromDMAP

inputmsg
defmat@ D0 # {{0, 0.02, 0, 0},{0, 0.17, 0.2, 0.14},{0.16, 0.17, 0.02, 0.18},{0, 0, 0, 0.12}}
defmat@ D1 # {{0, 0.88, 0.1, 0},{0.18, 0.07, 0.14, 0.1},{0.13, 0.15, 0.15, 0.04},{0.31, 0.18, 0.12, 0.27}}
testmsg
code!@ {a,A}=MarginalDistributionFromDMAP[D0,D1]
assert Length[a]==Dim1[D0] && CheckDPHRepresentation[a,A] # "MarginalDistributionFromDMAP returned a wrong DPH representation!"

test MarginalMomentsFromDMAP

inputmsg
defmat@ D0 # {{0, 0.02, 0, 0},{0, 0.17, 0.2, 0.14},{0.16, 0.17, 0.02, 0.18},{0, 0, 0, 0.12}}
defmat@ D1 # {{0, 0.88, 0.1, 0},{0.18, 0.07, 0.14, 0.1},{0.13, 0.15, 0.15, 0.04},{0.31, 0.18, 0.12, 0.27}}
testmsg
code!@ moms=MarginalMomentsFromDMAP[D0,D1]
assert Length[moms]==2*Dim1[D0]-1 && CheckMoments[moms] # "MarginalMomentsFromDMAP returned wrong moments!"

test MarginalDistributionFromDRAP

inputmsg
defmat@ H0 # {{0, 0, 0.13},{0, 0.6, 0.18},{0.31, 0.26, 0.02}}
defmat@ H1 # {{0, 1, -0.13},{0, 0.18, 0.04},{0.03, 0.09, 0.29}}
testmsg
code!@ {a,A}=MarginalDistributionFromDRAP[H0,H1]
assert Length[a]==Dim1[H0] && CheckMGRepresentation[a,A] # "MarginalDistributionFromDRAP returned a wrong MG representation!"

test MarginalMomentsFromDRAP

inputmsg
defmat@ H0 # {{0, 0, 0.13},{0, 0.6, 0.18},{0.31, 0.26, 0.02}}
defmat@ H1 # {{0, 1, -0.13},{0, 0.18, 0.04},{0.03, 0.09, 0.29}}
testmsg
code!@ moms=MarginalMomentsFromDRAP[H0,H1]
assert Length[moms]==2*Dim1[H0]-1 && CheckMoments[moms] # "MarginalMomentsFromDRAP returned wrong moments!"

test MarginalDistributionFromDMMAP
defmat@ D0 # {{0.34, 0, 0},{0.06, 0.05, 0.03},{0.11, 0.13, 0}}
defmat@ D1 # {{0.3, 0, 0},{0.16, 0.18, 0.05},{0.15, 0.04, 0.09}}
defmat@ D2 # {{0, 0.01, 0},{0.1, 0.07, 0.08},{0.13, 0.12, 0.13}}
defmat@ D3 # {{0.35, 0, 0},{0, 0.18, 0.04},{0.06, 0.03, 0.01}}
testmsg
code!@ {a,A}=MarginalDistributionFromDMMAP[<-D0,D1,D2,D3->]
assert Length[a]==Dim1[D0] && CheckDPHRepresentation[a,A] # "MarginalDistributionFromDMMAP returned a wrong DPH representation!"

test MarginalMomentsFromDMMAP

inputmsg
defmat@ D0 # {{0.34, 0, 0},{0.06, 0.05, 0.03},{0.11, 0.13, 0}}
defmat@ D1 # {{0.3, 0, 0},{0.16, 0.18, 0.05},{0.15, 0.04, 0.09}}
defmat@ D2 # {{0, 0.01, 0},{0.1, 0.07, 0.08},{0.13, 0.12, 0.13}}
defmat@ D3 # {{0.35, 0, 0},{0, 0.18, 0.04},{0.06, 0.03, 0.01}}
testmsg
code!@ moms=MarginalMomentsFromDMMAP[<-D0,D1,D2,D3->]
assert Length[moms]==2*Dim1[D0]-1 && CheckMoments[moms] # "MarginalMomentsFromDMMAP returned wrong moments!"

test MarginalDistributionFromDMRAP

inputmsg
defmat@ H0 # {{0.15, 0.2, 0.18},{-0.23, 0.17, 0.22},{0.19, 0.15, 0.16}}
defmat@ H1 # {{0.01, 0.08, 0.16},{0.02, 0.2, 0.07},{0.02, 0.15, 0.17}}
defmat@ H2 # {{0.14, 0.07, 0.01},{0.19, 0.02, 0.34},{0.06, 0.1, 0}}
testmsg
code!@ {a,A}=MarginalDistributionFromDMRAP[<-H0,H1,H2->]
assert Length[a]==Dim1[H0] && CheckMGRepresentation[a,A] # "MarginalDistributionFromDMRAP returned a wrong MG representation!"

test MarginalMomentsFromDMRAP

inputmsg
defmat@ H0 # {{0.15, 0.2, 0.18},{-0.23, 0.17, 0.22},{0.19, 0.15, 0.16}}
defmat@ H1 # {{0.01, 0.08, 0.16},{0.02, 0.2, 0.07},{0.02, 0.15, 0.17}}
defmat@ H2 # {{0.14, 0.07, 0.01},{0.19, 0.02, 0.34},{0.06, 0.1, 0}}
testmsg
code!@ moms=MarginalMomentsFromDMRAP[<-H0,H1,H2->]
assert Length[moms]==2*Dim1[H0]-1 && CheckMoments[moms] # "MarginalMomentsFromDMRAP returned wrong moments!"

test LagCorrelationsFromDMAP

inputmsg
defmat@ D0 # {{0, 0.02, 0, 0},{0, 0.17, 0.2, 0.14},{0.16, 0.17, 0.02, 0.18},{0, 0, 0, 0.12}}
defmat@ D1 # {{0, 0.88, 0.1, 0},{0.18, 0.07, 0.14, 0.1},{0.13, 0.15, 0.15, 0.04},{0.31, 0.18, 0.12, 0.27}}
testmsg
code!@ corr = LagCorrelationsFromDMAP[D0,D1,3]
assert Length[corr]==3 && AllLessThan1[corr] && AllGreaterThanm1[corr] # "LagCorrelationsFromDMAP returned wrong autocorrelation coefficients!"

test LagCorrelationsFromDRAP

inputmsg
defmat@ H0 # {{0, 0, 0.13},{0, 0.6, 0.18},{0.31, 0.26, 0.02}}
defmat@ H1 # {{0, 1, -0.13},{0, 0.18, 0.04},{0.03, 0.09, 0.29}}
testmsg
code!@ corr = LagCorrelationsFromDRAP[H0,H1,3]
assert Length[corr]==3 && AllLessThan1[corr] && AllGreaterThanm1[corr] # "LagCorrelationsFromDRAP returned wrong autocorrelation coefficients!"

test LagkJointMomentsFromDMAP
inputmsg
defmat@ D0 # {{0, 0.02, 0, 0},{0, 0.17, 0.2, 0.14},{0.16, 0.17, 0.02, 0.18},{0, 0, 0, 0.12}}
defmat@ D1 # {{0, 0.88, 0.1, 0},{0.18, 0.07, 0.14, 0.1},{0.13, 0.15, 0.15, 0.04},{0.31, 0.18, 0.12, 0.27}}
testmsg
code!@ Nm=LagkJointMomentsFromDMAP[D0,D1,4,1]
code!@ moms=MarginalMomentsFromDMAP[D0,D1,4]
code cjm=Zeros[3]
code For[i,1,3,1]
code Nx=LagkJointMomentsFromDMAP[D0,D1,1,i]
code cjm[[i]] = (Nx[[2,2]]-moms[[1]]^2) / (moms[[2]]-moms[[1]]^2)
code EndFor[]
print "Correlation from joint moments:" # cjm
code!@ corr = LagCorrelationsFromDMAP[D0,D1,3]
code$ mNm1 = Flatten[Nm[[1,2;;]]]
code$ mNm2 = Flatten[Nm[[2;;,1]]]
assert AllPositiveMatrix[Nm] && Norm[ToArray[moms]-mNm1]<10^-12 && Norm[ToArray[moms]-mNm2]<10^-12 && Norm[corr-cjm]<10^-12 # "Joint moment matrix is invalid!"

test LagkJointMomentsFromDRAP

inputmsg
defmat@ H0 # {{0, 0, 0.13},{0, 0.6, 0.18},{0.31, 0.26, 0.02}}
defmat@ H1 # {{0, 1, -0.13},{0, 0.18, 0.04},{0.03, 0.09, 0.29}}
testmsg
code! Nm=LagkJointMomentsFromDRAP[H0,H1,4,1]
print Length[Nm]
code!@ moms=MarginalMomentsFromDRAP[H0,H1,4]
code cjm=Zeros[3]
code For[i,1,3,1]
code Nx=LagkJointMomentsFromDRAP[H0,H1,1,i]
code cjm[[i]] = (Nx[[2,2]]-moms[[1]]^2) / (moms[[2]]-moms[[1]]^2)
code EndFor[]
print "Correlation from joint moments:" # cjm
code!@ corr = LagCorrelationsFromDRAP[H0,H1,3]
code$ mNm1 = Flatten[Nm[[1,2;;]]]
code$ mNm2 = Flatten[Nm[[2;;,1]]]
assert AllPositiveMatrix[Nm] && Norm[ToArray[moms]-mNm1]<10^-12 && Norm[ToArray[moms]-mNm2]<10^-12 && Norm[corr-cjm]<10^-12 # "Joint moment matrix is invalid!"

test LagkJointMomentsFromDMMAP
inputmsg
defmat@ D0 # {{0.34, 0, 0},{0.06, 0.05, 0.03},{0.11, 0.13, 0}}
defmat@ D1 # {{0.3, 0, 0},{0.16, 0.18, 0.05},{0.15, 0.04, 0.09}}
defmat@ D2 # {{0, 0.01, 0},{0.1, 0.07, 0.08},{0.13, 0.12, 0.13}}
defmat@ D3 # {{0.35, 0, 0},{0, 0.18, 0.04},{0.06, 0.03, 0.01}}
testmsg
code! Nm=LagkJointMomentsFromDMMAP[<-D0,D1,D2,D3->,3,1]
print Nm<<1>>
print Nm<<2>>
print Nm<<3>>
assert Length[Nm]==3 && Norm[Nm<<1>>+Nm<<2>>+Nm<<3>>-LagkJointMomentsFromDMAP[D0,D1+D2+D3,3,1]]<10^-12 # "Joint moment matrix is invalid!"

test LagkJointMomentsFromDMRAP

inputmsg
defmat@ H0 # {{0.15, 0.2, 0.18},{-0.23, 0.17, 0.22},{0.19, 0.15, 0.16}}
defmat@ H1 # {{0.01, 0.08, 0.16},{0.02, 0.2, 0.07},{0.02, 0.15, 0.17}}
defmat@ H2 # {{0.14, 0.07, 0.01},{0.19, 0.02, 0.34},{0.06, 0.1, 0}}
testmsg
code! Nm=LagkJointMomentsFromDMRAP[<-H0,H1,H2->,3,2]
print Nm<<1>>
print Nm<<2>>
assert Length[Nm]==2 && Norm[Nm<<1>>+Nm<<2>>-LagkJointMomentsFromDRAP[H0,H1+H2,3,2]]<10^-12 # "Joint moment matrix is invalid!"

test RandomDMAP

testmsg
code!@ {D0,D1}=RandomDMAP[4,5.62,10]
code!@ m = MarginalMomentsFromDMAP[D0,D1,1][[1]]
assert CheckDMAPRepresentation[D0,D1] # "RandomDMAP failed to return a valid DMAP representation!"
assert Abs[m-5.62]<10^-14 # "RandomDMAP failed to match the given mean value!"

test RandomDMMAP

testmsg
code! Dm=RandomDMMAP[4,3,5.62,10]
print Dm<<1>>
print Dm<<2>>
print Dm<<3>>
print Dm<<4>>
code!@ m = MarginalMomentsFromDMMAP[Dm,1][[1]]
assert CheckDMMAPRepresentation[Dm] # "RandomDMMAP failed to return a valid MMAP representation!"
assert Abs[m-5.62]<10^-14 # "RandomDMMAP failed to match the given mean value!"

test CheckDMAPRepresentation

inputmsg
defmat@ D0 # {{0, 0.02, 0},{0, 0.17, 0.2},{0.16, 0.17, 0.02}}
defmat@ D1 # {{0, 0.88, 0.1, 0},{0.18, 0.07, 0.14, 0.1},{0.13, 0.15, 0.15, 0.04},{0.31, 0.18, 0.12, 0.27}}
testmsg
code!@ flag=CheckDMAPRepresentation[D0,D1]
assert flag==False # "CheckDMAPRepresentation failed to detect the incompatible shapes of D0 and D1!"
inputmsg
defmat@ D0 # {{0, 0.02, 0},{0, 0.17, 0.2},{0.16, 0.17, 0.02}}
defmat@ D1 # {{0, 0.88, 0.1},{0.18, 0.07, 0.14},{0.13, 0.15, 0.15}}
testmsg
code!@ flag=CheckDMAPRepresentation[D0,D1]
assert flag==False # "CheckDMAPRepresentation failed to detect invalid rowsums!"
inputmsg
defmat@ D0 # {{0, 0.02, 0, 0},{0, 0.17, 0.2, 0.14},{0.16, 0.17, 0.02, 0.18},{0, 0, 0, 0.12}}
defmat@ D1 # {{0, 0.88, 0.1, 0},{0.18, 0.07, 0.14, 0.1},{0.13, 0.15, 0.15, 0.04},{0.31, 0.18, 0.12, 0.27}}
testmsg
code!@ flag=CheckDMAPRepresentation[D0,D1]
assert flag==True # "CheckDMAPRepresentation failed to recognize a valid DMAP representation!"

test CheckDRAPRepresentation

inputmsg
defmat@ H0 # {{0, 0, 0.13},{0, 0.6, 0.18},{0.31, 0.26, 0.02},{0.2, 0, 0}}
defmat@ H1 # {{0, 1., -0.13},{0, 0.18, 0.04},{0.03, 0.09, 0.29},{0, 0.8, 0}}
testmsg
code!@ flag=CheckDRAPRepresentation[H0,H1]
assert flag==False # "CheckDRAPRepresentation failed to detect the incompatible shapes of D0 and D1!"
inputmsg
defmat@ H0 # {{0.2, 0, 0.13},{0, 0.6, 0.18},{0.31, 0.26, 0.02}}
defmat@ H1 # {{0, 1., -0.13},{0, 0.18, 0.04},{0.03, 0.09, 0.29}}
testmsg
code!@ flag=CheckDRAPRepresentation[H0,H1]
assert flag==False # "CheckDRAPRepresentation failed to detect invalid rowsums!"
inputmsg
defmat@ H0 # {{-1., 0, 0},{0, -2., 2.},{0, 3., -3.}}
defmat@ H1 # {{0, 0, 1.},{0, -1., 1.},{1., 0, -1.}}
testmsg
code!@ flag=CheckDRAPRepresentation[H0,H1]
assert flag==False # "CheckDRAPRepresentation failed to detect invalid eigenvalues!"
inputmsg
defmat@ H0 # {{0, 0, 15.},{0, 0.6, 0.18},{0.31, 0.26, 0.02}}
defmat@ H1 # {{0, 1., -15.},{0, 0.18, 0.04},{0.03, 0.09, 0.29}}
testmsg
code!@ flag=CheckDRAPRepresentation[H0,H1]
assert flag==False # "CheckDRAPRepresentation failed to detect invalid eigenvalues!"
inputmsg
defmat@ H0 # {{0, 0.5, 0.1},{0, -1.4, 3.1},{0.67, 0, 0.4}}
defmat@ H1 # {{0, 0.4, 0},{0, -0.2, -0.5},{0.3, -0.7, 0.33}}
testmsg
code!@ flag=CheckDRAPRepresentation[H0,H1]
assert flag==False # "CheckDRAPRepresentation failed to detect invalid eigenvalues!"
inputmsg
defmat@ H0 # {{0, 0, 0.13},{0, 0.6, 0.18},{0.31, 0.26, 0.02}}
defmat@ H1 # {{0, 1., -0.13},{0, 0.18, 0.04},{0.03, 0.09, 0.29}}
testmsg
code!@ flag=CheckDRAPRepresentation[H0,H1]
assert flag==True # "CheckDRAPRepresentation failed to recognize a valid RAP representation!"

test CheckDMMAPRepresentation

inputmsg
defmat@ D0 # {{0.34, 0, 0},{0.06, 0.05, 0.03},{0.11, 0.13, 0}}
defmat@ D1 # {{0.3, 0, 0},{0.16, 0.18, 0.05},{0.15, 0.04, 0.09}}
defmat@ D2 # {{0, 0.01, 0},{0.1, 0.07, 0.08},{0.13, 0.12, 0.13}}
defmat@ D3 # {{0.35, 0, 0},{0, 0.18, 0.04},{0.06, 0.03, 0.01}}
testmsg
code!@ flag=CheckDMMAPRepresentation[<-D0,D1,D2,D3->]
assert flag==True # "CheckDMMAPRepresentation failed to recognize a valid DMMAP representation!"

test CheckDMRAPRepresentation

inputmsg
defmat@ H0 # {{0.15, 0.2, 0.18},{-0.23, 0.17, 0.22},{0.19, 0.15, 0.16}}
defmat@ H1 # {{0.01, 0.08, 0.16},{0.02, 0.2, 0.07},{0.02, 0.15, 0.17}}
defmat@ H2 # {{0.14, 0.07, 0.01},{0.19, 0.02, 0.34},{0.06, 0.1, 0}}
testmsg
code!@ flag=CheckDMRAPRepresentation[<-H0,H1,H2->]
assert flag==True # "CheckDMRAPRepresentation failed to recognize a valid DMRAP representation!"

test DRAPFromMoments

inputmsg
defmat@ G0 # {{0, 0.02, 0, 0},{0, 0.17, 0.2, 0.14},{0.16, 0.17, 0.02, 0.18},{0, 0, 0, 0.12}}
defmat@ G1 # {{0, 0.88, 0.1, 0},{0.18, 0.07, 0.14, 0.1},{0.13, 0.15, 0.15, 0.04},{0.31, 0.18, 0.12, 0.27}}
code!@ moms=MarginalMomentsFromDRAP[G0,G1,5]
code!@ Nm=LagkJointMomentsFromDRAP[G0,G1,2,1]
testmsg
code!@ {H0,H1}=DRAPFromMoments[moms,Nm]
code!@ rmoms=MarginalMomentsFromDRAP[H0,H1,5]
code!@ rNm=LagkJointMomentsFromDRAP[H0,H1,2,1]
assert Norm[ToArray[moms]-ToArray[rmoms]]<10^-11 && Norm[Nm-rNm]<10^-12 # "The moments and joint moments returned by RAPFromMoments are not the same as given!"

test DMRAPFromMoments

inputmsg
defmat@ G0 # {{0.34, 0, 0},{0.06, 0.05, 0.03},{0.11, 0.13, 0}}
defmat@ G1 # {{0.3, 0, 0},{0.16, 0.18, 0.05},{0.15, 0.04, 0.09}}
defmat@ G2 # {{0, 0.01, 0},{0.1, 0.07, 0.08},{0.13, 0.12, 0.13}}
defmat@ G3 # {{0.35, 0, 0},{0, 0.18, 0.04},{0.06, 0.03, 0.01}}
code! G=<-G0,G1,G2,G3->
code!@ moms=MarginalMomentsFromDMRAP[G,5]
code! Nm=LagkJointMomentsFromDMRAP[G,2,1]
code!@ <-Nm1, Nm2, Nm3-> = Nm
testmsg
code! H=DMRAPFromMoments[moms,Nm]
print! H<<1>>
print! H<<2>>
print! H<<3>>
print! H<<4>>
code BuTools`CheckPrecision=10.^-10
code!@ rmoms=MarginalMomentsFromDMRAP[H,5]
code! rNm = LagkJointMomentsFromDMRAP[H,2,1]
code!@ <-rNm1, rNm2, rNm3-> = rNm
print! Norm[ToArray[moms]-ToArray[rmoms]]
assert Norm[ToArray[moms]-ToArray[rmoms]]<10^-9 && Norm[Nm1-rNm1]<10^-9 && Norm[Nm2-rNm2]<10^-9 && Norm[Nm3-rNm3]<10^-9 # "The moments and joint moments returned by DMRAPFromMoments are not the same as given!"


test DMAPFromDRAP

inputmsg
defmat@ H0 # {{0, 0, 0.13},{0, 0.6, 0.18},{0.31, 0.26, 0.02}}
defmat@ H1 # {{0, 1, -0.13},{0, 0.18, 0.04},{0.03, 0.09, 0.29}}
testmsg
code!@ {D0,D1}=DMAPFromDRAP[H0,H1]
code!@ err = Norm[LagkJointMomentsFromDRAP[D0,D1,3,1]-LagkJointMomentsFromDRAP[H0,H1,3,1]]
assert err<10^-10 # "The DMAP returned by DMAPFromDRAP is not similar to the input!"
assert CheckDMAPRepresentation[D0,D1] # "The result of DMAPFromDRAP is not a DMAP, as it should be!"

test DMMAPFromDMRAP

inputmsg
defmat@ H0 # {{0.15, 0.2, 0.18},{-0.20, 0.17, 0.22},{0.19, 0.15, 0.16}}
defmat@ H1 # {{0.01, 0.08, 0.16},{0.02, 0.2, 0.07},{0.02, 0.15, 0.17}}
defmat@ H2 # {{0.14, 0.07, 0.01},{0.19, 0.02, 0.31},{0.06, 0.1, 0.}}
code H=<-H0,H1,H2->
code!@ moms=MarginalMomentsFromDMRAP[H]
code! jmom=LagkJointMomentsFromDMRAP[H,3,1]
testmsg
code! G=DMMAPFromDMRAP[H]
print G<<1>>
print G<<2>>
print G<<3>>
code!@ rmoms=MarginalMomentsFromDMMAP[G]
code! rjmom=LagkJointMomentsFromDMMAP[G,3,1]
code!@ err = Norm[rjmom<<1>>-jmom<<1>>] + Norm[rjmom<<2>>-jmom<<2>>]
assert err<10^-12 # "The DMMAP returned by DMMAPFromDMRAP is not similar to the input!"
assert CheckDMMAPRepresentation[G] # "The result of DMMAPFromDMRAP is not a DMMAP, as it should be!"

test CanonicalFromDMAP2

inputmsg
defmat@ D0 # {{0.46, 0.28},{0.35, 0.23}}
defmat@ D1 # {{0.08, 0.18},{0.14, 0.28}}
testmsg
code!@ {H0,H1}=CanonicalFromDMAP2[D0,D1]
code Cm=SimilarityMatrix[H0,D0]
code err1 = Norm[H0.Cm-Cm.D0]
code err2 = Norm[H1.Cm-Cm.D1]
print "Transformation errors:" # Max[err1,err2]
assert CheckDMAPRepresentation[H0,H1] # "The result of CanonicalFromDMAP2 is not a valid DMAP representation!"
assert Max[err1,err2]<10^-12 # "The DMAP returned by CanonicalFromDMAP2 is not similar to the input!"
inputmsg
defmat@ D0 # {{0.26, 0.28},{0.35, 0.23}}
defmat@ D1 # {{0.28, 0.18},{0.14, 0.28}}
testmsg
code!@ {H0,H1}=CanonicalFromDMAP2[D0,D1]
code Cm=SimilarityMatrix[H0,D0]
code err1 = Norm[H0.Cm-Cm.D0]
code err2 = Norm[H1.Cm-Cm.D1]
print "Transformation errors:" # Max[err1,err2]
assert CheckDMAPRepresentation[H0,H1] # "The result of CanonicalFromDMAP2 is not a valid DMAP representation!"
assert Max[err1,err2]<10^-12 # "The DMAP returned by CanonicalFromDMAP2 is not similar to the input!"
inputmsg
defmat@ D0 # {{0.14, 0.34},{0.35, 0.23}}
defmat@ D1 # {{0.22, 0.3},{0.28, 0.14}}
testmsg
code!@ {H0,H1}=CanonicalFromDMAP2[D0,D1]
code Cm=SimilarityMatrix[H0,D0]
code err1 = Norm[H0.Cm-Cm.D0]
code err2 = Norm[H1.Cm-Cm.D1]
print "Transformation errors:" # Max[err1,err2]
assert CheckDMAPRepresentation[H0,H1] # "The result of CanonicalFromDMAP2 is not a valid DMAP representation!"
assert Max[err1,err2]<10^-12 # "The DMAP returned by CanonicalFromDMAP2 is not similar to the input!"

test DMAP2FromMoments

inputmsg
defmat@ D0 # {{0.2, 0.7},{0.6, 0.1}}
defmat@ D1 # {{0.09, 0.01},{0.2, 0.1}}
code!@ moms=MarginalMomentsFromDMAP[D0, D1, 3]
code!@ corr=LagCorrelationsFromDMAP[D0, D1, 1][[1]]
testmsg
code!@ {D0,D1}=DMAP2FromMoments[moms,corr]
code!@ rmoms=MarginalMomentsFromDMAP[D0, D1, 3]
code!@ rcorr=LagCorrelationsFromDMAP[D0, D1, 1][[1]]
assert CheckDMAPRepresentation[D0,D1] # "DMAP2FromMoments returned an invalid DMAP representation!"
assert Norm[ToArray[moms]-ToArray[rmoms]]<10^-11 && Abs[corr-rcorr]<10^-11 # "The moments and the correlation returned by DMAP2FromMoments are not the same as given!"

test SamplesFromDMAP

inputmsg
defmat@ D0 # {{0, 0.02, 0, 0},{0, 0.17, 0.2, 0.14},{0.16, 0.17, 0.02, 0.18},{0, 0, 0, 0.12}}
defmat@ D1 # {{0, 0.88, 0.1, 0},{0.18, 0.07, 0.14, 0.1},{0.13, 0.15, 0.15, 0.04},{0.31, 0.18, 0.12, 0.27}}
testmsg
code! x=SamplesFromDMAP[D0,D1,10000]
code!@ mt = MarginalMomentsFromTrace[x,3]
code!@ mm = MarginalMomentsFromDMAP[D0,D1,3]

test SamplesFromDMMAP

inputmsg
defmat@ D0 # {{0.34, 0, 0},{0.06, 0.05, 0.03},{0.11, 0.13, 0}}
defmat@ D1 # {{0.3, 0, 0},{0.16, 0.18, 0.05},{0.15, 0.04, 0.09}}
defmat@ D2 # {{0, 0.01, 0},{0.1, 0.07, 0.08},{0.13, 0.12, 0.13}}
defmat@ D3 # {{0.35, 0, 0},{0, 0.18, 0.04},{0.06, 0.03, 0.01}}
code Dm = <-D0,D1,D2,D3->
testmsg
code! x=SamplesFromDMMAP[Dm,10000]
code!@ mt=MarginalMomentsFromTrace[x[[;;,1]],3]
code!@ mm=MarginalMomentsFromDMMAP[Dm,3]


