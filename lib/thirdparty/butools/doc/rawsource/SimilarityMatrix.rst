butools.reptrans.SimilarityMatrix
=================================

.. currentmodule:: butools.reptrans

.. np:function:: SimilarityMatrix

    .. list-table::
        :widths: 25 150

        * - Matlab:
          - :code:`B = SimilarityMatrix(A1, A2)`
        * - Mathematica:
          - :code:`B = SimilarityMatrix[A1, A2]`
        * - Python/Numpy:
          - :code:`B = SimilarityMatrix(A1, A2)`
    
    Returns the matrix that transforms A1 to A2.

    Parameters
    ----------
    A1 : matrix, shape (N,N)
        The smaller matrix
    A2 : matrix, shape (M,M)
        The larger matrix (M>=N)
    
    Returns
    -------
    B : matrix, shape (N,M)
        The matrix satisfying :math:`A_1\,B = B\,A_2`
        
    Notes
    -----
    For the existence of a (unique) solution the larger 
    matrix has to inherit the eigenvalues of the smaller one.

    Examples
    --------
    For Matlab:
    
    >>> A1 = [0.2 0.8 0; 1.2 -0.4 0.1; -0.2 0.7 0.5];
    >>> A2 = [0.0088058 0.29904 -0.4672 0.24887; -0.034691 -0.0035465 0.45729 0.02035; -0.20158 1.7687 -1.3378 0.82115; -0.090959 2.2638 -2.2997 1.6325];
    >>> B=SimilarityMatrix(A1,A2)
     0.068433      0.70187     -0.74628      0.97597
     0.030288      0.95884      -1.0099       1.0207
      0.07725      0.71553     -0.80571       1.0129
    >>>  A1*B-B*A2
     -1.9151e-15   8.8818e-16  -7.7716e-16   1.3323e-15
      -9.992e-16   5.5511e-16  -8.8818e-16   1.1102e-15
     -1.5613e-15   1.3323e-15  -6.6613e-16   6.6613e-16
     
    For Mathematica:
    
    >>> A1 = {{0.2, 0.8, 0}, {1.2, -0.4, 0.1}, {-0.2, 0.7, 0.5}};
    >>> T = {{1, 2, -4, 6},{0, 8, -9, 7},{-3, 7, 8, -2}};
    >>> A2 = PseudoInverse[T].A1.T;
    >>> Print[A2];
    {{0.00880575,0.299045,-0.467197,0.248872},{-0.0346914,-0.00354648,0.457289,0.0203502},{-0.201583,1.7687,-1.33776,0.821146},{-0.0909589,2.26381,-2.29974,1.6325}}
    >>> B=SimilarityMatrix[A1,A2]
    {{0.0684331, 0.701873, -0.746277, 0.975971}, 
     {0.0302878, 0.95884, -1.00987, 1.02074}, 
     {0.0772499, 0.715532, -0.80571, 1.01293}}
    >>> A1.B-B.A2
    {{-2.77556*10^-16, -8.88178*10^-16, 5.55112*10^-16, -2.22045*10^-16}, 
     {-1.249*10^-16, -4.44089*10^-16, 6.66134*10^-16, -4.44089*10^-16}, 
     {-2.498*10^-16, -4.44089*10^-16, 3.33067*10^-16, 0.}}
  
    For Python/Numpy:
    
    >>> A1 = ml.matrix([[0.2, 0.8, 0], [1.2, -0.4, 0.1], [-0.2, 0.7, 0.5]])
    >>> A2 = ml.matrix([[0.00880575, 0.29904484, -0.46719731,  0.24887238], [-0.03469139, -0.00354648,  0.457289  ,  0.02035023], [-0.2015826 ,  1.76869638, -1.33776127,  0.82114619], [-0.09095889, 2.26380561, -2.29973763,  1.63250199]])
    >>> B=SimilarityMatrix(A1,A2)
    >>> print(B)
    [[ 0.06843307  0.701873   -0.74627684  0.97597076]
     [ 0.0302878   0.95883965 -1.00986752  1.02074006]
     [ 0.07724989  0.71553221 -0.80571037  1.01292828]]
    >>> print(A1*B-B*A2)
    [[ -9.71445147e-17   0.00000000e+00  -2.22044605e-16   2.22044605e-16]
     [  1.52655666e-16  -3.33066907e-16   5.55111512e-16  -4.44089210e-16]
     [ -4.85722573e-17   2.22044605e-16  -2.22044605e-16   2.22044605e-16]]

